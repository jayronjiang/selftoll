###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:04
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\I2C24C02.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\I2C24C02.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\I2C24C02.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\I2C24C02.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\I2C24C02.c
      1          /*******************************************************************************************************
      2          *
      3          *                                 (c) Copyright 2004-2007, John Tonny
      4          *
      5          *                                           All Rights Reserved
      6          *
      7          ********************************************************************************************************
      8          *
      9          *--------------文件信息---------------------------------------------------------------------------------
     10          *文   件   名: I2c24C02.C
     11          *创   建   人: John Tonny
     12          *最后修改日期: 2005年05月01日
     13          *描        述:
     14          *
     15          *--------------历史版本信息-----------------------------------------------------------------------------
     16          * 创建人: John Tonny
     17          * 版  本: V1.0
     18          * 日　期: 2005年05月01日
     19          * 描　述: 原始版本
     20          *
     21          *-------------------------------------------------------------------------------------------------------
     22          * 修改人:
     23          * 版  本:
     24          * 日　期:
     25          * 描　述:
     26          *
     27          *--------------当前版本修订-----------------------------------------------------------------------------
     28          * 修改人:
     29          * 日　期:
     30          * 描　述:
     31          *
     32          *-------------------------------------------------------------------------------------------------------
     33          *******************************************************************************************************/
     34          
     35          #define  I2C24C02_GLOBALS
     36          #include "includes.h"
     37          
     38          #define EEPROM_BACKUP_ADDR 				0x80
     39          
     40          #define ADDR_24C02 								0xA0
     41          
     42          /*******************************************************************************************************
     43          ** 函数名称: EepromWriteBytes
     44          ** 功能描述:
     45          ** 输 　 入:
     46          **
     47          ** 输　  出:
     48          **
     49          ** 全局变量:
     50          ** 调用模块:
     51          **
     52          ** 作　  者: John Tonny
     53          ** 日　  期: 2005年05月01日
     54          **------------------------------------------------------------------------------------------------------
     55          ** 修 改 人:
     56          ** 日　  期:
     57          **------------------------------------------------------------------------------------------------------
     58          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     59          uint8_t EepromWriteBytes(uint8_t romAddr, uint8_t *info, uint8_t infolen )
     60          {
   \                     EepromWriteBytes: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0017             MOVS     R7,R2
     61            uint8_t i = 0; 
   \   0000000A   0x2600             MOVS     R6,#+0
     62                    
     63            uint8_t ucTx[16];
     64            
     65            if( romAddr+infolen > 256){
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000010   0x1938             ADDS     R0,R7,R4
   \   00000012   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000016   0xDD01             BLE.N    ??EepromWriteBytes_0
     66              return FALSE;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE027             B.N      ??EepromWriteBytes_1
     67            }
     68            if(infolen>8){
   \                     ??EepromWriteBytes_0: (+1)
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0x2F09             CMP      R7,#+9
   \   00000020   0xDB01             BLT.N    ??EepromWriteBytes_2
     69              return FALSE;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE022             B.N      ??EepromWriteBytes_1
     70            }
     71            
     72            ucTx[0]=romAddr;
   \                     ??EepromWriteBytes_2: (+1)
   \   00000026   0xF88D 0x4004      STRB     R4,[SP, #+4]
     73            for(i=0;i<infolen;i++){
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0006             MOVS     R6,R0
   \                     ??EepromWriteBytes_3: (+1)
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x0039             MOVS     R1,R7
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD207             BCS.N    ??EepromWriteBytes_4
     74              ucTx[1+i]=*info;
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0xA901             ADD      R1,SP,#+4
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0x4431             ADD      R1,R1,R6
   \   00000042   0x7048             STRB     R0,[R1, #+1]
     75              info++;
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
     76            }
   \   00000046   0x1C76             ADDS     R6,R6,#+1
   \   00000048   0xE7F1             B.N      ??EepromWriteBytes_3
     77            
     78            if(!I2cSend(ADDR_24C02,ucTx,1+infolen,NULL,0)){
   \                     ??EepromWriteBytes_4: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x1C7A             ADDS     R2,R7,#+1
   \   00000052   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x20A0             MOVS     R0,#+160
   \   00000058   0x.... 0x....      BL       I2cSend
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD101             BNE.N    ??EepromWriteBytes_5
     79              return FALSE;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE003             B.N      ??EepromWriteBytes_1
     80            }
     81            BSP_OS_TimeDlyMs(20);    
   \                     ??EepromWriteBytes_5: (+1)
   \   00000064   0x2014             MOVS     R0,#+20
   \   00000066   0x.... 0x....      BL       BSP_OS_TimeDlyMs
     82            return TRUE;
   \   0000006A   0x2001             MOVS     R0,#+1
   \                     ??EepromWriteBytes_1: (+1)
   \   0000006C   0xB005             ADD      SP,SP,#+20
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
     83          }
     84          
     85          /*******************************************************************************************************
     86          ** 函数名称: EepromReadBytes
     87          ** 功能描述:
     88          ** 输 　 入:
     89          **
     90          ** 输　  出:
     91          **
     92          ** 全局变量:
     93          ** 调用模块:
     94          **
     95          ** 作　  者: John Tonny
     96          ** 日　  期: 2005年05月01日
     97          **------------------------------------------------------------------------------------------------------
     98          ** 修 改 人:
     99          ** 日　  期:
    100          **------------------------------------------------------------------------------------------------------
    101          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          uint8_t EepromReadBytes( uint8_t romAddr, uint8_t *info, uint8_t infolen )
    103          {
   \                     EepromReadBytes: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    104            uint8_t ucTx[16];
    105          	
    106          	// Write SLA(W), address, SLA(R), and read one byte back. 
    107            if( romAddr+infolen >256 ){
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x1930             ADDS     R0,R6,R4
   \   00000010   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000014   0xDD01             BLE.N    ??EepromReadBytes_0
    108              return FALSE;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE014             B.N      ??EepromReadBytes_1
    109            }
    110          
    111            if(infolen>8){
   \                     ??EepromReadBytes_0: (+1)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E09             CMP      R6,#+9
   \   0000001E   0xDB01             BLT.N    ??EepromReadBytes_2
    112              return FALSE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE00F             B.N      ??EepromReadBytes_1
    113            }
    114          
    115            ucTx[0]=romAddr;
   \                     ??EepromReadBytes_2: (+1)
   \   00000024   0xF88D 0x4004      STRB     R4,[SP, #+4]
    116            if(!I2cSend(ADDR_24C02,ucTx,1,info,infolen)){
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x002B             MOVS     R3,R5
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x20A0             MOVS     R0,#+160
   \   00000036   0x.... 0x....      BL       I2cSend
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??EepromReadBytes_3
    117              return FALSE;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE000             B.N      ??EepromReadBytes_1
    118            }
    119            return TRUE;
   \                     ??EepromReadBytes_3: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
   \                     ??EepromReadBytes_1: (+1)
   \   00000044   0xB006             ADD      SP,SP,#+24
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    120          }
    121          
    122          /*******************************************************************************************************
    123          ** 函数名称: EepromWriteVerifyBytes
    124          ** 功能描述:
    125          ** 输 　 入:
    126          **
    127          ** 输　  出:
    128          **
    129          ** 全局变量:
    130          ** 调用模块:
    131          **
    132          ** 作　  者: John Tonny
    133          ** 日　  期: 2005年05月01日
    134          **------------------------------------------------------------------------------------------------------
    135          ** 修 改 人:
    136          ** 日　  期:
    137          **------------------------------------------------------------------------------------------------------
    138          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    139          uint8_t EepromWriteVerifyBytes( uint8_t romAddr, uint8_t *info, uint8_t infolen )
    140          {
   \                     EepromWriteVerifyBytes: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    141            uint8_t i;
    142            uint8_t ucBuf[8];
    143            uint8_t ucBuf1[8];
    144            uint8_t ucBufA[8];
    145            uint8_t ucBufB[8];
    146            uint16_t uiCrc16;
    147            uint8_t ucRet;
    148            uint8_t ucRet1;
    149            uint8_t ucRead;
    150            uint8_t ucRead1;
    151          
    152            if(infolen>6){
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D07             CMP      R5,#+7
   \   0000000E   0xDB01             BLT.N    ??EepromWriteVerifyBytes_0
    153              return FALSE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE0B2             B.N      ??EepromWriteVerifyBytes_1
    154            }
    155          
    156            Mem_Copy(ucBuf,info,infolen);
   \                     ??EepromWriteVerifyBytes_0: (+1)
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x002A             MOVS     R2,R5
   \   00000018   0x9908             LDR      R1,[SP, #+32]
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       Mem_Copy
    157            uiCrc16=RevCrc16Bytes(ucBuf,infolen,0xA001);
   \   00000020   0xF24A 0x0201      MOVW     R2,#+40961
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       RevCrc16Bytes
   \   0000002E   0x4683             MOV      R11,R0
    158            ucBuf[infolen]=uiCrc16;
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0xF800 0xB005      STRB     R11,[R0, R5]
    159            ucBuf[infolen+1]=uiCrc16>>8;
   \   00000038   0x4658             MOV      R0,R11
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x0A00             LSRS     R0,R0,#+8
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x4429             ADD      R1,R1,R5
   \   00000044   0x7048             STRB     R0,[R1, #+1]
    160          
    161            for(i=0;i<3;i++){
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x0006             MOVS     R6,R0
   \                     ??EepromWriteVerifyBytes_2: (+1)
   \   0000004A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004C   0x2E03             CMP      R6,#+3
   \   0000004E   0xDA26             BGE.N    ??EepromWriteVerifyBytes_3
    162              ucRead=0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4681             MOV      R9,R0
    163              if(EepromReadBytes(romAddr,ucBufA,infolen+2)){
   \   00000054   0x1CAA             ADDS     R2,R5,#+2
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0xA906             ADD      R1,SP,#+24
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       EepromReadBytes
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD001             BEQ.N    ??EepromWriteVerifyBytes_4
    164                ucRead=1;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x4681             MOV      R9,R0
    165              }
    166              ucRead1=0;
   \                     ??EepromWriteVerifyBytes_4: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x4682             MOV      R10,R0
    167              if(EepromReadBytes(romAddr+EEPROM_BACKUP_ADDR,ucBufB,infolen+2)){
   \   0000006E   0x1CAA             ADDS     R2,R5,#+2
   \   00000070   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000072   0xA904             ADD      R1,SP,#+16
   \   00000074   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x.... 0x....      BL       EepromReadBytes
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD001             BEQ.N    ??EepromWriteVerifyBytes_5
    168                ucRead1=1;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x4682             MOV      R10,R0
    169              }
    170              if(ucRead && ucRead1){
   \                     ??EepromWriteVerifyBytes_5: (+1)
   \   00000086   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000008A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000008E   0xD004             BEQ.N    ??EepromWriteVerifyBytes_6
   \   00000090   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000094   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000098   0xD101             BNE.N    ??EepromWriteVerifyBytes_3
    171                break;
    172              }
    173            }
   \                     ??EepromWriteVerifyBytes_6: (+1)
   \   0000009A   0x1C76             ADDS     R6,R6,#+1
   \   0000009C   0xE7D5             B.N      ??EepromWriteVerifyBytes_2
    174          
    175          
    176            for(i=0;i<3;i++){
   \                     ??EepromWriteVerifyBytes_3: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x0006             MOVS     R6,R0
   \                     ??EepromWriteVerifyBytes_7: (+1)
   \   000000A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A4   0x2E03             CMP      R6,#+3
   \   000000A6   0xDA67             BGE.N    ??EepromWriteVerifyBytes_8
    177              ucRet=1;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x0007             MOVS     R7,R0
    178              if(!ucRead || !Mem_Cmp(ucBuf,ucBufA,infolen+2)){
   \   000000AC   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B0   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000B4   0xD007             BEQ.N    ??EepromWriteVerifyBytes_9
   \   000000B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B8   0x1CAA             ADDS     R2,R5,#+2
   \   000000BA   0xA906             ADD      R1,SP,#+24
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x.... 0x....      BL       Mem_Cmp
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD11D             BNE.N    ??EepromWriteVerifyBytes_10
    179                ucRet=0;
   \                     ??EepromWriteVerifyBytes_9: (+1)
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x0007             MOVS     R7,R0
    180                if(EepromWriteBytes(romAddr,ucBuf,infolen+2)){
   \   000000CA   0x1CAA             ADDS     R2,R5,#+2
   \   000000CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CE   0x4669             MOV      R1,SP
   \   000000D0   0x0020             MOVS     R0,R4
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0x.... 0x....      BL       EepromWriteBytes
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD012             BEQ.N    ??EepromWriteVerifyBytes_10
    181                  if(EepromReadBytes(romAddr,ucBuf1,infolen+2)){
   \   000000DC   0x1CAA             ADDS     R2,R5,#+2
   \   000000DE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000E0   0xA902             ADD      R1,SP,#+8
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x.... 0x....      BL       EepromReadBytes
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD009             BEQ.N    ??EepromWriteVerifyBytes_10
    182                    if(Mem_Cmp(ucBuf,ucBuf1,infolen+2)){
   \   000000EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F0   0x1CAA             ADDS     R2,R5,#+2
   \   000000F2   0xA902             ADD      R1,SP,#+8
   \   000000F4   0x4668             MOV      R0,SP
   \   000000F6   0x.... 0x....      BL       Mem_Cmp
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD001             BEQ.N    ??EepromWriteVerifyBytes_10
    183                      ucRet=1;
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x0007             MOVS     R7,R0
    184                    }
    185                  }
    186                }
    187              }
    188              
    189              ucRet1=1;
   \                     ??EepromWriteVerifyBytes_10: (+1)
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x4680             MOV      R8,R0
    190              if(!ucRead1 || !Mem_Cmp(ucBuf,ucBufB,infolen+2)){
   \   00000106   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000010A   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000010E   0xD007             BEQ.N    ??EepromWriteVerifyBytes_11
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x1CAA             ADDS     R2,R5,#+2
   \   00000114   0xA904             ADD      R1,SP,#+16
   \   00000116   0x4668             MOV      R0,SP
   \   00000118   0x.... 0x....      BL       Mem_Cmp
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD11F             BNE.N    ??EepromWriteVerifyBytes_12
    191                ucRet1=0;
   \                     ??EepromWriteVerifyBytes_11: (+1)
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x4680             MOV      R8,R0
    192                if(EepromWriteBytes(romAddr+EEPROM_BACKUP_ADDR,ucBuf,infolen+2)){
   \   00000124   0x1CAA             ADDS     R2,R5,#+2
   \   00000126   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000128   0x4669             MOV      R1,SP
   \   0000012A   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   0000012E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000130   0x.... 0x....      BL       EepromWriteBytes
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD013             BEQ.N    ??EepromWriteVerifyBytes_12
    193                  if(EepromReadBytes(romAddr+EEPROM_BACKUP_ADDR,ucBuf1,infolen+2)){
   \   00000138   0x1CAA             ADDS     R2,R5,#+2
   \   0000013A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000013C   0xA902             ADD      R1,SP,#+8
   \   0000013E   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   00000142   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000144   0x.... 0x....      BL       EepromReadBytes
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD009             BEQ.N    ??EepromWriteVerifyBytes_12
    194                    if(Mem_Cmp(ucBuf,ucBuf1,infolen+2)){
   \   0000014C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014E   0x1CAA             ADDS     R2,R5,#+2
   \   00000150   0xA902             ADD      R1,SP,#+8
   \   00000152   0x4668             MOV      R0,SP
   \   00000154   0x.... 0x....      BL       Mem_Cmp
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD001             BEQ.N    ??EepromWriteVerifyBytes_12
    195                      ucRet1=1;
   \   0000015C   0x2001             MOVS     R0,#+1
   \   0000015E   0x4680             MOV      R8,R0
    196                    }
    197                  }
    198                }
    199              }
    200              if(ucRet || ucRet1){
   \                     ??EepromWriteVerifyBytes_12: (+1)
   \   00000160   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000162   0x2F00             CMP      R7,#+0
   \   00000164   0xD104             BNE.N    ??EepromWriteVerifyBytes_13
   \   00000166   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000016A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000016E   0xD001             BEQ.N    ??EepromWriteVerifyBytes_14
    201                return TRUE;
   \                     ??EepromWriteVerifyBytes_13: (+1)
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0xE002             B.N      ??EepromWriteVerifyBytes_1
    202              }
    203            }
   \                     ??EepromWriteVerifyBytes_14: (+1)
   \   00000174   0x1C76             ADDS     R6,R6,#+1
   \   00000176   0xE794             B.N      ??EepromWriteVerifyBytes_7
    204            return FALSE;
   \                     ??EepromWriteVerifyBytes_8: (+1)
   \   00000178   0x2000             MOVS     R0,#+0
   \                     ??EepromWriteVerifyBytes_1: (+1)
   \   0000017A   0xB009             ADD      SP,SP,#+36
   \   0000017C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    205          }
    206          
    207          /*******************************************************************************************************
    208          ** 函数名称: EepromReadVerifyBytes
    209          ** 功能描述:
    210          ** 输 　 入:
    211          **
    212          ** 输　  出:
    213          **
    214          ** 全局变量:
    215          ** 调用模块:
    216          **
    217          ** 作　  者: John Tonny
    218          ** 日　  期: 2005年05月01日
    219          **------------------------------------------------------------------------------------------------------
    220          ** 修 改 人:
    221          ** 日　  期:
    222          **------------------------------------------------------------------------------------------------------
    223          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    224          uint8_t EepromReadVerifyBytes( uint8_t romAddr, uint8_t *info, uint8_t infolen )
    225          {
   \                     EepromReadVerifyBytes: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    226            uint8_t i;
    227            uint8_t ucBuf[8];
    228          
    229            if(infolen>6){
   \   0000000A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000C   0x2E07             CMP      R6,#+7
   \   0000000E   0xDB01             BLT.N    ??EepromReadVerifyBytes_0
    230              return FALSE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE04A             B.N      ??EepromReadVerifyBytes_1
    231            }
    232          
    233            for(i=0;i<3;i++){
   \                     ??EepromReadVerifyBytes_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0007             MOVS     R7,R0
   \                     ??EepromReadVerifyBytes_2: (+1)
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x2F03             CMP      R7,#+3
   \   0000001C   0xDA44             BGE.N    ??EepromReadVerifyBytes_3
    234              if(EepromReadBytes(romAddr,ucBuf,infolen+2)){
   \   0000001E   0x1CB2             ADDS     R2,R6,#+2
   \   00000020   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       EepromReadBytes
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD017             BEQ.N    ??EepromReadVerifyBytes_4
    235                if(!RevCrc16Bytes(ucBuf,infolen+2,0xA001)){
   \   00000030   0xF24A 0x0201      MOVW     R2,#+40961
   \   00000034   0x1CB1             ADDS     R1,R6,#+2
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       RevCrc16Bytes
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD10E             BNE.N    ??EepromReadVerifyBytes_4
    236                  Mem_Copy(info,ucBuf,infolen);
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x0032             MOVS     R2,R6
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       Mem_Copy
    237                  EepromWriteVerifyBytes(romAddr,ucBuf,infolen);
   \   0000004E   0x0032             MOVS     R2,R6
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x.... 0x....      BL       EepromWriteVerifyBytes
    238                  return TRUE;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE024             B.N      ??EepromReadVerifyBytes_1
    239                }
    240              }
    241          
    242              if(EepromReadBytes(romAddr+EEPROM_BACKUP_ADDR,ucBuf,infolen+2)){
   \                     ??EepromReadVerifyBytes_4: (+1)
   \   00000060   0x1CB2             ADDS     R2,R6,#+2
   \   00000062   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x.... 0x....      BL       EepromReadBytes
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD017             BEQ.N    ??EepromReadVerifyBytes_5
    243                if(!RevCrc16Bytes(ucBuf,infolen+2,0xA001)){
   \   00000074   0xF24A 0x0201      MOVW     R2,#+40961
   \   00000078   0x1CB1             ADDS     R1,R6,#+2
   \   0000007A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x.... 0x....      BL       RevCrc16Bytes
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD10E             BNE.N    ??EepromReadVerifyBytes_5
    244                  Mem_Copy(info,ucBuf,infolen);
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0x0032             MOVS     R2,R6
   \   0000008A   0x4669             MOV      R1,SP
   \   0000008C   0x0028             MOVS     R0,R5
   \   0000008E   0x.... 0x....      BL       Mem_Copy
    245                  EepromWriteVerifyBytes(romAddr,ucBuf,infolen);
   \   00000092   0x0032             MOVS     R2,R6
   \   00000094   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x0020             MOVS     R0,R4
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x.... 0x....      BL       EepromWriteVerifyBytes
    246                  return TRUE;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE002             B.N      ??EepromReadVerifyBytes_1
    247                }
    248              }
    249            }
   \                     ??EepromReadVerifyBytes_5: (+1)
   \   000000A4   0x1C7F             ADDS     R7,R7,#+1
   \   000000A6   0xE7B7             B.N      ??EepromReadVerifyBytes_2
    250            return FALSE;
   \                     ??EepromReadVerifyBytes_3: (+1)
   \   000000A8   0x2000             MOVS     R0,#+0
   \                     ??EepromReadVerifyBytes_1: (+1)
   \   000000AA   0xBDFE             POP      {R1-R7,PC}       ;; return
    251          }
    252          
    253          
    254          /******************************************************************************
    255          **                            End Of File
    256          ******************************************************************************/
    257          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   EepromReadBytes
        40   -> I2cSend
      32   EepromReadVerifyBytes
        32   -> EepromReadBytes
        32   -> EepromWriteVerifyBytes
        32   -> Mem_Copy
        32   -> RevCrc16Bytes
      40   EepromWriteBytes
        40   -> BSP_OS_TimeDlyMs
        40   -> I2cSend
      72   EepromWriteVerifyBytes
        72   -> EepromReadBytes
        72   -> EepromWriteBytes
        72   -> Mem_Cmp
        72   -> Mem_Copy
        72   -> RevCrc16Bytes


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  EepromReadBytes
     172  EepromReadVerifyBytes
     112  EepromWriteBytes
     384  EepromWriteVerifyBytes

 
 740 bytes in section .text
 
 740 bytes of CODE memory

Errors: none
Warnings: none
