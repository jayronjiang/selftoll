###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:04
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Key.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Key.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\Key.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\Key.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Key.c
      1          /*******************************************************************************************************
      2          *
      3          *                                 (c) Copyright 2004-2007, John Tonny
      4          *
      5          *                                           All Rights Reserved
      6          *
      7          ********************************************************************************************************
      8          *
      9          *--------------文件信息---------------------------------------------------------------------------------
     10          *文   件   名: Key.C
     11          *创   建   人: John Tonny
     12          *最后修改日期: 2009年11月01日
     13          *描        述:
     14          *
     15          *--------------历史版本信息-----------------------------------------------------------------------------
     16          * 创建人: John Tonny
     17          * 版  本: V1.0
     18          * 日　期: 2009年11月01日
     19          * 描　述: 原始版本
     20          *
     21          *-------------------------------------------------------------------------------------------------------
     22          * 修改人:
     23          * 版  本:
     24          * 日　期:
     25          * 描　述:
     26          *
     27          *--------------当前版本修订-----------------------------------------------------------------------------
     28          * 修改人:
     29          * 日　期:
     30          * 描　述:
     31          *
     32          *-------------------------------------------------------------------------------------------------------
     33          *******************************************************************************************************/
     34          
     35          #define KEY_GLOBALS
     36          #include "includes.h"
     37          
     38          /********************************************************************************************************
     39          ** 函数名称: KeyDeBounce1
     40          ** 功能描述:
     41          ** 输 　 入:
     42          **
     43          ** 输　  出:
     44          **
     45          ** 全局变量:
     46          ** 调用模块:
     47          **
     48          ** 作　  者: John Tonny
     49          ** 日　  期: 2005年05月01日
     50          **------------------------------------------------------------------------------------------------------
     51          ** 修 改 人:
     52          ** 日　  期:
     53          **------------------------------------------------------------------------------------------------------
     54          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     55          void KeyDeBounce1(void)
     56          {
     57            g_usrGetKey1.ulKeyReady=g_usrGetKey1.ulKeyTemp & g_usrGetKey1.ulKeyInput | g_usrGetKey1.ulKeyReady & (g_usrGetKey1.ulKeyTemp^g_usrGetKey1.ulKeyInput);
   \                     KeyDeBounce1: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000A   0x6909             LDR      R1,[R1, #+16]
   \   0000000C   0x4008             ANDS     R0,R1,R0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable5
   \   00000012   0x68C9             LDR      R1,[R1, #+12]
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable5
   \   00000018   0x6852             LDR      R2,[R2, #+4]
   \   0000001A   0x.... 0x....      LDR.W    R3,??DataTable5
   \   0000001E   0x691B             LDR      R3,[R3, #+16]
   \   00000020   0x405A             EORS     R2,R3,R2
   \   00000022   0x4011             ANDS     R1,R2,R1
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000002A   0x60C8             STR      R0,[R1, #+12]
     58            
     59            g_usrGetKey1.ulKeyTemp=g_usrGetKey1.ulKeyInput;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000030   0x6900             LDR      R0,[R0, #+16]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5
   \   00000036   0x6048             STR      R0,[R1, #+4]
     60            
     61            g_usrGetKey1.ulKeyOutput=g_usrGetKey1.ulKeyReady &(~g_usrGetKey1.ulKeyStore | KEY_REPEAT_INST);   		//?????????????????
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable5
   \   00000042   0x6148             STR      R0,[R1, #+20]
     62            
     63            g_usrGetKey1.ulKeyStore=g_usrGetKey1.ulKeyReady;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000048   0x68C0             LDR      R0,[R0, #+12]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000004E   0x6088             STR      R0,[R1, #+8]
     64          }
   \   00000050   0x4770             BX       LR               ;; return
     65          
     66          
     67          /********************************************************************************************************
     68          ** 函数名称: KeyDeBounce
     69          ** 功能描述:
     70          ** 输 　 入:
     71          **
     72          ** 输　  出:
     73          **
     74          ** 全局变量:
     75          ** 调用模块:
     76          **
     77          ** 作　  者: John Tonny
     78          ** 日　  期: 2005年05月01日
     79          **------------------------------------------------------------------------------------------------------
     80          ** 修 改 人:
     81          ** 日　  期:
     82          **------------------------------------------------------------------------------------------------------
     83          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void KeyDeBounce(void)
     85          {
     86            g_usrGetKey.ulKeyReady=g_usrGetKey.ulKeyTemp & g_usrGetKey.ulKeyInput | g_usrGetKey.ulKeyReady & (g_usrGetKey.ulKeyTemp^g_usrGetKey.ulKeyInput);
   \                     KeyDeBounce: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000000A   0x6909             LDR      R1,[R1, #+16]
   \   0000000C   0x4008             ANDS     R0,R1,R0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000012   0x68C9             LDR      R1,[R1, #+12]
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable5_1
   \   00000018   0x6852             LDR      R2,[R2, #+4]
   \   0000001A   0x.... 0x....      LDR.W    R3,??DataTable5_1
   \   0000001E   0x691B             LDR      R3,[R3, #+16]
   \   00000020   0x405A             EORS     R2,R3,R2
   \   00000022   0x4011             ANDS     R1,R2,R1
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000002A   0x60C8             STR      R0,[R1, #+12]
     87            
     88            g_usrGetKey.ulKeyTemp=g_usrGetKey.ulKeyInput;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000030   0x6900             LDR      R0,[R0, #+16]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000036   0x6048             STR      R0,[R1, #+4]
     89            
     90            g_usrGetKey.ulKeyOutput=g_usrGetKey.ulKeyReady &(~g_usrGetKey.ulKeyStore | KEY_REPEAT_INST);   		//?????????????????
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000042   0x6148             STR      R0,[R1, #+20]
     91            
     92            g_usrGetKey.ulKeyStore=g_usrGetKey.ulKeyReady;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000048   0x68C0             LDR      R0,[R0, #+12]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000004E   0x6088             STR      R0,[R1, #+8]
     93          }
   \   00000050   0x4770             BX       LR               ;; return
     94          
     95          /********************************************************************************************************
     96          ** 函数名称: GetKey
     97          ** 功能描述:
     98          ** 输 　 入:
     99          **
    100          ** 输　  出:
    101          **
    102          ** 全局变量:
    103          ** 调用模块:
    104          **
    105          ** 作　  者: John Tonny
    106          ** 日　  期: 2005年05月01日
    107          **------------------------------------------------------------------------------------------------------
    108          ** 修 改 人:
    109          ** 日　  期:
    110          **------------------------------------------------------------------------------------------------------
    111          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          INT32U GetKey(void)
    113          {  
   \                     GetKey: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    114            INT8U ucType=DEV_TYPE();
   \   00000002   0x.... 0x....      BL       DEV_TYPE
   \   00000006   0x0001             MOVS     R1,R0
    115          
    116          #if BOARD_OLD_EN==0  
    117            INT32U ulTmp=0;
   \   00000008   0x2000             MOVS     R0,#+0
    118            INT32U ulMaskBit=0x7F7F7F7F;
   \   0000000A   0xF05F 0x327F      MOVS     R2,#+2139062143
    119            INT32U ulXorBit=0xFFFFFFFF;
   \   0000000E   0xF05F 0x33FF      MOVS     R3,#-1
    120                    
    121            ulTmp=(FIO0PIN>>4)&0x3F;
   \   00000012   0x.... 0x....      LDR.W    R4,??DataTable5_2  ;; 0x2009c014
   \   00000016   0x6824             LDR      R4,[R4, #+0]
   \   00000018   0xF3C4 0x1405      UBFX     R4,R4,#+4,#+6
   \   0000001C   0x0020             MOVS     R0,R4
    122            ulTmp|=(FIO1PIN<<5)&0x40;
   \   0000001E   0x.... 0x....      LDR.W    R4,??DataTable5_3  ;; 0x2009c034
   \   00000022   0x6824             LDR      R4,[R4, #+0]
   \   00000024   0x0164             LSLS     R4,R4,#+5
   \   00000026   0xF014 0x0440      ANDS     R4,R4,#0x40
   \   0000002A   0x4320             ORRS     R0,R4,R0
    123            
    124            ulTmp|=(FIO2PIN<<6)&0x3F00;
   \   0000002C   0x.... 0x....      LDR.W    R4,??DataTable5_4  ;; 0x2009c054
   \   00000030   0x6824             LDR      R4,[R4, #+0]
   \   00000032   0x01A4             LSLS     R4,R4,#+6
   \   00000034   0xF414 0x547C      ANDS     R4,R4,#0x3F00
   \   00000038   0x4320             ORRS     R0,R4,R0
    125            ulTmp|=(FIO1PIN<<10)&0x4000;
   \   0000003A   0x.... 0x....      LDR.W    R4,??DataTable5_3  ;; 0x2009c034
   \   0000003E   0x6824             LDR      R4,[R4, #+0]
   \   00000040   0x02A4             LSLS     R4,R4,#+10
   \   00000042   0xF414 0x4480      ANDS     R4,R4,#0x4000
   \   00000046   0x4320             ORRS     R0,R4,R0
    126            
    127            ulTmp|=(FIO2PIN<<8)&0x30000;
   \   00000048   0x.... 0x....      LDR.W    R4,??DataTable5_4  ;; 0x2009c054
   \   0000004C   0x6824             LDR      R4,[R4, #+0]
   \   0000004E   0x0224             LSLS     R4,R4,#+8
   \   00000050   0xF414 0x3440      ANDS     R4,R4,#0x30000
   \   00000054   0x4320             ORRS     R0,R4,R0
    128            ulTmp|=(FIO0PIN<<2)&0x40000;
   \   00000056   0x.... 0x....      LDR.W    R4,??DataTable5_2  ;; 0x2009c014
   \   0000005A   0x6824             LDR      R4,[R4, #+0]
   \   0000005C   0x00A4             LSLS     R4,R4,#+2
   \   0000005E   0xF414 0x2480      ANDS     R4,R4,#0x40000
   \   00000062   0x4320             ORRS     R0,R4,R0
    129            ulTmp|=(FIO0PIN<<4)&0x80000;
   \   00000064   0x.... 0x....      LDR.W    R4,??DataTable5_2  ;; 0x2009c014
   \   00000068   0x6824             LDR      R4,[R4, #+0]
   \   0000006A   0x0124             LSLS     R4,R4,#+4
   \   0000006C   0xF414 0x2400      ANDS     R4,R4,#0x80000
   \   00000070   0x4320             ORRS     R0,R4,R0
    130            ulTmp|=(FIO0PIN<<3)&0x300000;
   \   00000072   0x.... 0x....      LDR.W    R4,??DataTable5_2  ;; 0x2009c014
   \   00000076   0x6824             LDR      R4,[R4, #+0]
   \   00000078   0x00E4             LSLS     R4,R4,#+3
   \   0000007A   0xF414 0x1440      ANDS     R4,R4,#0x300000
   \   0000007E   0x4320             ORRS     R0,R4,R0
    131            ulTmp|=(FIO1PIN<<14)&0x400000;
   \   00000080   0x.... 0x....      LDR.W    R4,??DataTable5_3  ;; 0x2009c034
   \   00000084   0x6824             LDR      R4,[R4, #+0]
   \   00000086   0x03A4             LSLS     R4,R4,#+14
   \   00000088   0xF414 0x0480      ANDS     R4,R4,#0x400000
   \   0000008C   0x4320             ORRS     R0,R4,R0
    132            
    133            ulTmp|=(FIO0PIN<<5)&0x0F000000;
   \   0000008E   0x.... 0x....      LDR.W    R4,??DataTable5_2  ;; 0x2009c014
   \   00000092   0x6824             LDR      R4,[R4, #+0]
   \   00000094   0x0164             LSLS     R4,R4,#+5
   \   00000096   0xF014 0x6470      ANDS     R4,R4,#0xF000000
   \   0000009A   0x4320             ORRS     R0,R4,R0
    134            ulTmp|=(FIO2PIN<<17)&0x30000000;
   \   0000009C   0x.... 0x....      LDR.W    R4,??DataTable5_4  ;; 0x2009c054
   \   000000A0   0x6824             LDR      R4,[R4, #+0]
   \   000000A2   0x0464             LSLS     R4,R4,#+17
   \   000000A4   0xF014 0x5440      ANDS     R4,R4,#0x30000000
   \   000000A8   0x4320             ORRS     R0,R4,R0
    135            ulTmp|=(FIO2PIN<<20)&0x40000000;
   \   000000AA   0x.... 0x....      LDR.W    R4,??DataTable5_4  ;; 0x2009c054
   \   000000AE   0x6824             LDR      R4,[R4, #+0]
   \   000000B0   0x0524             LSLS     R4,R4,#+20
   \   000000B2   0xF014 0x4480      ANDS     R4,R4,#0x40000000
   \   000000B6   0x4320             ORRS     R0,R4,R0
    136            
    137            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD1_BIT]);
   \   000000B8   0x2401             MOVS     R4,#+1
   \   000000BA   0x.... 0x....      LDR.W    R5,??DataTable5_5
   \   000000BE   0xF995 0x5003      LDRSB    R5,[R5, #+3]
   \   000000C2   0x40AC             LSLS     R4,R4,R5
   \   000000C4   0x43A3             BICS     R3,R3,R4
    138            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD2_BIT]);
   \   000000C6   0x2401             MOVS     R4,#+1
   \   000000C8   0x.... 0x....      LDR.W    R5,??DataTable5_5
   \   000000CC   0xF995 0x500B      LDRSB    R5,[R5, #+11]
   \   000000D0   0x40AC             LSLS     R4,R4,R5
   \   000000D2   0x43A3             BICS     R3,R3,R4
    139            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD3_BIT]);
   \   000000D4   0x2401             MOVS     R4,#+1
   \   000000D6   0x.... 0x....      LDR.W    R5,??DataTable5_5
   \   000000DA   0xF995 0x5013      LDRSB    R5,[R5, #+19]
   \   000000DE   0x40AC             LSLS     R4,R4,R5
   \   000000E0   0x43A3             BICS     R3,R3,R4
    140            ulXorBit&=~(1<<m_ucKeyBit[BOX3_REV2_BIT]);
   \   000000E2   0x2401             MOVS     R4,#+1
   \   000000E4   0x.... 0x....      LDR.W    R5,??DataTable5_5
   \   000000E8   0xF995 0x5015      LDRSB    R5,[R5, #+21]
   \   000000EC   0x40AC             LSLS     R4,R4,R5
   \   000000EE   0x43A3             BICS     R3,R3,R4
    141            
    142            if(ucType==SMALL_THICK_ZIN_TYPE || ucType==SMALL_THIN_ZIN_TYPE){
   \   000000F0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F2   0x2902             CMP      R1,#+2
   \   000000F4   0xD002             BEQ.N    ??GetKey_0
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0x290A             CMP      R1,#+10
   \   000000FA   0xD106             BNE.N    ??GetKey_1
    143              ulXorBit&=~(1<<m_ucKeyBit[DMOTO2_POSA_BIT]);
   \                     ??GetKey_0: (+1)
   \   000000FC   0x2401             MOVS     R4,#+1
   \   000000FE   0x.... 0x....      LDR.W    R5,??DataTable5_5
   \   00000102   0xF995 0x5008      LDRSB    R5,[R5, #+8]
   \   00000106   0x40AC             LSLS     R4,R4,R5
   \   00000108   0x43A3             BICS     R3,R3,R4
    144            }
    145            
    146            ulTmp^=ulXorBit;
   \                     ??GetKey_1: (+1)
   \   0000010A   0x4058             EORS     R0,R3,R0
    147            ulTmp&=ulMaskBit;
   \   0000010C   0x4010             ANDS     R0,R2,R0
    148            
    149          #else
    150              
    151            INT32U ulTmp=0;
    152            INT32U ulMaskBit=0x7F7F7F7F;
    153            INT32U ulXorBit=0xFFFFFFFF;
    154                    
    155            ulTmp=(FIO0PIN>>15)&0x07;
    156            ulTmp|=(FIO0PIN>>16)&0x38;
    157            
    158            ulTmp|=(FIO1PIN>>10)&0x3F00;
    159            
    160            ulTmp|=(FIO1PIN>>8)&0x3F0000;
    161            
    162            ulTmp|=(FIO2PIN<<17)&0x07000000;  
    163            ulTmp|=(FIO2PIN<<16)&0x380000000;  
    164            
    165            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD1_BIT]);
    166            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD2_BIT]);
    167            ulXorBit&=~(1<<m_ucKeyBit[BOXLOAD3_BIT]);
    168            ulXorBit&=~(1<<m_ucKeyBit[BOX3_REV2_BIT]);
    169            
    170            
    171            ulTmp^=ulXorBit;
    172            ulTmp&=ulMaskBit;
    173            
    174          #endif  
    175            return ulTmp;
   \   0000010E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    176          }
    177          
    178          /********************************************************************************************************
    179          ** 函数名称: GetKeyOutput
    180          ** 功能描述:
    181          ** 输 　 入:
    182          **
    183          ** 输　  出:
    184          **
    185          ** 全局变量:
    186          ** 调用模块:
    187          **
    188          ** 作　  者: John Tonny
    189          ** 日　  期: 2005年05月01日
    190          **------------------------------------------------------------------------------------------------------
    191          ** 修 改 人:
    192          ** 日　  期:
    193          **------------------------------------------------------------------------------------------------------
    194          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    195          INT32U GetKeyOutput(void)
    196          {
   \                     GetKeyOutput: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    197            INT32U ulTmp;
    198            
    199            CPU_SR_ALLOC();
   \   00000002   0x2500             MOVS     R5,#+0
    200            
    201            OS_ENTER_CRITICAL();
   \   00000004   0x.... 0x....      BL       CPU_SR_Save
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0x.... 0x....      BL       CPU_IntDisMeasStart
    202            ulTmp=g_usrGetKey.ulKeyOutput;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000012   0x6940             LDR      R0,[R0, #+20]
   \   00000014   0x0004             MOVS     R4,R0
    203            OS_EXIT_CRITICAL();
   \   00000016   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       CPU_SR_Restore
    204            return ulTmp;
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    205          }
    206          
    207          /********************************************************************************************************
    208          ** 函数名称: KeyConvert
    209          ** 功能描述:
    210          ** 输 　 入:
    211          **
    212          ** 输　  出:
    213          **
    214          ** 全局变量:
    215          ** 调用模块:
    216          **
    217          ** 作　  者: John Tonny
    218          ** 日　  期: 2005年05月01日
    219          **------------------------------------------------------------------------------------------------------
    220          ** 修 改 人:
    221          ** 日　  期:
    222          **------------------------------------------------------------------------------------------------------
    223          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    224          INT32U KeyConvert(INT32U ulData)
    225          {
   \                     KeyConvert: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    226            INT32U ulTmp=0;
   \   00000004   0x2500             MOVS     R5,#+0
    227            INT32U ulTmp1;
    228            INT8U ucType=DEV_TYPE();
   \   00000006   0x.... 0x....      BL       DEV_TYPE
   \   0000000A   0x0001             MOVS     R1,R0
    229            
    230            if(ucType==LARGE_THICK_OUT_TYPE){
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x2904             CMP      R1,#+4
   \   00000010   0xF040 0x80E8      BNE.W    ??KeyConvert_0
    231              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSE1_BIT]) & 0x01);						//?¨?D???¨?ú?a1?,0:óD?¨
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000018   0x7880             LDRB     R0,[R0, #+2]
   \   0000001A   0x0022             MOVS     R2,R4
   \   0000001C   0x40C2             LSRS     R2,R2,R0
   \   0000001E   0xF012 0x0001      ANDS     R0,R2,#0x1
   \   00000022   0x4305             ORRS     R5,R0,R5
    232              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO1_POSA_BIT]) & 0x01)<<1;				//?±á÷μ??ú1μ????a1?,0:μ???
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x0022             MOVS     R2,R4
   \   0000002C   0x40C2             LSRS     R2,R2,R0
   \   0000002E   0x0050             LSLS     R0,R2,#+1
   \   00000030   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000034   0x4305             ORRS     R5,R0,R5
    233              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO1_POSB_BIT]) & 0x01)<<2;				//?±á÷μ??ú2μ????a1?,0:μ???
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000003A   0x7840             LDRB     R0,[R0, #+1]
   \   0000003C   0x0022             MOVS     R2,R4
   \   0000003E   0x40C2             LSRS     R2,R2,R0
   \   00000040   0x0090             LSLS     R0,R2,#+2
   \   00000042   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000046   0x4305             ORRS     R5,R0,R5
    234              ulTmp|= ((ulData>>m_ucKeyBit[BOXLOAD1_BIT]) & 0x01)<<3;						//?¨?D1×°???a1?,0:×°??
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000004C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004E   0x0022             MOVS     R2,R4
   \   00000050   0x40C2             LSRS     R2,R2,R0
   \   00000052   0x00D0             LSLS     R0,R2,#+3
   \   00000054   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   00000058   0x4305             ORRS     R5,R0,R5
    235              ulTmp|=	(m_usrBoxInfo[BOX_FIRST].ucCounts?1:0)<<4;												//?¨?D1?DóD?T?¨,0:óD?¨
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD001             BEQ.N    ??KeyConvert_1
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0xE000             B.N      ??KeyConvert_2
   \                     ??KeyConvert_1: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \                     ??KeyConvert_2: (+1)
   \   0000006A   0xEA55 0x1500      ORRS     R5,R5,R0, LSL #+4
    236              ulTmp|= (m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos?1:0)<<5;					//?¨?D1?¨??óD?Tμ???,0:μ???
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   00000072   0x7B80             LDRB     R0,[R0, #+14]
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x0940             LSRS     R0,R0,#+5
   \   00000078   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000007C   0xEA55 0x1540      ORRS     R5,R5,R0, LSL #+5
    237              ulTmp|= 0<<6;																											//ìì??￡?0￡o?μ??ìì??￡?1￡o?úìì??	′ó?¨?ú￡?2?ê1ó??μ??ìì??
    238              ulTmp|= 0<<7;
    239          
    240              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSE2_BIT]) & 0x01)<<8;					//?¨?D???¨?ú?a1?,0:óD?¨
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000084   0x7A80             LDRB     R0,[R0, #+10]
   \   00000086   0x0022             MOVS     R2,R4
   \   00000088   0x40C2             LSRS     R2,R2,R0
   \   0000008A   0x0210             LSLS     R0,R2,#+8
   \   0000008C   0xF410 0x7080      ANDS     R0,R0,#0x100
   \   00000090   0x4305             ORRS     R5,R0,R5
    241              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO2_POSA_BIT]) & 0x01)<<9;				//?±á÷μ??ú1μ????a1?,0:μ???
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000096   0x7A00             LDRB     R0,[R0, #+8]
   \   00000098   0x0022             MOVS     R2,R4
   \   0000009A   0x40C2             LSRS     R2,R2,R0
   \   0000009C   0x0250             LSLS     R0,R2,#+9
   \   0000009E   0xF410 0x7000      ANDS     R0,R0,#0x200
   \   000000A2   0x4305             ORRS     R5,R0,R5
    242              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO2_POSB_BIT]) & 0x01)<<10; 			//?±á÷μ??ú2μ????a1?,0:μ???
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000000A8   0x7A40             LDRB     R0,[R0, #+9]
   \   000000AA   0x0022             MOVS     R2,R4
   \   000000AC   0x40C2             LSRS     R2,R2,R0
   \   000000AE   0x0290             LSLS     R0,R2,#+10
   \   000000B0   0xF410 0x6080      ANDS     R0,R0,#0x400
   \   000000B4   0x4305             ORRS     R5,R0,R5
    243              ulTmp|= ((ulData>>m_ucKeyBit[BOXLOAD2_BIT]) & 0x01)<<11;					//?¨?D1×°???a1?,0:×°??
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000000BA   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000BC   0x0022             MOVS     R2,R4
   \   000000BE   0x40C2             LSRS     R2,R2,R0
   \   000000C0   0x02D0             LSLS     R0,R2,#+11
   \   000000C2   0xF410 0x6000      ANDS     R0,R0,#0x800
   \   000000C6   0x4305             ORRS     R5,R0,R5
    244              ulTmp|=	(m_usrBoxInfo[BOX_SECOND].ucCounts?1:0)<<12;												//?¨?D1?DóD?T?¨,0:óD?¨
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   000000CC   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD001             BEQ.N    ??KeyConvert_3
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xE000             B.N      ??KeyConvert_4
   \                     ??KeyConvert_3: (+1)
   \   000000D8   0x2000             MOVS     R0,#+0
   \                     ??KeyConvert_4: (+1)
   \   000000DA   0xEA55 0x3500      ORRS     R5,R5,R0, LSL #+12
    245              ulTmp|= (m_usrBoxInfo[BOX_SECOND].usrFlag.usrBit.bCardPos?1:0)<<13;				//?¨?D1?¨??óD?Tμ???,0:μ???
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   000000E2   0xF890 0x002E      LDRB     R0,[R0, #+46]
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x0940             LSRS     R0,R0,#+5
   \   000000EA   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000EE   0xEA55 0x3540      ORRS     R5,R5,R0, LSL #+13
    246              ulTmp|= 0<<14;																										//ìì??￡?0￡o?μ??ìì??￡?1￡o?úìì??	′ó?¨?ú￡?2?ê1ó??μ??ìì??
    247              ulTmp|= 0<<15;
    248          
    249              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSE3_BIT]) & 0x01)<<16;				//?¨?D???¨?ú?a1?,0:óD?¨
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000000F6   0x7C80             LDRB     R0,[R0, #+18]
   \   000000F8   0x0022             MOVS     R2,R4
   \   000000FA   0x40C2             LSRS     R2,R2,R0
   \   000000FC   0x0410             LSLS     R0,R2,#+16
   \   000000FE   0xF410 0x3080      ANDS     R0,R0,#0x10000
   \   00000102   0x4305             ORRS     R5,R0,R5
    250              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO3_POSA_BIT]) & 0x01)<<17;				//?±á÷μ??ú1μ????a1?,0:μ???
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000108   0x7C00             LDRB     R0,[R0, #+16]
   \   0000010A   0x0022             MOVS     R2,R4
   \   0000010C   0x40C2             LSRS     R2,R2,R0
   \   0000010E   0x0450             LSLS     R0,R2,#+17
   \   00000110   0xF410 0x3000      ANDS     R0,R0,#0x20000
   \   00000114   0x4305             ORRS     R5,R0,R5
    251              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO3_POSB_BIT]) & 0x01)<<18; 			//?±á÷μ??ú2μ????a1?,0:μ???
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000011A   0x7C40             LDRB     R0,[R0, #+17]
   \   0000011C   0x0022             MOVS     R2,R4
   \   0000011E   0x40C2             LSRS     R2,R2,R0
   \   00000120   0x0490             LSLS     R0,R2,#+18
   \   00000122   0xF410 0x2080      ANDS     R0,R0,#0x40000
   \   00000126   0x4305             ORRS     R5,R0,R5
    252              ulTmp|= ((ulData>>m_ucKeyBit[BOXLOAD1_BIT]) & 0x01)<<19;					//?¨?D1×°???a1?,0:×°??
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000012C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x40C2             LSRS     R2,R2,R0
   \   00000132   0x04D0             LSLS     R0,R2,#+19
   \   00000134   0xF410 0x2000      ANDS     R0,R0,#0x80000
   \   00000138   0x4305             ORRS     R5,R0,R5
    253              ulTmp|=	(m_usrBoxInfo[BOX_THIRD].ucCounts?1:0)<<20;												//?¨?D1?DóD?T?¨,0:óD?¨
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   0000013E   0xF890 0x0040      LDRB     R0,[R0, #+64]
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD001             BEQ.N    ??KeyConvert_5
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0xE000             B.N      ??KeyConvert_6
   \                     ??KeyConvert_5: (+1)
   \   0000014A   0x2000             MOVS     R0,#+0
   \                     ??KeyConvert_6: (+1)
   \   0000014C   0xEA55 0x5500      ORRS     R5,R5,R0, LSL #+20
    254              ulTmp|= (m_usrBoxInfo[BOX_THIRD].usrFlag.usrBit.bCardPos?1:0)<<21;				//?¨?D1?¨??óD?Tμ???,0:μ???
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   00000154   0xF890 0x004E      LDRB     R0,[R0, #+78]
   \   00000158   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015A   0x0940             LSRS     R0,R0,#+5
   \   0000015C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000160   0xEA55 0x5540      ORRS     R5,R5,R0, LSL #+21
    255              ulTmp|= 0<<22;																										//ìì??￡?0￡o?μ??ìì??￡?1￡o?úìì??	′ó?¨?ú￡?2?ê1ó??μ??ìì??
    256              ulTmp|= 0<<23;
    257              
    258              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01)<<24;
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000168   0x7E00             LDRB     R0,[R0, #+24]
   \   0000016A   0x0022             MOVS     R2,R4
   \   0000016C   0x40C2             LSRS     R2,R2,R0
   \   0000016E   0x0610             LSLS     R0,R2,#+24
   \   00000170   0xF010 0x7080      ANDS     R0,R0,#0x1000000
   \   00000174   0x4305             ORRS     R5,R0,R5
    259              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSB_BIT]) & 0x01)<<25;
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000017A   0x7E40             LDRB     R0,[R0, #+25]
   \   0000017C   0x0022             MOVS     R2,R4
   \   0000017E   0x40C2             LSRS     R2,R2,R0
   \   00000180   0x0650             LSLS     R0,R2,#+25
   \   00000182   0xF010 0x7000      ANDS     R0,R0,#0x2000000
   \   00000186   0x4305             ORRS     R5,R0,R5
    260              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSC_BIT]) & 0x01)<<26;
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000018C   0x7E80             LDRB     R0,[R0, #+26]
   \   0000018E   0x0022             MOVS     R2,R4
   \   00000190   0x40C2             LSRS     R2,R2,R0
   \   00000192   0x0690             LSLS     R0,R2,#+26
   \   00000194   0xF010 0x6080      ANDS     R0,R0,#0x4000000
   \   00000198   0x4305             ORRS     R5,R0,R5
    261              ulTmp|= ((ulData>>m_ucKeyBit[CARDBOX1_POS_BIT]) & 0x01)<<27;
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000019E   0x7980             LDRB     R0,[R0, #+6]
   \   000001A0   0x0022             MOVS     R2,R4
   \   000001A2   0x40C2             LSRS     R2,R2,R0
   \   000001A4   0x06D0             LSLS     R0,R2,#+27
   \   000001A6   0xF010 0x6000      ANDS     R0,R0,#0x8000000
   \   000001AA   0x4305             ORRS     R5,R0,R5
    262              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSD_BIT]) & 0x01)<<28;
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000001B0   0x7EC0             LDRB     R0,[R0, #+27]
   \   000001B2   0x0022             MOVS     R2,R4
   \   000001B4   0x40C2             LSRS     R2,R2,R0
   \   000001B6   0x0710             LSLS     R0,R2,#+28
   \   000001B8   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   000001BC   0x4305             ORRS     R5,R0,R5
    263              ulTmp|= ((ulData>>m_ucKeyBit[CARDBOX2_POS_BIT]) & 0x01)<<29;
   \   000001BE   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000001C2   0x7B80             LDRB     R0,[R0, #+14]
   \   000001C4   0x0022             MOVS     R2,R4
   \   000001C6   0x40C2             LSRS     R2,R2,R0
   \   000001C8   0x0750             LSLS     R0,R2,#+29
   \   000001CA   0xF010 0x5000      ANDS     R0,R0,#0x20000000
   \   000001CE   0x4305             ORRS     R5,R0,R5
    264              ulTmp|= ((ulData>>m_ucKeyBit[CARDBOX3_POS_BIT]) & 0x01)<<30;
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   000001D4   0x7D80             LDRB     R0,[R0, #+22]
   \   000001D6   0x0022             MOVS     R2,R4
   \   000001D8   0x40C2             LSRS     R2,R2,R0
   \   000001DA   0x0790             LSLS     R0,R2,#+30
   \   000001DC   0xF010 0x4080      ANDS     R0,R0,#0x40000000
   \   000001E0   0x4305             ORRS     R5,R0,R5
    265              ulTmp|= 0<<31;
   \   000001E2   0xE0AF             B.N      ??KeyConvert_7
    266            }else if(ucType==SMALL_THICK_IN_TYPE || ucType==SMALL_THICK_OUT_TYPE || ucType==SMALL_THICK_GIN_TYPE || ucType==SMALL_THIN_IN_TYPE || ucType==SMALL_THIN_OUT_TYPE || ucType==SMALL_THIN_GIN_TYPE){
   \                     ??KeyConvert_0: (+1)
   \   000001E4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E6   0x2901             CMP      R1,#+1
   \   000001E8   0xD00E             BEQ.N    ??KeyConvert_8
   \   000001EA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001EC   0x2900             CMP      R1,#+0
   \   000001EE   0xD00B             BEQ.N    ??KeyConvert_8
   \   000001F0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001F2   0x2903             CMP      R1,#+3
   \   000001F4   0xD008             BEQ.N    ??KeyConvert_8
   \   000001F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001F8   0x2909             CMP      R1,#+9
   \   000001FA   0xD005             BEQ.N    ??KeyConvert_8
   \   000001FC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001FE   0x2908             CMP      R1,#+8
   \   00000200   0xD002             BEQ.N    ??KeyConvert_8
   \   00000202   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000204   0x290B             CMP      R1,#+11
   \   00000206   0xD15B             BNE.N    ??KeyConvert_9
    267              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSD_BIT]) & 0x01);							//?¨?D???¨?ú?a1?,0:óD?¨
   \                     ??KeyConvert_8: (+1)
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000020C   0x7EC0             LDRB     R0,[R0, #+27]
   \   0000020E   0x0022             MOVS     R2,R4
   \   00000210   0x40C2             LSRS     R2,R2,R0
   \   00000212   0xF012 0x0001      ANDS     R0,R2,#0x1
   \   00000216   0x4305             ORRS     R5,R0,R5
    268              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO1_POSA_BIT]) & 0x01)<<1;				//?±á÷μ??ú1μ????a1?,0:μ???
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000021C   0x7800             LDRB     R0,[R0, #+0]
   \   0000021E   0x0022             MOVS     R2,R4
   \   00000220   0x40C2             LSRS     R2,R2,R0
   \   00000222   0x0050             LSLS     R0,R2,#+1
   \   00000224   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000228   0x4305             ORRS     R5,R0,R5
    269              ulTmp|= ((ulData>>m_ucKeyBit[DMOTO1_POSB_BIT]) & 0x01)<<2;				//?±á÷μ??ú2μ????a1?,0:μ???
   \   0000022A   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000022E   0x7840             LDRB     R0,[R0, #+1]
   \   00000230   0x0022             MOVS     R2,R4
   \   00000232   0x40C2             LSRS     R2,R2,R0
   \   00000234   0x0090             LSLS     R0,R2,#+2
   \   00000236   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   0000023A   0x4305             ORRS     R5,R0,R5
    270              ulTmp|= ((ulData>>m_ucKeyBit[BOXLOAD1_BIT]) & 0x01)<<3;						//?¨?D1×°???a1?,0:×°??
   \   0000023C   0x....             LDR.N    R0,??DataTable5_5
   \   0000023E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000240   0x0022             MOVS     R2,R4
   \   00000242   0x40C2             LSRS     R2,R2,R0
   \   00000244   0x00D0             LSLS     R0,R2,#+3
   \   00000246   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   0000024A   0x4305             ORRS     R5,R0,R5
    271              ulTmp|=  (m_usrBoxInfo[BOX_FIRST].ucCounts?1:0)<<4;												//?¨?D1?DóD?T?¨,0:óD?¨
   \   0000024C   0x....             LDR.N    R0,??DataTable5_6
   \   0000024E   0x7800             LDRB     R0,[R0, #+0]
   \   00000250   0x2800             CMP      R0,#+0
   \   00000252   0xD001             BEQ.N    ??KeyConvert_10
   \   00000254   0x2001             MOVS     R0,#+1
   \   00000256   0xE000             B.N      ??KeyConvert_11
   \                     ??KeyConvert_10: (+1)
   \   00000258   0x2000             MOVS     R0,#+0
   \                     ??KeyConvert_11: (+1)
   \   0000025A   0xEA55 0x1500      ORRS     R5,R5,R0, LSL #+4
    272              ulTmp|= (m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos?1:0)<<5;					//?¨?D1?¨??óD?Tμ???,0:μ???
   \   0000025E   0x....             LDR.N    R0,??DataTable5_6
   \   00000260   0x7B80             LDRB     R0,[R0, #+14]
   \   00000262   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000264   0x0940             LSRS     R0,R0,#+5
   \   00000266   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000026A   0xEA55 0x1540      ORRS     R5,R5,R0, LSL #+5
    273              ulTmp|= 0<<6;																											//ìì??￡?0￡o?μ??ìì??￡?1￡o?úìì??	′ó?¨?ú￡?2?ê1ó??μ??ìì??
    274              ulTmp|= 0<<7;
    275              ulTmp|= 0<<15;
    276              ulTmp|= 0<<23;
    277              ulTmp|= 0<<31;
    278              
    279              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSB_BIT]) & 0x01)<<22;
   \   0000026E   0x....             LDR.N    R0,??DataTable5_5
   \   00000270   0x7E40             LDRB     R0,[R0, #+25]
   \   00000272   0x0022             MOVS     R2,R4
   \   00000274   0x40C2             LSRS     R2,R2,R0
   \   00000276   0x0590             LSLS     R0,R2,#+22
   \   00000278   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   0000027C   0x4305             ORRS     R5,R0,R5
    280              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01)<<24;
   \   0000027E   0x....             LDR.N    R0,??DataTable5_5
   \   00000280   0x7E00             LDRB     R0,[R0, #+24]
   \   00000282   0x0022             MOVS     R2,R4
   \   00000284   0x40C2             LSRS     R2,R2,R0
   \   00000286   0x0610             LSLS     R0,R2,#+24
   \   00000288   0xF010 0x7080      ANDS     R0,R0,#0x1000000
   \   0000028C   0x4305             ORRS     R5,R0,R5
    281              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSC_BIT]) & 0x01)<<25;
   \   0000028E   0x....             LDR.N    R0,??DataTable5_5
   \   00000290   0x7E80             LDRB     R0,[R0, #+26]
   \   00000292   0x0022             MOVS     R2,R4
   \   00000294   0x40C2             LSRS     R2,R2,R0
   \   00000296   0x0650             LSLS     R0,R2,#+25
   \   00000298   0xF010 0x7000      ANDS     R0,R0,#0x2000000
   \   0000029C   0x4305             ORRS     R5,R0,R5
    282              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSD_BIT]) & 0x01)<<26;
   \   0000029E   0x....             LDR.N    R0,??DataTable5_5
   \   000002A0   0x7EC0             LDRB     R0,[R0, #+27]
   \   000002A2   0x0022             MOVS     R2,R4
   \   000002A4   0x40C2             LSRS     R2,R2,R0
   \   000002A6   0x0690             LSLS     R0,R2,#+26
   \   000002A8   0xF010 0x6080      ANDS     R0,R0,#0x4000000
   \   000002AC   0x4305             ORRS     R5,R0,R5
    283              ulTmp|= ((ulData>>m_ucKeyBit[CARDBOX1_POS_BIT]) & 0x01)<<27;
   \   000002AE   0x....             LDR.N    R0,??DataTable5_5
   \   000002B0   0x7980             LDRB     R0,[R0, #+6]
   \   000002B2   0x0022             MOVS     R2,R4
   \   000002B4   0x40C2             LSRS     R2,R2,R0
   \   000002B6   0x06D0             LSLS     R0,R2,#+27
   \   000002B8   0xF010 0x6000      ANDS     R0,R0,#0x8000000
   \   000002BC   0x4305             ORRS     R5,R0,R5
   \   000002BE   0xE041             B.N      ??KeyConvert_7
    284            }else if(ucType==SMALL_THICK_ZIN_TYPE || ucType==SMALL_THIN_ZIN_TYPE){
   \                     ??KeyConvert_9: (+1)
   \   000002C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002C2   0x2902             CMP      R1,#+2
   \   000002C4   0xD002             BEQ.N    ??KeyConvert_12
   \   000002C6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002C8   0x290A             CMP      R1,#+10
   \   000002CA   0xD13B             BNE.N    ??KeyConvert_7
    285              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSE_BIT]) & 0x01);					//?¨?D???¨?ú?a1?,0:óD?¨
   \                     ??KeyConvert_12: (+1)
   \   000002CC   0x....             LDR.N    R0,??DataTable5_5
   \   000002CE   0x7F00             LDRB     R0,[R0, #+28]
   \   000002D0   0x0022             MOVS     R2,R4
   \   000002D2   0x40C2             LSRS     R2,R2,R0
   \   000002D4   0xF012 0x0001      ANDS     R0,R2,#0x1
   \   000002D8   0x4305             ORRS     R5,R0,R5
    286              ulTmp|= 1<<1;				                                                //?±á÷μ??ú1μ????a1?,0:μ???
   \   000002DA   0xF055 0x0502      ORRS     R5,R5,#0x2
    287              ulTmp|= 0<<2;				                                                //?±á÷μ??ú2μ????a1?,0:μ???
    288              ulTmp|= ((ulData>>m_ucKeyBit[BOXLOAD1_BIT]) & 0x01)<<3;					//?¨?D1×°???a1?,0:×°??
   \   000002DE   0x....             LDR.N    R0,??DataTable5_5
   \   000002E0   0x78C0             LDRB     R0,[R0, #+3]
   \   000002E2   0x0022             MOVS     R2,R4
   \   000002E4   0x40C2             LSRS     R2,R2,R0
   \   000002E6   0x00D0             LSLS     R0,R2,#+3
   \   000002E8   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   000002EC   0x4305             ORRS     R5,R0,R5
    289              ulTmp|=  (m_usrBoxInfo[BOX_FIRST].ucCounts?1:0)<<4;						//?¨?D1?DóD?T?¨,0:óD?¨
   \   000002EE   0x....             LDR.N    R0,??DataTable5_6
   \   000002F0   0x7800             LDRB     R0,[R0, #+0]
   \   000002F2   0x2800             CMP      R0,#+0
   \   000002F4   0xD001             BEQ.N    ??KeyConvert_13
   \   000002F6   0x2001             MOVS     R0,#+1
   \   000002F8   0xE000             B.N      ??KeyConvert_14
   \                     ??KeyConvert_13: (+1)
   \   000002FA   0x2000             MOVS     R0,#+0
   \                     ??KeyConvert_14: (+1)
   \   000002FC   0xEA55 0x1500      ORRS     R5,R5,R0, LSL #+4
    290              ulTmp|= 1<<5;					                                        //?¨?D1?¨??óD?Tμ???,0:μ???
   \   00000300   0xF055 0x0520      ORRS     R5,R5,#0x20
    291              ulTmp|= 0<<6;																											//ìì??￡?0￡o?μ??ìì??￡?1￡o?úìì??	′ó?¨?ú￡?2?ê1ó??μ??ìì??
    292              ulTmp|= 0<<7;
    293              ulTmp|= 0<<15;
    294              ulTmp|= 0<<23;
    295              ulTmp|= 0<<31;
    296              
    297              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01)<<24;
   \   00000304   0x....             LDR.N    R0,??DataTable5_5
   \   00000306   0x7E00             LDRB     R0,[R0, #+24]
   \   00000308   0x0022             MOVS     R2,R4
   \   0000030A   0x40C2             LSRS     R2,R2,R0
   \   0000030C   0x0610             LSLS     R0,R2,#+24
   \   0000030E   0xF010 0x7080      ANDS     R0,R0,#0x1000000
   \   00000312   0x4305             ORRS     R5,R0,R5
    298              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSB_BIT]) & 0x01)<<25;
   \   00000314   0x....             LDR.N    R0,??DataTable5_5
   \   00000316   0x7E40             LDRB     R0,[R0, #+25]
   \   00000318   0x0022             MOVS     R2,R4
   \   0000031A   0x40C2             LSRS     R2,R2,R0
   \   0000031C   0x0650             LSLS     R0,R2,#+25
   \   0000031E   0xF010 0x7000      ANDS     R0,R0,#0x2000000
   \   00000322   0x4305             ORRS     R5,R0,R5
    299              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSC_BIT]) & 0x01)<<26;
   \   00000324   0x....             LDR.N    R0,??DataTable5_5
   \   00000326   0x7E80             LDRB     R0,[R0, #+26]
   \   00000328   0x0022             MOVS     R2,R4
   \   0000032A   0x40C2             LSRS     R2,R2,R0
   \   0000032C   0x0690             LSLS     R0,R2,#+26
   \   0000032E   0xF010 0x6080      ANDS     R0,R0,#0x4000000
   \   00000332   0x4305             ORRS     R5,R0,R5
    300              ulTmp|= ((ulData>>m_ucKeyBit[CARD_POSD_BIT]) & 0x01)<<27;
   \   00000334   0x....             LDR.N    R0,??DataTable5_5
   \   00000336   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000338   0x0022             MOVS     R2,R4
   \   0000033A   0x40C2             LSRS     R2,R2,R0
   \   0000033C   0x06D0             LSLS     R0,R2,#+27
   \   0000033E   0xF010 0x6000      ANDS     R0,R0,#0x8000000
   \   00000342   0x4305             ORRS     R5,R0,R5
    301            }
    302            //ulTmp1=((ulTmp>>24) & 0xFF) | ((ulTmp>>8) & 0xFF00) | ((ulTmp<<8) & 0xFF0000) | ((ulTmp<<24) & 0xFF000000);
    303            
    304            return ~ulTmp;
   \                     ??KeyConvert_7: (+1)
   \   00000344   0x43E8             MVNS     R0,R5
   \   00000346   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    305          }
    306          
    307          
    308          /********************************************************************************************************
    309          ** 函数名称: KeyProcess
    310          ** 功能描述:
    311          ** 输 　 入:
    312          **
    313          ** 输　  出:
    314          **
    315          ** 全局变量:
    316          ** 调用模块:
    317          **
    318          ** 作　  者: John Tonny
    319          ** 日　  期: 2005年05月01日
    320          **------------------------------------------------------------------------------------------------------
    321          ** 修 改 人:
    322          ** 日　  期:
    323          **------------------------------------------------------------------------------------------------------
    324          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    325          void Key_Process(void)
    326          {
   \                     Key_Process: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
    327            OS_ERR os_err;
    328            
    329            INT32U ulTmp;
    330            static INT32U ulKeyOutputOld;
    331            INT32U ulKeyOutputNew;
    332            INT8U i;
    333            INT8U ucCardPosABit;
    334            INT8U ucCardPosBBit;
    335            INT8U ucBoxLoadBit;
    336            
    337            INT8U ucCmd;
    338            
    339           
    340            INT8U ucType;
    341            g_usrGetKey.ulKeyInput=GetKey();
   \   00000006   0x.... 0x....      BL       GetKey
   \   0000000A   0x....             LDR.N    R1,??DataTable5_1
   \   0000000C   0x6108             STR      R0,[R1, #+16]
    342            KeyDeBounce();	
   \   0000000E   0x.... 0x....      BL       KeyDeBounce
    343            ulKeyOutputOld=g_usrGetKey.ulKeyOutput;
   \   00000012   0x....             LDR.N    R0,??DataTable5_1
   \   00000014   0x6940             LDR      R0,[R0, #+20]
   \   00000016   0x....             LDR.N    R1,??DataTable5_7
   \   00000018   0x6008             STR      R0,[R1, #+0]
    344          
    345            while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
    346              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??Key_Process_0: (+1)
   \   0000001A   0xF10D 0x020A      ADD      R2,SP,#+10
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       OSTimeDly
    347              g_usrGetKey.ulKeyInput=GetKey();
   \   00000026   0x.... 0x....      BL       GetKey
   \   0000002A   0x....             LDR.N    R1,??DataTable5_1
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    348              KeyDeBounce();	
   \   0000002E   0x.... 0x....      BL       KeyDeBounce
    349                
    350              ulKeyOutputNew=g_usrGetKey.ulKeyOutput;
   \   00000032   0x....             LDR.N    R0,??DataTable5_1
   \   00000034   0x6940             LDR      R0,[R0, #+20]
   \   00000036   0x9003             STR      R0,[SP, #+12]
    351              if(ulKeyOutputOld!=ulKeyOutputNew){
   \   00000038   0x....             LDR.N    R0,??DataTable5_7
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x9903             LDR      R1,[SP, #+12]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD0EB             BEQ.N    ??Key_Process_0
    352                if(!m_usrGlobalFlag.usrBit.bKeyTest){
   \   00000042   0x....             LDR.N    R0,??DataTable5_8
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD10E             BNE.N    ??Key_Process_1
    353                  ulTmp=KeyConvert(ulKeyOutputNew);
   \   00000050   0x9803             LDR      R0,[SP, #+12]
   \   00000052   0x.... 0x....      BL       KeyConvert
   \   00000056   0x9004             STR      R0,[SP, #+16]
    354                  Uart0Pack(INFTYPE_DEVICE_STATUS,0,0,(INT8U *)&ulTmp,4,1);
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0xAB04             ADD      R3,SP,#+16
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x2067             MOVS     R0,#+103
   \   00000068   0x.... 0x....      BL       Uart0Pack
   \   0000006C   0xE00D             B.N      ??Key_Process_2
    355                }else{
    356                  ulKeyOutputNew|=0x80808080;
   \                     ??Key_Process_1: (+1)
   \   0000006E   0x9803             LDR      R0,[SP, #+12]
   \   00000070   0xF070 0x307F      ORNS     R0,R0,#+2139062143
   \   00000074   0x9003             STR      R0,[SP, #+12]
    357                  Uart0Pack(INFTYPE_KEY_TEST_STATUS,0,0,(INT8U *)&ulKeyOutputNew,4,1);
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x2004             MOVS     R0,#+4
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0xAB03             ADD      R3,SP,#+12
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x206A             MOVS     R0,#+106
   \   00000086   0x.... 0x....      BL       Uart0Pack
    358                }
    359                
    360                ucType=DEV_TYPE();
   \                     ??Key_Process_2: (+1)
   \   0000008A   0x.... 0x....      BL       DEV_TYPE
   \   0000008E   0x4680             MOV      R8,R0
    361                if(CARD_AUTO_MODE()){
   \   00000090   0x.... 0x....      BL       CARD_AUTO_MODE
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD021             BEQ.N    ??Key_Process_3
    362                  if(ucType==SMALL_THICK_GIN_TYPE){
   \   00000098   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009C   0xF1B8 0x0F03      CMP      R8,#+3
   \   000000A0   0xD11C             BNE.N    ??Key_Process_3
    363                    if(CheckBit(ulKeyOutputNew,m_ucKeyBit[GIN_KEY_BIT])){
   \   000000A2   0x9803             LDR      R0,[SP, #+12]
   \   000000A4   0x....             LDR.N    R1,??DataTable5_5
   \   000000A6   0x7D49             LDRB     R1,[R1, #+21]
   \   000000A8   0x40C8             LSRS     R0,R0,R1
   \   000000AA   0x07C0             LSLS     R0,R0,#+31
   \   000000AC   0xD516             BPL.N    ??Key_Process_3
    364                      g_ucGInState=GIN_CARDTOANT_STATE;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x....             LDR.N    R1,??DataTable5_9
   \   000000B2   0x7008             STRB     R0,[R1, #+0]
    365                      if(m_usrGlobalFlag.usrBit.bGCardToBox){
   \   000000B4   0x....             LDR.N    R0,??DataTable5_8
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   000000BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD006             BEQ.N    ??Key_Process_4
    366                        m_usrGlobalFlag.usrBit.bGCardToBox=0;
   \   000000C2   0x....             LDR.N    R0,??DataTable5_8
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   000000CA   0x....             LDR.N    R1,??DataTable5_8
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   \   000000CE   0xE005             B.N      ??Key_Process_3
    367                      }else{
    368                        m_usrGlobalFlag.usrBit.bGCardToBox=1;
   \                     ??Key_Process_4: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable5_8
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000D8   0x....             LDR.N    R1,??DataTable5_8
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
    369                      }
    370                    }
    371                  }
    372                }
    373              
    374                if(ucType==LARGE_THICK_OUT_TYPE || ucType==SMALL_THICK_OUT_TYPE || ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Key_Process_3: (+1)
   \   000000DC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000E0   0xF1B8 0x0F04      CMP      R8,#+4
   \   000000E4   0xD009             BEQ.N    ??Key_Process_5
   \   000000E6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000EE   0xD004             BEQ.N    ??Key_Process_5
   \   000000F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000F4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000000F8   0xD12A             BNE.N    ??Key_Process_6
    375                  ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \                     ??Key_Process_5: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable5_5
   \   000000FC   0x7E00             LDRB     R0,[R0, #+24]
   \   000000FE   0x0005             MOVS     R5,R0
    376                  if((CheckBit(ulKeyOutputOld,ucCardPosABit)!=CheckBit(ulKeyOutputNew,ucCardPosABit))  && m_usrGlobalFlag.usrBit.bWaitTakeOut){
   \   00000100   0x....             LDR.N    R0,??DataTable5_7
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x40A9             LSLS     R1,R1,R5
   \   00000108   0x4008             ANDS     R0,R1,R0
   \   0000010A   0x9903             LDR      R1,[SP, #+12]
   \   0000010C   0x2201             MOVS     R2,#+1
   \   0000010E   0x40AA             LSLS     R2,R2,R5
   \   00000110   0x4011             ANDS     R1,R2,R1
   \   00000112   0x4288             CMP      R0,R1
   \   00000114   0xD01C             BEQ.N    ??Key_Process_6
   \   00000116   0x....             LDR.N    R0,??DataTable5_8
   \   00000118   0x7800             LDRB     R0,[R0, #+0]
   \   0000011A   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD015             BEQ.N    ??Key_Process_6
    377                    ulTmp=GetKey();
   \   00000124   0x.... 0x....      BL       GetKey
   \   00000128   0x9004             STR      R0,[SP, #+16]
    378                    if(!CheckBit(ulTmp,ucCardPosABit)){
   \   0000012A   0x9804             LDR      R0,[SP, #+16]
   \   0000012C   0x40E8             LSRS     R0,R0,R5
   \   0000012E   0x07C0             LSLS     R0,R0,#+31
   \   00000130   0xD40E             BMI.N    ??Key_Process_6
    379                      //取走卡片
    380                      m_usrGlobalFlag.usrBit.bCardTakeout=1;
   \   00000132   0x....             LDR.N    R0,??DataTable5_8
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000013A   0x....             LDR.N    R1,??DataTable5_8
   \   0000013C   0x7008             STRB     R0,[R1, #+0]
    381                      m_usrGlobalFlag.usrBit.bWaitTakeOut=0;
   \   0000013E   0x....             LDR.N    R0,??DataTable5_8
   \   00000140   0x7800             LDRB     R0,[R0, #+0]
   \   00000142   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000146   0x....             LDR.N    R1,??DataTable5_8
   \   00000148   0x7008             STRB     R0,[R1, #+0]
    382                      g_ucLedMode=LEDOUT_ON_MODE;
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x....             LDR.N    R1,??DataTable5_10
   \   0000014E   0x7008             STRB     R0,[R1, #+0]
    383                    }
    384                  }
    385                }
    386              
    387                if((ucType==SMALL_THICK_IN_TYPE || ucType==SMALL_THICK_ZIN_TYPE)){
   \                     ??Key_Process_6: (+1)
   \   00000150   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000154   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000158   0xD004             BEQ.N    ??Key_Process_7
   \   0000015A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015E   0xF1B8 0x0F02      CMP      R8,#+2
   \   00000162   0xD133             BNE.N    ??Key_Process_8
    388                  ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \                     ??Key_Process_7: (+1)
   \   00000164   0x....             LDR.N    R0,??DataTable5_5
   \   00000166   0x7E00             LDRB     R0,[R0, #+24]
   \   00000168   0x0005             MOVS     R5,R0
    389                  ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   0000016A   0x....             LDR.N    R0,??DataTable5_5
   \   0000016C   0x7E40             LDRB     R0,[R0, #+25]
   \   0000016E   0x0006             MOVS     R6,R0
    390                  if((CheckBit(ulKeyOutputOld,ucCardPosABit)!=CheckBit(ulKeyOutputNew,ucCardPosABit))){
   \   00000170   0x....             LDR.N    R0,??DataTable5_7
   \   00000172   0x6800             LDR      R0,[R0, #+0]
   \   00000174   0x2101             MOVS     R1,#+1
   \   00000176   0x40A9             LSLS     R1,R1,R5
   \   00000178   0x4008             ANDS     R0,R1,R0
   \   0000017A   0x9903             LDR      R1,[SP, #+12]
   \   0000017C   0x2201             MOVS     R2,#+1
   \   0000017E   0x40AA             LSLS     R2,R2,R5
   \   00000180   0x4011             ANDS     R1,R2,R1
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD022             BEQ.N    ??Key_Process_8
    391                    ulTmp=GetKey();
   \   00000186   0x.... 0x....      BL       GetKey
   \   0000018A   0x9004             STR      R0,[SP, #+16]
    392                    if(CheckBit(ulTmp,ucCardPosABit) && !CheckBit(ulTmp,ucCardPosBBit)){
   \   0000018C   0x9804             LDR      R0,[SP, #+16]
   \   0000018E   0x40E8             LSRS     R0,R0,R5
   \   00000190   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000194   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000196   0x2800             CMP      R0,#+0
   \   00000198   0xD018             BEQ.N    ??Key_Process_8
   \   0000019A   0x9804             LDR      R0,[SP, #+16]
   \   0000019C   0x40F0             LSRS     R0,R0,R6
   \   0000019E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD111             BNE.N    ??Key_Process_8
    393                      //插入卡片
    394                      m_usrGlobalFlag.usrBit.bCardPlugIn=1;
   \   000001A8   0x....             LDR.N    R0,??DataTable5_8
   \   000001AA   0x7800             LDRB     R0,[R0, #+0]
   \   000001AC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001B0   0x....             LDR.N    R1,??DataTable5_8
   \   000001B2   0x7008             STRB     R0,[R1, #+0]
    395                      if(!CARD_AUTO_MODE()){
   \   000001B4   0x.... 0x....      BL       CARD_AUTO_MODE
   \   000001B8   0x2800             CMP      R0,#+0
   \   000001BA   0xD107             BNE.N    ??Key_Process_8
    396                        ucCmd=MOTO_IN_TO_ANT_MSG;
   \   000001BC   0x2020             MOVS     R0,#+32
   \   000001BE   0xF88D 0x0008      STRB     R0,[SP, #+8]
    397                        Box_TaskQPost(&App_TaskActionTCB,&ucCmd,1);  
   \   000001C2   0x2201             MOVS     R2,#+1
   \   000001C4   0xA902             ADD      R1,SP,#+8
   \   000001C6   0x....             LDR.N    R0,??DataTable5_11
   \   000001C8   0x.... 0x....      BL       Box_TaskQPost
    398                      }
    399                    }
    400                  }
    401                }
    402                
    403                ulKeyOutputOld=ulKeyOutputNew;
   \                     ??Key_Process_8: (+1)
   \   000001CC   0x9803             LDR      R0,[SP, #+12]
   \   000001CE   0x....             LDR.N    R1,??DataTable5_7
   \   000001D0   0x6008             STR      R0,[R1, #+0]
    404                for(i=0;i<CARDMACHINE_CARDBOX_NUMS;i++){
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x0004             MOVS     R4,R0
   \                     ??Key_Process_9: (+1)
   \   000001D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D8   0x2C03             CMP      R4,#+3
   \   000001DA   0xF6BF 0xAF1E      BGE.W    ??Key_Process_0
    405                  ucBoxLoadBit=m_ucKeyBit[BOXLOAD1_BIT+i*8];
   \   000001DE   0x....             LDR.N    R0,??DataTable5_5
   \   000001E0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E2   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   000001E6   0x78C0             LDRB     R0,[R0, #+3]
   \   000001E8   0x0007             MOVS     R7,R0
    406                  if(CheckBit(ulKeyOutputNew,ucBoxLoadBit)){
   \   000001EA   0x9803             LDR      R0,[SP, #+12]
   \   000001EC   0x40F8             LSRS     R0,R0,R7
   \   000001EE   0x07C0             LSLS     R0,R0,#+31
   \   000001F0   0xD50A             BPL.N    ??Key_Process_10
    407                    if(BOXLOAD_VALID(i)){
   \   000001F2   0x0020             MOVS     R0,R4
   \   000001F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F6   0x.... 0x....      BL       BOXLOAD_VALID
   \   000001FA   0x2800             CMP      R0,#+0
   \   000001FC   0xD00E             BEQ.N    ??Key_Process_11
    408                      BoxLoadEvent(i);
   \   000001FE   0x0020             MOVS     R0,R4
   \   00000200   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000202   0x.... 0x....      BL       BoxLoadEvent
   \   00000206   0xE009             B.N      ??Key_Process_11
    409                    }
    410                  }else{
    411                    if(!BOXLOAD_VALID(i)){
   \                     ??Key_Process_10: (+1)
   \   00000208   0x0020             MOVS     R0,R4
   \   0000020A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020C   0x.... 0x....      BL       BOXLOAD_VALID
   \   00000210   0x2800             CMP      R0,#+0
   \   00000212   0xD103             BNE.N    ??Key_Process_11
    412                      BoxUnloadEvent(i);
   \   00000214   0x0020             MOVS     R0,R4
   \   00000216   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000218   0x.... 0x....      BL       BoxUnloadEvent
    413                    }
    414                  }
    415                }
   \                     ??Key_Process_11: (+1)
   \   0000021C   0x1C64             ADDS     R4,R4,#+1
   \   0000021E   0xE7DA             B.N      ??Key_Process_9
    416          
    417                /*for(i=0;i<CARDMACHINE_CARDBOX_NUMS;i++){
    418                  if(m_usrBoxInfo[i].usrFlag.usrBit.bSelftest){
    419                    if(DEV_TYPE()==SMALL_IN_TYPE || DEV_TYPE()==SMALL_GIN_TYPE){
    420                      if(!CheckBit(m_ulKeyOutput,m_ucKeyBit[CARDBOX1_POS_BIT])){
    421                        OS_ENTER_CRITICAL();
    422                        if(g_usrInterruptFlags[i].usrBit.bCardBoxPosLow){
    423                          g_usrInterruptFlags[i].usrBit.bCardBoxPosLow=0;
    424                          m_usrBoxInfo[i].usrFlag.usrBit.bSelftest=0;													//?è?úμ20,è?oó?′?úμ21,×??ì1y3ìíê3é
    425                        }
    426                        OS_EXIT_CRITICAL();
    427                      }
    428                    }else{
    429                      //・￠?¨
    430                            
    431                    }
    432                  }
    433                }*/
    434                
    435                /*pucData= (CPU_INT08U *)Mem_PoolBlkGet((MEM_POOL *)&m_UartBufPool,
    436                                                 (CPU_SIZE_T) 1,
    437                                                 (LIB_ERR  *)&lib_err);
    438                if(!pucData){
    439                  return;
    440                }
    441                
    442                OSTaskQPost(&App_TaskBox, pucData, 1, OS_OPT_POST_FIFO, &os_err);
    443                */
    444                
    445              }
    446            }
    447            
    448          }

   \                                 In section .bss, align 4
   \                     `Key_Process::ulKeyOutputOld`:
   \   00000000                      DS8 4
    449          
    450          /********************************************************************************************************
    451          ** 函数名称: KeyChange
    452          ** 功能描述:
    453          ** 输 　 入:
    454          **
    455          ** 输　  出:
    456          **
    457          ** 全局变量:
    458          ** 调用模块:
    459          **
    460          ** 作　  者: John Tonny
    461          ** 日　  期: 2005年05月01日
    462          **------------------------------------------------------------------------------------------------------
    463          ** 修 改 人:
    464          ** 日　  期:
    465          **------------------------------------------------------------------------------------------------------
    466          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    467          void KeyChange(void)
    468          {
   \                     KeyChange: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    469            INT32U ulTmp;
    470            
    471            ulTmp=KeyConvert(GetKeyOutput());
   \   00000002   0x.... 0x....      BL       GetKeyOutput
   \   00000006   0x.... 0x....      BL       KeyConvert
   \   0000000A   0x9002             STR      R0,[SP, #+8]
    472            Uart0Pack(INFTYPE_DEVICE_STATUS,0,0,(INT8U *)&ulTmp,4,1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0xAB02             ADD      R3,SP,#+8
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2067             MOVS     R0,#+103
   \   0000001C   0x.... 0x....      BL       Uart0Pack
    473          }
   \   00000020   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     g_usrGetKey1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     g_usrGetKey

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x2009C014         DC32     0x2009c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x2009C034         DC32     0x2009c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x2009C054         DC32     0x2009c054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `Key_Process::ulKeyOutputOld`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     m_usrGlobalFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     g_ucGInState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     g_ucLedMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     App_TaskActionTCB
    474          
    475          
    476          
    477          
    478          /*******************************************************************************************************
    479          **                            End Of File
    480          *******************************************************************************************************/
    481          
    482          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   GetKey
        16   -> DEV_TYPE
      16   GetKeyOutput
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   KeyChange
        16   -> GetKeyOutput
        16   -> KeyConvert
        16   -> Uart0Pack
      16   KeyConvert
        16   -> DEV_TYPE
       0   KeyDeBounce
       0   KeyDeBounce1
      48   Key_Process
        48   -> BOXLOAD_VALID
        48   -> BoxLoadEvent
        48   -> BoxUnloadEvent
        48   -> Box_TaskQPost
        48   -> CARD_AUTO_MODE
        48   -> DEV_TYPE
        48   -> GetKey
        48   -> KeyConvert
        48   -> KeyDeBounce
        48   -> OSTimeDly
        48   -> Uart0Pack


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     272  GetKey
      36  GetKeyOutput
      34  KeyChange
     840  KeyConvert
      82  KeyDeBounce
      82  KeyDeBounce1
     544  Key_Process
       4  ulKeyOutputOld

 
     4 bytes in section .bss
 1 938 bytes in section .text
 
 1 938 bytes of CODE memory
     4 bytes of DATA memory

Errors: none
Warnings: 1
