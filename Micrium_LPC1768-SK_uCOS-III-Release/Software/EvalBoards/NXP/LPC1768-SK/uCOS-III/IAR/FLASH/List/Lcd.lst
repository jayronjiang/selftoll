###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:05
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Lcd.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Lcd.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\Lcd.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\Lcd.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Lcd.c
      1          /****************************************Copyright (c)****************************************************
      2          ** 
      3          **                                      
      4          **
      5          **                                   
      6          **
      7          **--------------File Info---------------------------------------------------------------------------------
      8          ** File name:			uart.c
      9          ** modified Date:  		2011-4-15
     10          ** Last Version:		V1.00
     11          ** Descriptions:		
     12          **	                    
     13          *********************************************************************************************************/
     14          
     15          #define LCD_GLOBALS
     16          #include "includes.h"
     17          
     18          /********************************************************************************************************
     19          ** 函数名称: LcdWriteByte
     20          ** 功能描述:
     21          ** 输 　 入:
     22          **
     23          ** 输　  出:
     24          **
     25          ** 全局变量:
     26          ** 调用模块:
     27          **
     28          ** 作　  者: John Tonny
     29          ** 日　  期: 2005年05月01日
     30          **------------------------------------------------------------------------------------------------------
     31          ** 修 改 人:
     32          ** 日　  期:
     33          **------------------------------------------------------------------------------------------------------
     34          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     35          void LcdWriteByte(int8u wByte, int8u bByteType)	//bByteType: 1-Data, 0-Cmd
     36          {
   \                     LcdWriteByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     37            LIB_ERR lib_err;
     38            SERIAL_ERR err;
     39            OS_ERR os_err;
     40            CPU_INT08U *pucTx;
     41          
     42            pucTx= (CPU_INT08U *)Mem_PoolBlkGet((MEM_POOL *)&m_UartBufPool,
     43                                             (CPU_SIZE_T)2,
     44                                             (LIB_ERR  *)&lib_err);
   \   00000008   0xAA01             ADD      R2,SP,#+4
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000010   0x.... 0x....      BL       Mem_PoolBlkGet
   \   00000014   0x0006             MOVS     R6,R0
     45            if(!pucTx){
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD017             BEQ.N    ??LcdWriteByte_0
     46              return;
     47            }
     48            pucTx[0]=wByte;
   \                     ??LcdWriteByte_1: (+1)
   \   0000001A   0x7034             STRB     R4,[R6, #+0]
     49            pucTx[1]=bByteType;
   \   0000001C   0x7075             STRB     R5,[R6, #+1]
     50                                                
     51            Serial_Wr((SERIAL_IF_NBR   )Uart_SerTraceIF_Nbr[1],
     52                      (void           *)pucTx,
     53                      (CPU_SIZE_T      )2,
     54                      (CPU_INT32U      )10,
     55                      (SERIAL_ERR     *)&err);     
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x230A             MOVS     R3,#+10
   \   00000024   0x2202             MOVS     R2,#+2
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x.... 0x....      BL       Serial_Wr
     56            
     57            Mem_PoolBlkFree(&m_UartBufPool, pucTx, &lib_err);
   \   00000032   0xAA01             ADD      R2,SP,#+4
   \   00000034   0x0031             MOVS     R1,R6
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000003A   0x.... 0x....      BL       Mem_PoolBlkFree
     58            if (lib_err != LIB_MEM_ERR_NONE)  {
     59              //error
     60            }
     61            OSTimeDly(3,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000003E   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x.... 0x....      BL       OSTimeDly
     62          }
   \                     ??LcdWriteByte_0: (+1)
   \   0000004A   0xBD7F             POP      {R0-R6,PC}       ;; return
     63          
     64          /********************************************************************************************************
     65          ** 函数名称: SetLcd_ErrLed
     66          ** 功能描述:
     67          ** 输 　 入:
     68          **
     69          ** 输　  出:
     70          **
     71          ** 全局变量:
     72          ** 调用模块:
     73          **
     74          ** 作　  者: John Tonny
     75          ** 日　  期: 2005年05月01日
     76          **------------------------------------------------------------------------------------------------------
     77          ** 修 改 人:
     78          ** 日　  期:
     79          **------------------------------------------------------------------------------------------------------
     80          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     81          void SetLcd_ErrLed(int8u b)
     82          {
   \                     SetLcd_ErrLed: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     83            LIB_ERR lib_err;
     84            SERIAL_ERR err;
     85            OS_ERR os_err;
     86            CPU_INT08U *pucTx;
     87          
     88            pucTx= (CPU_INT08U *)Mem_PoolBlkGet((MEM_POOL *)&m_UartBufPool,
     89                                             (CPU_SIZE_T)2,
     90                                             (LIB_ERR  *)&lib_err);
   \   00000004   0xAA01             ADD      R2,SP,#+4
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000000C   0x.... 0x....      BL       Mem_PoolBlkGet
   \   00000010   0x0005             MOVS     R5,R0
     91            if(!pucTx){
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD01F             BEQ.N    ??SetLcd_ErrLed_0
     92              return;
     93            }
     94            
     95            pucTx[0]=0xFF;
   \                     ??SetLcd_ErrLed_1: (+1)
   \   00000016   0x20FF             MOVS     R0,#+255
   \   00000018   0x7028             STRB     R0,[R5, #+0]
     96            if(b==1){
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD102             BNE.N    ??SetLcd_ErrLed_2
     97              pucTx[1]=0x81;
   \   00000020   0x2081             MOVS     R0,#+129
   \   00000022   0x7068             STRB     R0,[R5, #+1]
   \   00000024   0xE001             B.N      ??SetLcd_ErrLed_3
     98            }else{
     99              pucTx[1]=0x81;
   \                     ??SetLcd_ErrLed_2: (+1)
   \   00000026   0x2081             MOVS     R0,#+129
   \   00000028   0x7068             STRB     R0,[R5, #+1]
    100            }
    101            
    102            Serial_Wr((SERIAL_IF_NBR   )Uart_SerTraceIF_Nbr[1],
    103                      (void           *)pucTx,
    104                      (CPU_SIZE_T      )2,
    105                      (CPU_INT32U      )10,
    106                      (SERIAL_ERR     *)&err);     
   \                     ??SetLcd_ErrLed_3: (+1)
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x230A             MOVS     R3,#+10
   \   00000030   0x2202             MOVS     R2,#+2
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000038   0x7840             LDRB     R0,[R0, #+1]
   \   0000003A   0x.... 0x....      BL       Serial_Wr
    107            
    108            Mem_PoolBlkFree(&m_UartBufPool, pucTx, &lib_err);
   \   0000003E   0xAA01             ADD      R2,SP,#+4
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000046   0x.... 0x....      BL       Mem_PoolBlkFree
    109            if (lib_err != LIB_MEM_ERR_NONE)  {
    110              //error
    111            }
    112            OSTimeDly(3,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000004A   0xF10D 0x0206      ADD      R2,SP,#+6
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x2003             MOVS     R0,#+3
   \   00000052   0x.... 0x....      BL       OSTimeDly
    113          }
   \                     ??SetLcd_ErrLed_0: (+1)
   \   00000056   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    114          
    115          /********************************************************************************************************
    116          ** 函数名称: LcdClear
    117          ** 功能描述:
    118          ** 输 　 入:
    119          **
    120          ** 输　  出:
    121          **
    122          ** 全局变量:
    123          ** 调用模块:
    124          **
    125          ** 作　  者: John Tonny
    126          ** 日　  期: 2005年05月01日
    127          **------------------------------------------------------------------------------------------------------
    128          ** 修 改 人:
    129          ** 日　  期:
    130          **------------------------------------------------------------------------------------------------------
    131          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    132          void LcdClear(void)
    133          {
   \                     LcdClear: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    134            LcdWriteByte(0x01,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       LcdWriteByte
    135            LcdWriteByte(0x02,0);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       LcdWriteByte
    136          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    137          
    138          /********************************************************************************************************
    139          ** 函数名称: LcdLocateCursor
    140          ** 功能描述:
    141          ** 输 　 入:
    142          **
    143          ** 输　  出:
    144          **
    145          ** 全局变量:
    146          ** 调用模块:
    147          **
    148          ** 作　  者: John Tonny
    149          ** 日　  期: 2005年05月01日
    150          **------------------------------------------------------------------------------------------------------
    151          ** 修 改 人:
    152          ** 日　  期:
    153          **------------------------------------------------------------------------------------------------------
    154          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    155          void LcdLocateCursor(uint8_t Row, uint8_t RowPos)
    156          {
   \                     LcdLocateCursor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    157            uint8_t CursorAddr=0x80;	//第一行地址0x80-0x8F, 第二行地址0x90-0x9F, ....
   \   00000006   0x2680             MOVS     R6,#+128
    158            //if(Row>1) return;
    159            //if(RowPos>7) return;
    160            CursorAddr+=RowPos;
   \   00000008   0x19AE             ADDS     R6,R5,R6
    161            CursorAddr=CursorAddr+(Row<<4);
   \   0000000A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xEB16 0x1604      ADDS     R6,R6,R4, LSL #+4
    162            LcdWriteByte(CursorAddr, 0);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LcdWriteByte
    163          }
   \   0000001C   0xBD70             POP      {R4-R6,PC}       ;; return
    164          
    165          /********************************************************************************************************
    166          ** 函数名称: LcdShowChar
    167          ** 功能描述:
    168          ** 输 　 入:
    169          **
    170          ** 输　  出:
    171          **
    172          ** 全局变量:
    173          ** 调用模块:
    174          **
    175          ** 作　  者: John Tonny
    176          ** 日　  期: 2005年05月01日
    177          **------------------------------------------------------------------------------------------------------
    178          ** 修 改 人:
    179          ** 日　  期:
    180          **------------------------------------------------------------------------------------------------------
    181          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          void LcdShowChar(uint8_t Char)	//在当前光标位置显示字符
    183          {
   \                     LcdShowChar: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    184            LcdWriteByte(Char,1);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       LcdWriteByte
    185          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    186          
    187          /********************************************************************************************************
    188          ** 函数名称: LcdShowStr
    189          ** 功能描述:
    190          ** 输 　 入:
    191          **
    192          ** 输　  出:
    193          **
    194          ** 全局变量:
    195          ** 调用模块:
    196          **
    197          ** 作　  者: John Tonny
    198          ** 日　  期: 2005年05月01日
    199          **------------------------------------------------------------------------------------------------------
    200          ** 修 改 人:
    201          ** 日　  期:
    202          **------------------------------------------------------------------------------------------------------
    203          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    204          void LcdShowStr(int8u *szStr)	//在当前光标位置显示字符串
    205          {
   \                     LcdShowStr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    206            while(*szStr){
   \                     ??LcdShowStr_0: (+1)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD005             BEQ.N    ??LcdShowStr_1
    207              LcdWriteByte(*szStr,1);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x.... 0x....      BL       LcdWriteByte
    208              szStr++;
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \   00000014   0xE7F6             B.N      ??LcdShowStr_0
    209            }
    210          }
   \                     ??LcdShowStr_1: (+1)
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    211          
    212          /********************************************************************************************************
    213          ** 函数名称: SetGraphMemLocate
    214          ** 功能描述:
    215          ** 输 　 入:
    216          **
    217          ** 输　  出:
    218          **
    219          ** 全局变量:
    220          ** 调用模块:
    221          **
    222          ** 作　  者: John Tonny
    223          ** 日　  期: 2005年05月01日
    224          **------------------------------------------------------------------------------------------------------
    225          ** 修 改 人:
    226          ** 日　  期:
    227          **------------------------------------------------------------------------------------------------------
    228          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    229          void SetGraphMemLocate(int8u x, int8u y)
    230          {
   \                     SetGraphMemLocate: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    231            LcdWriteByte(0x80+y,0);
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF1B5 0x0080      SUBS     R0,R5,#+128
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LcdWriteByte
    232            LcdWriteByte(0x80+x,0);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LcdWriteByte
    233          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    234          
    235          /********************************************************************************************************
    236          ** 函数名称: LcdInit
    237          ** 功能描述:
    238          ** 输 　 入:
    239          **
    240          ** 输　  出:
    241          **
    242          ** 全局变量:
    243          ** 调用模块:
    244          **
    245          ** 作　  者: John Tonny
    246          ** 日　  期: 2005年05月01日
    247          **------------------------------------------------------------------------------------------------------
    248          ** 修 改 人:
    249          ** 日　  期:
    250          **------------------------------------------------------------------------------------------------------
    251          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    252          void LcdInit(int8u bTextMode)	//0-图形模式，1-字符模式
    253          {
   \                     LcdInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    254            if(bTextMode){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00C             BEQ.N    ??LcdInit_0
    255              //LcdWriteByte(0x20,0);	//基本指令操作
    256              //DelayCycle(DELAY_VAL);
    257              //LcdWriteByte(0x24,0);	//扩充指令操作
    258              //DelayCycle(DELAY_VAL);
    259              LcdWriteByte(0x20,0);	//基本指令操作
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x.... 0x....      BL       LcdWriteByte
    260              LcdWriteByte(0x80,0);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0x.... 0x....      BL       LcdWriteByte
    261              //LcdWriteByte(0x26,0);	//指定在资料写入或读取时，光标的移动方向
    262              //DelayCycle(DELAY_VAL);
    263              LcdWriteByte(0x0C,0);	//开显示，关光标，不闪烁。
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x200C             MOVS     R0,#+12
   \   0000001E   0x.... 0x....      BL       LcdWriteByte
   \   00000022   0xE00B             B.N      ??LcdInit_1
    264            }else{
    265              LcdWriteByte(0x26,0);
   \                     ??LcdInit_0: (+1)
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2026             MOVS     R0,#+38
   \   00000028   0x.... 0x....      BL       LcdWriteByte
    266              LcdWriteByte(0x80,0);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x2080             MOVS     R0,#+128
   \   00000030   0x.... 0x....      BL       LcdWriteByte
    267              LcdWriteByte(0x80,0);
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2080             MOVS     R0,#+128
   \   00000038   0x.... 0x....      BL       LcdWriteByte
    268            }
    269          }
   \                     ??LcdInit_1: (+1)
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    270          
    271          
    272          /********************************************************************************************************
    273          ** 函数名称: Lcd_Process
    274          ** 功能描述:
    275          ** 输 　 入:
    276          **
    277          ** 输　  出:
    278          **
    279          ** 全局变量:
    280          ** 调用模块:
    281          **
    282          ** 作　  者: John Tonny
    283          ** 日　  期: 2005年05月01日
    284          **------------------------------------------------------------------------------------------------------
    285          ** 修 改 人:
    286          ** 日　  期:
    287          **------------------------------------------------------------------------------------------------------
    288          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    289          void Lcd_Process(void)	//0-图形模式，1-字符模式
    290          {
   \                     Lcd_Process: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
    291            
    292            LIB_ERR               lib_err;
    293            OS_ERR                os_err;
    294            CPU_TS                ts;
    295            CPU_CHAR              *pMsg; 
    296            OS_MSG_SIZE           msgSize;
    297            INT8U                 ucType;
    298            
    299            INT16U                uiTime=1000;
   \   00000002   0xF44F 0x767A      MOV      R6,#+1000
    300            static CPU_INT08U    ucCmd=DISPLAY_SELFTEST_MSG;
    301            
    302            LcdInit(1);  					
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       LcdInit
    303            LcdClear();
   \   0000000C   0x.... 0x....      BL       LcdClear
    304          
    305            while(DEF_TRUE){
    306              pMsg = (CPU_CHAR *)OSTaskQPend(uiTime, OS_OPT_PEND_BLOCKING, &msgSize, &ts, &os_err);
   \                     ??Lcd_Process_0: (+1)
   \   00000010   0xF10D 0x0006      ADD      R0,SP,#+6
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0xAB03             ADD      R3,SP,#+12
   \   00000018   0xAA01             ADD      R2,SP,#+4
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x.... 0x....      BL       OSTaskQPend
   \   00000024   0x0004             MOVS     R4,R0
    307              if(pMsg){
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD002             BEQ.N    ??Lcd_Process_1
    308                //if(*pMsg>=ucCmd){
    309                  ucCmd=*pMsg;
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable11_2
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    310                //}
    311              }
    312              ucType=DEV_TYPE();
   \                     ??Lcd_Process_1: (+1)
   \   00000030   0x.... 0x....      BL       DEV_TYPE
   \   00000034   0x0005             MOVS     R5,R0
    313              if(ucType!=LARGE_THICK_OUT_TYPE || ucType==LARGE_THIN_OUT_TYPE){
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D04             CMP      R5,#+4
   \   0000003A   0xD102             BNE.N    ??Lcd_Process_2
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0x2D0C             CMP      R5,#+12
   \   00000040   0xD11A             BNE.N    ??Lcd_Process_3
    314                switch(ucCmd){
   \                     ??Lcd_Process_2: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable11_2
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD008             BEQ.N    ??Lcd_Process_4
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD009             BEQ.N    ??Lcd_Process_5
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xD00A             BEQ.N    ??Lcd_Process_6
   \   00000052   0x2803             CMP      R0,#+3
   \   00000054   0xD00B             BEQ.N    ??Lcd_Process_7
   \   00000056   0x2808             CMP      R0,#+8
   \   00000058   0xD00C             BEQ.N    ??Lcd_Process_8
   \   0000005A   0xE00D             B.N      ??Lcd_Process_3
    315                  case DISPLAY_SELFTEST_MSG:
    316                    DisplaySelftest();
   \                     ??Lcd_Process_4: (+1)
   \   0000005C   0x.... 0x....      BL       DisplaySelftest
    317                    break;
   \   00000060   0xE00A             B.N      ??Lcd_Process_3
    318                  case DISPLAY_MAIN_MSG:
    319                    DisplayMain();
   \                     ??Lcd_Process_5: (+1)
   \   00000062   0x.... 0x....      BL       DisplayMain
    320                    break;
   \   00000066   0xE007             B.N      ??Lcd_Process_3
    321                  case DISPLAY_WRITING_MSG:
    322                    DisplayWriting();
   \                     ??Lcd_Process_6: (+1)
   \   00000068   0x.... 0x....      BL       DisplayWriting
    323                    break;
   \   0000006C   0xE004             B.N      ??Lcd_Process_3
    324                  case DISPLAY_POS_ERR_MSG:
    325                    DisplayPosErr();
   \                     ??Lcd_Process_7: (+1)
   \   0000006E   0x.... 0x....      BL       DisplayPosErr
    326                    break;
   \   00000072   0xE001             B.N      ??Lcd_Process_3
    327                  case DISPLAY_KEY_TEST_MSG:
    328                    DisplayKeyTest();
   \                     ??Lcd_Process_8: (+1)
   \   00000074   0x.... 0x....      BL       DisplayKeyTest
    329                    break;
    330                }
    331              }
    332              if(pMsg){
   \                     ??Lcd_Process_3: (+1)
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD0C9             BEQ.N    ??Lcd_Process_0
    333                Mem_PoolBlkFree(&m_BoxPool, pMsg, &lib_err);
   \   0000007C   0xAA02             ADD      R2,SP,#+8
   \   0000007E   0x0021             MOVS     R1,R4
   \   00000080   0x....             LDR.N    R0,??DataTable11_3
   \   00000082   0x.... 0x....      BL       Mem_PoolBlkFree
    334                if (lib_err != LIB_MEM_ERR_NONE)  {
   \   00000086   0xE7C3             B.N      ??Lcd_Process_0
    335                  //error
    336                }        
    337              }
    338            }
    339          }

   \                                 In section .bss, align 1
   \                     `Lcd_Process::ucCmd`:
   \   00000000                      DS8 1
    340          
    341          
    342          /********************************************************************************************************
    343          ** 函数名称: DisplayCommErr
    344          ** 功能描述:
    345          ** 输 　 入:
    346          **
    347          ** 输　  出:
    348          **
    349          ** 全局变量:
    350          ** 调用模块:
    351          **
    352          ** 作　  者: John Tonny
    353          ** 日　  期: 2005年05月01日
    354          **------------------------------------------------------------------------------------------------------
    355          ** 修 改 人:
    356          ** 日　  期:
    357          **------------------------------------------------------------------------------------------------------
    358          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    359          void DisplayCommErr(void)
    360          {
   \                     DisplayCommErr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    361            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    362            LcdShowStr(" 卡夹通讯异常！ ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_4
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    363            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    364            LcdShowStr("请卸载或更换卡夹");
   \   00000018   0x....             LDR.N    R0,??DataTable11_5
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    365            SetLcd_ErrLed(1);  
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       SetLcd_ErrLed
    366          
    367          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    368          
    369          /********************************************************************************************************
    370          ** 函数名称: DisplayUnload
    371          ** 功能描述:
    372          ** 输 　 入:
    373          **
    374          ** 输　  出:
    375          **
    376          ** 全局变量:
    377          ** 调用模块:
    378          **
    379          ** 作　  者: John Tonny
    380          ** 日　  期: 2005年05月01日
    381          **------------------------------------------------------------------------------------------------------
    382          ** 修 改 人:
    383          ** 日　  期:
    384          **------------------------------------------------------------------------------------------------------
    385          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    386          void DisplayUnlode(void)
    387          {
   \                     DisplayUnlode: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    388            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    389            LcdShowStr(" 未检测到卡夹！ ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_6
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    390            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    391            LcdShowStr("  请装载卡夹！   ");
   \   00000018   0x....             LDR.N    R0,??DataTable11_7
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    392          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    393          
    394          /********************************************************************************************************
    395          ** 函数名称: DisplayPosErr
    396          ** 功能描述:
    397          ** 输 　 入:
    398          **
    399          ** 输　  出:
    400          **
    401          ** 全局变量:
    402          ** 调用模块:
    403          **
    404          ** 作　  者: John Tonny
    405          ** 日　  期: 2005年05月01日
    406          **------------------------------------------------------------------------------------------------------
    407          ** 修 改 人:
    408          ** 日　  期:
    409          **------------------------------------------------------------------------------------------------------
    410          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    411          void DisplayPosErr(void)
    412          {
   \                     DisplayPosErr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    413            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    414            LcdShowStr(" 卡夹通讯异常！ ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_4
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    415            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    416            LcdShowStr("请卸载或更换卡夹");
   \   00000018   0x....             LDR.N    R0,??DataTable11_5
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    417            SetLcd_ErrLed(1);  
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       SetLcd_ErrLed
    418          
    419          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    420          
    421          /********************************************************************************************************
    422          ** 函数名称: DisplayWriteErr
    423          ** 功能描述:
    424          ** 输 　 入:
    425          **
    426          ** 输　  出:
    427          **
    428          ** 全局变量:
    429          ** 调用模块:
    430          **
    431          ** 作　  者: John Tonny
    432          ** 日　  期: 2005年05月01日
    433          **------------------------------------------------------------------------------------------------------
    434          ** 修 改 人:
    435          ** 日　  期:
    436          **------------------------------------------------------------------------------------------------------
    437          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    438          void DisplayWriteErr(void)
    439          {
   \                     DisplayWriteErr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    440            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    441            LcdShowStr(" 写入卡数错误！ ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_8
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    442            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    443            LcdShowStr("请卸载后重新装载");
   \   00000018   0x....             LDR.N    R0,??DataTable11_9
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    444          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    445          
    446          
    447          /********************************************************************************************************
    448          ** 函数名称: DisplayKeyTest
    449          ** 功能描述:
    450          ** 输 　 入:
    451          **
    452          ** 输　  出:
    453          **
    454          ** 全局变量:
    455          ** 调用模块:
    456          **
    457          ** 作　  者: John Tonny
    458          ** 日　  期: 2005年05月01日
    459          **------------------------------------------------------------------------------------------------------
    460          ** 修 改 人:
    461          ** 日　  期:
    462          **------------------------------------------------------------------------------------------------------
    463          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    464          void DisplayKeyTest(void)
    465          {
   \                     DisplayKeyTest: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    466            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    467            LcdShowStr("光电管正在检测");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_10
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    468            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    469            LcdShowStr("    请等待！    ");
   \   00000018   0x....             LDR.N    R0,??DataTable11_11
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    470          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    471          
    472          /********************************************************************************************************
    473          ** 函数名称: DisplaySwitchErr
    474          ** 功能描述:
    475          ** 输 　 入:
    476          **
    477          ** 输　  出:
    478          **
    479          ** 全局变量:
    480          ** 调用模块:
    481          **
    482          ** 作　  者: John Tonny
    483          ** 日　  期: 2005年05月01日
    484          **------------------------------------------------------------------------------------------------------
    485          ** 修 改 人:
    486          ** 日　  期:
    487          **------------------------------------------------------------------------------------------------------
    488          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    489          void DisplaySwitchErr(INT8U ucMode)
    490          {
    491            
    492          }
   \                     DisplaySwitchErr: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    493          
    494          
    495          /********************************************************************************************************
    496          ** 函数名称: DisplaySelftest
    497          ** 功能描述:
    498          ** 输 　 入:
    499          **
    500          ** 输　  出:
    501          **
    502          ** 全局变量:
    503          ** 调用模块:
    504          **
    505          ** 作　  者: John Tonny
    506          ** 日　  期: 2005年05月01日
    507          **------------------------------------------------------------------------------------------------------
    508          ** 修 改 人:
    509          ** 日　  期:
    510          **------------------------------------------------------------------------------------------------------
    511          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    512          void DisplaySelftest(void)
    513          {
   \                     DisplaySelftest: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    514            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    515            LcdShowStr("  卡机正在自检  ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_12
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    516            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    517            LcdShowStr("    请等待！    ");
   \   00000018   0x....             LDR.N    R0,??DataTable11_11
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    518          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    519          
    520          /********************************************************************************************************
    521          ** 函数名称: DisplayMain
    522          ** 功能描述:
    523          ** 输 　 入:
    524          **
    525          ** 输　  出:
    526          **
    527          ** 全局变量:
    528          ** 调用模块:
    529          **
    530          ** 作　  者: John Tonny
    531          ** 日　  期: 2005年05月01日
    532          **------------------------------------------------------------------------------------------------------
    533          ** 修 改 人:
    534          ** 日　  期:
    535          **------------------------------------------------------------------------------------------------------
    536          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    537          void DisplayMain(void)
    538          {
   \                     DisplayMain: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    539            INT8U ucType=DEV_TYPE();
   \   00000004   0x.... 0x....      BL       DEV_TYPE
   \   00000008   0x0004             MOVS     R4,R0
    540            INT8U ucAutoMode=CARD_AUTO_MODE();
   \   0000000A   0x.... 0x....      BL       CARD_AUTO_MODE
   \   0000000E   0x0005             MOVS     R5,R0
    541            INT8U ucData[32];
    542            
    543            LcdLocateCursor(0,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    544            if(ucType==SMALL_THICK_OUT_TYPE || ucType==SMALL_THIN_OUT_TYPE){
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD002             BEQ.N    ??DisplayMain_0
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x2C08             CMP      R4,#+8
   \   00000022   0xD10A             BNE.N    ??DisplayMain_1
    545              if(ucAutoMode){
   \                     ??DisplayMain_0: (+1)
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD003             BEQ.N    ??DisplayMain_2
    546                LcdShowStr("自动模式--发卡中");
   \   0000002A   0x....             LDR.N    R0,??DataTable11_13
   \   0000002C   0x.... 0x....      BL       LcdShowStr
   \   00000030   0xE03A             B.N      ??DisplayMain_3
    547              }else{
    548                LcdShowStr("控制模式--发卡中");
   \                     ??DisplayMain_2: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable11_14
   \   00000034   0x.... 0x....      BL       LcdShowStr
   \   00000038   0xE036             B.N      ??DisplayMain_3
    549              }
    550            }else if(ucType==SMALL_THICK_IN_TYPE || ucType==SMALL_THIN_IN_TYPE){
   \                     ??DisplayMain_1: (+1)
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C01             CMP      R4,#+1
   \   0000003E   0xD002             BEQ.N    ??DisplayMain_4
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C09             CMP      R4,#+9
   \   00000044   0xD10A             BNE.N    ??DisplayMain_5
    551              if(ucAutoMode){
   \                     ??DisplayMain_4: (+1)
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD003             BEQ.N    ??DisplayMain_6
    552                LcdShowStr("自动模式--收卡中");
   \   0000004C   0x....             LDR.N    R0,??DataTable11_15
   \   0000004E   0x.... 0x....      BL       LcdShowStr
   \   00000052   0xE029             B.N      ??DisplayMain_3
    553              }else{
    554                LcdShowStr("控制模式--收卡中");
   \                     ??DisplayMain_6: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable11_16
   \   00000056   0x.... 0x....      BL       LcdShowStr
   \   0000005A   0xE025             B.N      ??DisplayMain_3
    555              }
    556            }else if(ucType==SMALL_THICK_GIN_TYPE || ucType==SMALL_THIN_GIN_TYPE){
   \                     ??DisplayMain_5: (+1)
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0x2C03             CMP      R4,#+3
   \   00000060   0xD002             BEQ.N    ??DisplayMain_7
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x2C0B             CMP      R4,#+11
   \   00000066   0xD11F             BNE.N    ??DisplayMain_3
    557              if(ucAutoMode){
   \                     ??DisplayMain_7: (+1)
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x2D00             CMP      R5,#+0
   \   0000006C   0xD00E             BEQ.N    ??DisplayMain_8
    558                if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bSelftest){
   \   0000006E   0x....             LDR.N    R0,??DataTable11_17
   \   00000070   0x7B80             LDRB     R0,[R0, #+14]
   \   00000072   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD103             BNE.N    ??DisplayMain_9
    559                  LcdShowStr("自动模式--灌卡中");
   \   0000007C   0x....             LDR.N    R0,??DataTable11_18
   \   0000007E   0x.... 0x....      BL       LcdShowStr
   \   00000082   0xE011             B.N      ??DisplayMain_3
    560                }else{
    561                  LcdShowStr("自动模式--自检中");
   \                     ??DisplayMain_9: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable11_19
   \   00000086   0x.... 0x....      BL       LcdShowStr
   \   0000008A   0xE00D             B.N      ??DisplayMain_3
    562                }
    563              }else{
    564                if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bSelftest){
   \                     ??DisplayMain_8: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable11_17
   \   0000008E   0x7B80             LDRB     R0,[R0, #+14]
   \   00000090   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD103             BNE.N    ??DisplayMain_10
    565                  LcdShowStr("控制模式--灌卡中");
   \   0000009A   0x....             LDR.N    R0,??DataTable11_20
   \   0000009C   0x.... 0x....      BL       LcdShowStr
   \   000000A0   0xE002             B.N      ??DisplayMain_3
    566                }else{
    567                  LcdShowStr("控制模式--自检中");
   \                     ??DisplayMain_10: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable11_21
   \   000000A4   0x.... 0x....      BL       LcdShowStr
    568                }
    569              }
    570            }
    571            LcdLocateCursor(1,0);
   \                     ??DisplayMain_3: (+1)
   \   000000A8   0x2100             MOVS     R1,#+0
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x.... 0x....      BL       LcdLocateCursor
    572            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bBoxLoad){
   \   000000B0   0x....             LDR.N    R0,??DataTable11_17
   \   000000B2   0x7B80             LDRB     R0,[R0, #+14]
   \   000000B4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD103             BNE.N    ??DisplayMain_11
    573              LcdShowStr("  未装载卡夹！  ");  
   \   000000BC   0x....             LDR.N    R0,??DataTable11_22
   \   000000BE   0x.... 0x....      BL       LcdShowStr
   \   000000C2   0xE039             B.N      ??DisplayMain_12
    574            }else{
    575              LcdShowStr("卡夹");
   \                     ??DisplayMain_11: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable11_23
   \   000000C6   0x.... 0x....      BL       LcdShowStr
    576              LcdLocateCursor(1,2);
   \   000000CA   0x2102             MOVS     R1,#+2
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x.... 0x....      BL       LcdLocateCursor
    577              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \   000000D2   0x....             LDR.N    R0,??DataTable11_17
   \   000000D4   0x7B80             LDRB     R0,[R0, #+14]
   \   000000D6   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD009             BEQ.N    ??DisplayMain_13
    578                SprintF(ucData,4,m_usrBoxInfo[BOX_FIRST].ulMachineId);
   \   000000E0   0x....             LDR.N    R0,??DataTable11_17
   \   000000E2   0x6842             LDR      R2,[R0, #+4]
   \   000000E4   0x2104             MOVS     R1,#+4
   \   000000E6   0x4668             MOV      R0,SP
   \   000000E8   0x.... 0x....      BL       SprintF
    579                LcdShowStr(ucData);
   \   000000EC   0x4668             MOV      R0,SP
   \   000000EE   0x.... 0x....      BL       LcdShowStr
   \   000000F2   0xE002             B.N      ??DisplayMain_14
    580              }else{
    581                LcdShowStr("----");
   \                     ??DisplayMain_13: (+1)
   \   000000F4   0x....             LDR.N    R0,??DataTable11_24
   \   000000F6   0x.... 0x....      BL       LcdShowStr
    582              }
    583              
    584              LcdLocateCursor(1,4);
   \                     ??DisplayMain_14: (+1)
   \   000000FA   0x2104             MOVS     R1,#+4
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0x.... 0x....      BL       LcdLocateCursor
    585              LcdShowStr("卡数");
   \   00000102   0x....             LDR.N    R0,??DataTable11_25
   \   00000104   0x.... 0x....      BL       LcdShowStr
    586              LcdLocateCursor(1,6);
   \   00000108   0x2106             MOVS     R1,#+6
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x.... 0x....      BL       LcdLocateCursor
    587              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \   00000110   0x....             LDR.N    R0,??DataTable11_17
   \   00000112   0x7B80             LDRB     R0,[R0, #+14]
   \   00000114   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD009             BEQ.N    ??DisplayMain_15
    588                SprintF(ucData,4,m_usrBoxInfo[BOX_FIRST].ucCounts);
   \   0000011E   0x....             LDR.N    R0,??DataTable11_17
   \   00000120   0x7802             LDRB     R2,[R0, #+0]
   \   00000122   0x2104             MOVS     R1,#+4
   \   00000124   0x4668             MOV      R0,SP
   \   00000126   0x.... 0x....      BL       SprintF
    589                LcdShowStr(ucData);
   \   0000012A   0x4668             MOV      R0,SP
   \   0000012C   0x.... 0x....      BL       LcdShowStr
   \   00000130   0xE002             B.N      ??DisplayMain_12
    590              }else{
    591                LcdShowStr("----");
   \                     ??DisplayMain_15: (+1)
   \   00000132   0x....             LDR.N    R0,??DataTable11_24
   \   00000134   0x.... 0x....      BL       LcdShowStr
    592              }
    593            }
    594          }
   \                     ??DisplayMain_12: (+1)
   \   00000138   0xB009             ADD      SP,SP,#+36
   \   0000013A   0xBD30             POP      {R4,R5,PC}       ;; return
    595          
    596          /********************************************************************************************************
    597          ** 函数名称: DisplayWriting
    598          ** 功能描述:
    599          ** 输 　 入:
    600          **
    601          ** 输　  出:
    602          **
    603          ** 全局变量:
    604          ** 调用模块:
    605          **
    606          ** 作　  者: John Tonny
    607          ** 日　  期: 2005年05月01日
    608          **------------------------------------------------------------------------------------------------------
    609          ** 修 改 人:
    610          ** 日　  期:
    611          **------------------------------------------------------------------------------------------------------
    612          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    613          void DisplayWriting(void)
    614          {
   \                     DisplayWriting: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    615            OS_ERR os_err;
    616            INT8U ucCmd;
    617            
    618            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    619            LcdShowStr("写入中--请勿卸载");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_26
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    620            OSTimeDly(1000,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000010   0xF10D 0x0202      ADD      R2,SP,#+2
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001A   0x.... 0x....      BL       OSTimeDly
    621            ucCmd=DISPLAY_MAIN_MSG;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
    622            Box_TaskLcdQPost(&App_TaskLcdTCB,&ucCmd,1);
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x....             LDR.N    R0,??DataTable11_27
   \   0000002A   0x.... 0x....      BL       Box_TaskLcdQPost
    623          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    624          
    625          /********************************************************************************************************
    626          ** 函数名称: DisplayKeyTest
    627          ** 功能描述:
    628          ** 输 　 入:
    629          **
    630          ** 输　  出:
    631          **
    632          ** 全局变量:
    633          ** 调用模块:
    634          **
    635          ** 作　  者: John Tonny
    636          ** 日　  期: 2005年05月01日
    637          **------------------------------------------------------------------------------------------------------
    638          ** 修 改 人:
    639          ** 日　  期:
    640          **------------------------------------------------------------------------------------------------------
    641          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    642          void DisplayKetTest(void)
    643          {
   \                     DisplayKetTest: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    644            LcdLocateCursor(0,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LcdLocateCursor
    645            LcdShowStr(" 光电管正在检测 ");
   \   0000000A   0x....             LDR.N    R0,??DataTable11_28
   \   0000000C   0x.... 0x....      BL       LcdShowStr
    646            LcdLocateCursor(1,0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       LcdLocateCursor
    647            LcdShowStr("    请等待！    ");
   \   00000018   0x....             LDR.N    R0,??DataTable11_11
   \   0000001A   0x.... 0x....      BL       LcdShowStr
    648          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     m_UartBufPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     Uart_SerTraceIF_Nbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     `Lcd_Process::ucCmd`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     m_BoxPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \   00000000   0x........         DC32     App_TaskLcdTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0xBF          DC8 " \277\250\274\320\315\250\321\266\322\354\263\243\243\241 "
   \              0xA8 0xBC    
   \              0xD0 0xCD    
   \              0xA8 0xD1    
   \              0xB6 0xD2    
   \              0xEC 0xB3    
   \              0xA3 0xA3    
   \              0xA1 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0xC7 0xEB          DC8 "\307\353\320\266\324\330\273\362\270\374\273\273\277\250\274\320"
   \              0xD0 0xB6    
   \              0xD4 0xD8    
   \              0xBB 0xF2    
   \              0xB8 0xFC    
   \              0xBB 0xBB    
   \              0xBF 0xA8    
   \              0xBC 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x20 0xCE          DC8 " \316\264\274\354\262\342\265\275\277\250\274\320\243\241 "
   \              0xB4 0xBC    
   \              0xEC 0xB2    
   \              0xE2 0xB5    
   \              0xBD 0xBF    
   \              0xA8 0xBC    
   \              0xD0 0xA3    
   \              0xA1 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x20 0x20          DC8 "  \307\353\327\260\324\330\277\250\274\320\243\241   "
   \              0xC7 0xEB    
   \              0xD7 0xB0    
   \              0xD4 0xD8    
   \              0xBF 0xA8    
   \              0xBC 0xD0    
   \              0xA3 0xA1    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x20 0xD0          DC8 " \320\264\310\353\277\250\312\375\264\355\316\363\243\241 "
   \              0xB4 0xC8    
   \              0xEB 0xBF    
   \              0xA8 0xCA    
   \              0xFD 0xB4    
   \              0xED 0xCE    
   \              0xF3 0xA3    
   \              0xA1 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0xC7 0xEB          DC8 "\307\353\320\266\324\330\272\363\326\330\320\302\327\260\324\330"
   \              0xD0 0xB6    
   \              0xD4 0xD8    
   \              0xBA 0xF3    
   \              0xD6 0xD8    
   \              0xD0 0xC2    
   \              0xD7 0xB0    
   \              0xD4 0xD8    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0xB9 0xE2          DC8 "\271\342\265\347\271\334\325\375\324\332\274\354\262\342"
   \              0xB5 0xE7    
   \              0xB9 0xDC    
   \              0xD5 0xFD    
   \              0xD4 0xDA    
   \              0xBC 0xEC    
   \              0xB2 0xE2    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x20 0x20          DC8 "    \307\353\265\310\264\375\243\241    "
   \              0x20 0x20    
   \              0xC7 0xEB    
   \              0xB5 0xC8    
   \              0xB4 0xFD    
   \              0xA3 0xA1    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "  \277\250\273\372\325\375\324\332\327\324\274\354  "
   \              0xBF 0xA8    
   \              0xBB 0xFA    
   \              0xD5 0xFD    
   \              0xD4 0xDA    
   \              0xD7 0xD4    
   \              0xBC 0xEC    
   \              0x20 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0xD7 0xD4          DC8 "\327\324\266\257\304\243\312\275--\267\242\277\250\326\320"
   \              0xB6 0xAF    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xB7 0xA2    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0xBF 0xD8          DC8 "\277\330\326\306\304\243\312\275--\267\242\277\250\326\320"
   \              0xD6 0xC6    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xB7 0xA2    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0xD7 0xD4          DC8 "\327\324\266\257\304\243\312\275--\312\325\277\250\326\320"
   \              0xB6 0xAF    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xCA 0xD5    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0xBF 0xD8          DC8 "\277\330\326\306\304\243\312\275--\312\325\277\250\326\320"
   \              0xD6 0xC6    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xCA 0xD5    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0xD7 0xD4          DC8 "\327\324\266\257\304\243\312\275--\271\340\277\250\326\320"
   \              0xB6 0xAF    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xB9 0xE0    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0xD7 0xD4          DC8 "\327\324\266\257\304\243\312\275--\327\324\274\354\326\320"
   \              0xB6 0xAF    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xD7 0xD4    
   \              0xBC 0xEC    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0xBF 0xD8          DC8 "\277\330\326\306\304\243\312\275--\271\340\277\250\326\320"
   \              0xD6 0xC6    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xB9 0xE0    
   \              0xBF 0xA8    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0xBF 0xD8          DC8 "\277\330\326\306\304\243\312\275--\327\324\274\354\326\320"
   \              0xD6 0xC6    
   \              0xC4 0xA3    
   \              0xCA 0xBD    
   \              0x2D 0x2D    
   \              0xD7 0xD4    
   \              0xBC 0xEC    
   \              0xD6 0xD0    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x20 0x20          DC8 "  \316\264\327\260\324\330\277\250\274\320\243\241  "
   \              0xCE 0xB4    
   \              0xD7 0xB0    
   \              0xD4 0xD8    
   \              0xBF 0xA8    
   \              0xBC 0xD0    
   \              0xA3 0xA1    
   \              0x20 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0xBF 0xA8          DC8 "\277\250\274\320"
   \              0xBC 0xD0    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x2D 0x2D          DC8 "----"
   \              0x2D 0x2D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0xBF 0xA8          DC8 "\277\250\312\375"
   \              0xCA 0xFD    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0xD0 0xB4          DC8 "\320\264\310\353\326\320--\307\353\316\360\320\266\324\330"
   \              0xC8 0xEB    
   \              0xD6 0xD0    
   \              0x2D 0x2D    
   \              0xC7 0xEB    
   \              0xCE 0xF0    
   \              0xD0 0xB6    
   \              0xD4 0xD8    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0xB9          DC8 " \271\342\265\347\271\334\325\375\324\332\274\354\262\342 "
   \              0xE2 0xB5    
   \              0xE7 0xB9    
   \              0xDC 0xD5    
   \              0xFD 0xD4    
   \              0xDA 0xBC    
   \              0xEC 0xB2    
   \              0xE2 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    649          
    650          
    651          
    652          /*******************************************************************************************************
    653          **                            End Of File
    654          *******************************************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DisplayCommErr
         8   -> LcdLocateCursor
         8   -> LcdShowStr
         8   -> SetLcd_ErrLed
       8   DisplayKetTest
         8   -> LcdLocateCursor
         8   -> LcdShowStr
       8   DisplayKeyTest
         8   -> LcdLocateCursor
         8   -> LcdShowStr
      48   DisplayMain
        48   -> CARD_AUTO_MODE
        48   -> DEV_TYPE
        48   -> LcdLocateCursor
        48   -> LcdShowStr
        48   -> SprintF
       8   DisplayPosErr
         8   -> LcdLocateCursor
         8   -> LcdShowStr
         8   -> SetLcd_ErrLed
       8   DisplaySelftest
         8   -> LcdLocateCursor
         8   -> LcdShowStr
       0   DisplaySwitchErr
       8   DisplayUnlode
         8   -> LcdLocateCursor
         8   -> LcdShowStr
       8   DisplayWriteErr
         8   -> LcdLocateCursor
         8   -> LcdShowStr
       8   DisplayWriting
         8   -> Box_TaskLcdQPost
         8   -> LcdLocateCursor
         8   -> LcdShowStr
         8   -> OSTimeDly
       8   LcdClear
         8   -> LcdWriteByte
       8   LcdInit
         8   -> LcdWriteByte
      16   LcdLocateCursor
        16   -> LcdWriteByte
       8   LcdShowChar
         8   -> LcdWriteByte
       8   LcdShowStr
         8   -> LcdWriteByte
      32   LcdWriteByte
        32   -> Mem_PoolBlkFree
        32   -> Mem_PoolBlkGet
        32   -> OSTimeDly
        32   -> Serial_Wr
      32   Lcd_Process
        32   -> DEV_TYPE
        32   -> DisplayKeyTest
        32   -> DisplayMain
        32   -> DisplayPosErr
        32   -> DisplaySelftest
        32   -> DisplayWriting
        32   -> LcdClear
        32   -> LcdInit
        32   -> Mem_PoolBlkFree
        32   -> OSTaskQPend
      16   SetGraphMemLocate
        16   -> LcdWriteByte
      24   SetLcd_ErrLed
        24   -> Mem_PoolBlkFree
        24   -> Mem_PoolBlkGet
        24   -> OSTimeDly
        24   -> Serial_Wr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      20  ?_0
      20  ?_1
      20  ?_10
      20  ?_11
      20  ?_12
      20  ?_13
      20  ?_14
      20  ?_15
      20  ?_16
      20  ?_17
       8  ?_18
       8  ?_19
      20  ?_2
       8  ?_20
      20  ?_21
      20  ?_22
      20  ?_3
      20  ?_4
      20  ?_5
      16  ?_6
      20  ?_7
      20  ?_8
      20  ?_9
      38  DisplayCommErr
      32  DisplayKetTest
      32  DisplayKeyTest
     316  DisplayMain
      38  DisplayPosErr
      32  DisplaySelftest
       2  DisplaySwitchErr
      32  DisplayUnlode
      32  DisplayWriteErr
      48  DisplayWriting
      20  LcdClear
      62  LcdInit
      30  LcdLocateCursor
      16  LcdShowChar
      24  LcdShowStr
      76  LcdWriteByte
     136  Lcd_Process
      32  SetGraphMemLocate
      88  SetLcd_ErrLed
       1  ucCmd

 
     1 byte  in section .bss
   420 bytes in section .rodata
 1 202 bytes in section .text
 
 1 202 bytes of CODE  memory
   420 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
