###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:10
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Moto.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Moto.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\Moto.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\Moto.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\Moto.c
      1          /*******************************************************************************************************
      2          *
      3          *                                 (c) Copyright 2004-2007, John Tonny
      4          *
      5          *                                           All Rights Reserved
      6          *
      7          ********************************************************************************************************
      8          *
      9          *--------------???tD??￠---------------------------------------------------------------------------------
     10          *??   ?t   ??: Moto.c
     11          *′′   ?¨   è?: John Tonny
     12          *×?oóDT??è??ú: 2009?ê11??01è?
     13          *?è        ê?:
     14          *
     15          *--------------àúê・°?±?D??￠-----------------------------------------------------------------------------
     16          * ′′?¨è?: John Tonny
     17          * °?  ±?: V1.0
     18          * è????ú: 2009?ê11??01è?
     19          * ?è??ê?: ?-ê?°?±?
     20          *
     21          *-------------------------------------------------------------------------------------------------------
     22          * DT??è?:
     23          * °?  ±?:
     24          * è????ú:
     25          * ?è??ê?:
     26          *
     27          *--------------μ±?°°?±?DT??-----------------------------------------------------------------------------
     28          * DT??è?:
     29          * è????ú:
     30          * ?è??ê?:
     31          *
     32          *-------------------------------------------------------------------------------------------------------
     33          *******************************************************************************************************/
     34          
     35          #define MOTO_GLOBALS
     36          #include "includes.h"
     37          

   \                                 In section .data, align 4
     38          INT8U BUZZ_SK_MODE[4]={5,10,20,40};
   \                     BUZZ_SK_MODE:
   \   00000000   0x05 0x0A          DC8 5, 10, 20, 40
   \              0x14 0x28    
     39          
     40          #define OpenScan()           		  CSP_GPIO_BitClr(BSP_GPIO_SCAN_PORT,BSP_GPIO_SCAN_OUT);
     41          #define CloseScan()           		  CSP_GPIO_BitSet(BSP_GPIO_SCAN_PORT,BSP_GPIO_SCAN_OUT);
     42          
     43          
     44          /********************************************************************************************************
     45          ** 函数名称: RevCrc16Bytes
     46          ** 功能描述:
     47          ** 输 　 入:
     48          **
     49          ** 输　  出:
     50          **
     51          ** 全局变量:
     52          ** 调用模块:
     53          **
     54          ** 作　  者: John Tonny
     55          ** 日　  期: 2005年05月01日
     56          **------------------------------------------------------------------------------------------------------
     57          ** 修 改 人:
     58          ** 日　  期:
     59          **------------------------------------------------------------------------------------------------------
     60          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void MotoInit(void)
     62          {
   \                     MotoInit: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     63            //DMoto1
     64            CSP_GPIO_Cfg(BSP_GPIO_DMOTO1_EN1_PORT,
     65                         BSP_GPIO_DMOTO1_EN1,
     66                         CSP_GPIO_DIR_OUT,
     67                         CSP_GPIO_FLAG_MODE_NONE,
     68                         DEF_NO,
     69                         0u,
     70                         CSP_GPIO_FNCT_00);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9002             STR      R0,[SP, #+8]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xF45F 0x2180      MOVS     R1,#+262144
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       CSP_GPIO_Cfg
     71            CSP_GPIO_Cfg(BSP_GPIO_DMOTO1_EN2_PORT,
     72                         BSP_GPIO_DMOTO1_EN2,
     73                         CSP_GPIO_DIR_OUT,
     74                         CSP_GPIO_FLAG_MODE_NONE,
     75                         DEF_NO,
     76                         0u,
     77                         CSP_GPIO_FNCT_00);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9002             STR      R0,[SP, #+8]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2301             MOVS     R3,#+1
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       CSP_GPIO_Cfg
     78            CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN1_PORT,
     79                            BSP_GPIO_DMOTO1_EN1);
   \   00000036   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       CSP_GPIO_BitSet
     80            CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN2_PORT,
     81                            BSP_GPIO_DMOTO1_EN2);
   \   00000040   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       CSP_GPIO_BitSet
     82            
     83            //DMoto2
     84            CSP_GPIO_Cfg(BSP_GPIO_DMOTO2_EN1_PORT,
     85                         BSP_GPIO_DMOTO2_EN1,
     86                         CSP_GPIO_DIR_OUT,
     87                         CSP_GPIO_FLAG_MODE_NONE,
     88                         DEF_NO,
     89                         0u,
     90                         CSP_GPIO_FNCT_00);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9002             STR      R0,[SP, #+8]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x2301             MOVS     R3,#+1
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       CSP_GPIO_Cfg
     91            CSP_GPIO_Cfg(BSP_GPIO_DMOTO2_EN2_PORT,
     92                         BSP_GPIO_DMOTO2_EN2,
     93                         CSP_GPIO_DIR_OUT,
     94                         CSP_GPIO_FLAG_MODE_NONE,
     95                         DEF_NO,
     96                         0u,
     97                         CSP_GPIO_FNCT_00);
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x9002             STR      R0,[SP, #+8]
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x2301             MOVS     R3,#+1
   \   00000072   0x2201             MOVS     R2,#+1
   \   00000074   0xF45F 0x1180      MOVS     R1,#+1048576
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x.... 0x....      BL       CSP_GPIO_Cfg
     98            CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN1_PORT,
     99                            BSP_GPIO_DMOTO2_EN1);
   \   0000007E   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       CSP_GPIO_BitSet
    100            CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN2_PORT,
    101                            BSP_GPIO_DMOTO2_EN2);
   \   00000088   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       CSP_GPIO_BitSet
    102          
    103            //DMoto3f
    104            CSP_GPIO_Cfg(BSP_GPIO_DMOTO3_EN1_PORT,
    105                         BSP_GPIO_DMOTO3_EN1,
    106                         CSP_GPIO_DIR_OUT,
    107                         CSP_GPIO_FLAG_MODE_NONE,
    108                         DEF_NO,
    109                         0u,
    110                         CSP_GPIO_FNCT_00);
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9002             STR      R0,[SP, #+8]
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x9001             STR      R0,[SP, #+4]
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x9000             STR      R0,[SP, #+0]
   \   0000009E   0x2301             MOVS     R3,#+1
   \   000000A0   0x2201             MOVS     R2,#+1
   \   000000A2   0xF45F 0x0180      MOVS     R1,#+4194304
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      BL       CSP_GPIO_Cfg
    111            CSP_GPIO_Cfg(BSP_GPIO_DMOTO3_EN2_PORT,
    112                         BSP_GPIO_DMOTO3_EN2,
    113                         CSP_GPIO_DIR_OUT,
    114                         CSP_GPIO_FLAG_MODE_NONE,
    115                         DEF_NO,
    116                         0u,
    117                         CSP_GPIO_FNCT_00);
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x9001             STR      R0,[SP, #+4]
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x2301             MOVS     R3,#+1
   \   000000BA   0x2201             MOVS     R2,#+1
   \   000000BC   0xF45F 0x0100      MOVS     R1,#+8388608
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0x.... 0x....      BL       CSP_GPIO_Cfg
    118            CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN1_PORT,
    119                            BSP_GPIO_DMOTO3_EN1);
   \   000000C6   0xF45F 0x0180      MOVS     R1,#+4194304
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x.... 0x....      BL       CSP_GPIO_BitSet
    120            CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN2_PORT,
    121                            BSP_GPIO_DMOTO3_EN2);
   \   000000D0   0xF45F 0x0100      MOVS     R1,#+8388608
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      BL       CSP_GPIO_BitSet
    122          
    123            //DMoto4
    124            CSP_GPIO_Cfg(BSP_GPIO_DMOTO4_EN1_PORT,
    125                         BSP_GPIO_DMOTO4_EN1,
    126                         CSP_GPIO_DIR_OUT,
    127                         CSP_GPIO_FLAG_MODE_NONE,
    128                         DEF_NO,
    129                         0u,
    130                         CSP_GPIO_FNCT_00);
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x9002             STR      R0,[SP, #+8]
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x9001             STR      R0,[SP, #+4]
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x2301             MOVS     R3,#+1
   \   000000E8   0x2201             MOVS     R2,#+1
   \   000000EA   0xF05F 0x7100      MOVS     R1,#+33554432
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x.... 0x....      BL       CSP_GPIO_Cfg
    131            CSP_GPIO_Cfg(BSP_GPIO_DMOTO4_EN2_PORT,
    132                         BSP_GPIO_DMOTO4_EN2,
    133                         CSP_GPIO_DIR_OUT,
    134                         CSP_GPIO_FLAG_MODE_NONE,
    135                         DEF_NO,
    136                         0u,
    137                         CSP_GPIO_FNCT_00);
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x9002             STR      R0,[SP, #+8]
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x9001             STR      R0,[SP, #+4]
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x9000             STR      R0,[SP, #+0]
   \   00000100   0x2301             MOVS     R3,#+1
   \   00000102   0x2201             MOVS     R2,#+1
   \   00000104   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0x.... 0x....      BL       CSP_GPIO_Cfg
    138            CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN1_PORT,
    139                            BSP_GPIO_DMOTO4_EN1);
   \   0000010E   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x.... 0x....      BL       CSP_GPIO_BitSet
    140            CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN2_PORT,
    141                            BSP_GPIO_DMOTO4_EN2);
   \   00000118   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x.... 0x....      BL       CSP_GPIO_BitSet
    142          
    143          
    144            //SMoto1
    145            CSP_GPIO_Cfg(BSP_GPIO_SMOTO1_CC_PORT,
    146                         BSP_GPIO_SMOTO1_CC,
    147                         CSP_GPIO_DIR_OUT,
    148                         CSP_GPIO_FLAG_MODE_NONE,
    149                         DEF_NO,
    150                         0u,
    151                         CSP_GPIO_FNCT_00);
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x9002             STR      R0,[SP, #+8]
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x9001             STR      R0,[SP, #+4]
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x2301             MOVS     R3,#+1
   \   00000130   0x2201             MOVS     R2,#+1
   \   00000132   0xF05F 0x6100      MOVS     R1,#+134217728
   \   00000136   0x2001             MOVS     R0,#+1
   \   00000138   0x.... 0x....      BL       CSP_GPIO_Cfg
    152            CSP_GPIO_Cfg(BSP_GPIO_SMOTO1_CLK_PORT,
    153                         BSP_GPIO_SMOTO1_CLK,
    154                         CSP_GPIO_DIR_OUT,
    155                         CSP_GPIO_FLAG_MODE_NONE,
    156                         DEF_NO,
    157                         0u,
    158                         CSP_GPIO_FNCT_00);
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x9002             STR      R0,[SP, #+8]
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x9001             STR      R0,[SP, #+4]
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x9000             STR      R0,[SP, #+0]
   \   00000148   0x2301             MOVS     R3,#+1
   \   0000014A   0x2201             MOVS     R2,#+1
   \   0000014C   0xF05F 0x5180      MOVS     R1,#+268435456
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x.... 0x....      BL       CSP_GPIO_Cfg
    159            CSP_GPIO_Cfg(BSP_GPIO_SMOTO1_EN_PORT,
    160                         BSP_GPIO_SMOTO1_EN,
    161                         CSP_GPIO_DIR_OUT,
    162                         CSP_GPIO_FLAG_MODE_NONE,
    163                         DEF_NO,
    164                         0u,
    165                         CSP_GPIO_FNCT_00);
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0x9002             STR      R0,[SP, #+8]
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x9001             STR      R0,[SP, #+4]
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0x9000             STR      R0,[SP, #+0]
   \   00000162   0x2301             MOVS     R3,#+1
   \   00000164   0x2201             MOVS     R2,#+1
   \   00000166   0xF05F 0x7100      MOVS     R1,#+33554432
   \   0000016A   0x2003             MOVS     R0,#+3
   \   0000016C   0x.... 0x....      BL       CSP_GPIO_Cfg
    166            CSP_GPIO_Cfg(BSP_GPIO_SMOTO1_RST_PORT,
    167                         BSP_GPIO_SMOTO1_RST,
    168                         CSP_GPIO_DIR_OUT,
    169                         CSP_GPIO_FLAG_MODE_NONE,
    170                         DEF_NO,
    171                         0u,
    172                         CSP_GPIO_FNCT_00);
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x9002             STR      R0,[SP, #+8]
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x9000             STR      R0,[SP, #+0]
   \   0000017C   0x2301             MOVS     R3,#+1
   \   0000017E   0x2201             MOVS     R2,#+1
   \   00000180   0xF05F 0x6180      MOVS     R1,#+67108864
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0x.... 0x....      BL       CSP_GPIO_Cfg
    173          
    174            CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_CC_PORT,
    175                            BSP_GPIO_SMOTO1_CC);
   \   0000018A   0xF05F 0x6100      MOVS     R1,#+134217728
   \   0000018E   0x2001             MOVS     R0,#+1
   \   00000190   0x.... 0x....      BL       CSP_GPIO_BitSet
    176            CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_CLK_PORT,
    177                            BSP_GPIO_SMOTO1_CLK);
   \   00000194   0xF05F 0x5180      MOVS     R1,#+268435456
   \   00000198   0x2001             MOVS     R0,#+1
   \   0000019A   0x.... 0x....      BL       CSP_GPIO_BitSet
    178            CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_EN_PORT,
    179                            BSP_GPIO_SMOTO1_EN);
   \   0000019E   0xF05F 0x7100      MOVS     R1,#+33554432
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x.... 0x....      BL       CSP_GPIO_BitSet
    180            CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_RST_PORT,
    181                            BSP_GPIO_SMOTO1_RST);
   \   000001A8   0xF05F 0x6180      MOVS     R1,#+67108864
   \   000001AC   0x2001             MOVS     R0,#+1
   \   000001AE   0x.... 0x....      BL       CSP_GPIO_BitSet
    182            
    183            //SMoto2
    184            CSP_GPIO_Cfg(BSP_GPIO_SMOTO2_CC_PORT,
    185                         BSP_GPIO_SMOTO2_CC,
    186                         CSP_GPIO_DIR_OUT,
    187                         CSP_GPIO_FLAG_MODE_NONE,
    188                         DEF_NO,
    189                         0u,
    190                         CSP_GPIO_FNCT_00);
   \   000001B2   0x2000             MOVS     R0,#+0
   \   000001B4   0x9002             STR      R0,[SP, #+8]
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0x9001             STR      R0,[SP, #+4]
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x9000             STR      R0,[SP, #+0]
   \   000001BE   0x2301             MOVS     R3,#+1
   \   000001C0   0x2201             MOVS     R2,#+1
   \   000001C2   0xF05F 0x6180      MOVS     R1,#+67108864
   \   000001C6   0x2003             MOVS     R0,#+3
   \   000001C8   0x.... 0x....      BL       CSP_GPIO_Cfg
    191            CSP_GPIO_Cfg(BSP_GPIO_SMOTO2_CLK_PORT,
    192                         BSP_GPIO_SMOTO2_CLK,
    193                         CSP_GPIO_DIR_OUT,
    194                         CSP_GPIO_FLAG_MODE_NONE,
    195                         DEF_NO,
    196                         0u,
    197                         CSP_GPIO_FNCT_00);
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0x9002             STR      R0,[SP, #+8]
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0x9001             STR      R0,[SP, #+4]
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0x9000             STR      R0,[SP, #+0]
   \   000001D8   0x2301             MOVS     R3,#+1
   \   000001DA   0x2201             MOVS     R2,#+1
   \   000001DC   0xF05F 0x5100      MOVS     R1,#+536870912
   \   000001E0   0x2001             MOVS     R0,#+1
   \   000001E2   0x.... 0x....      BL       CSP_GPIO_Cfg
    198            CSP_GPIO_Cfg(BSP_GPIO_SMOTO2_EN_PORT,
    199                         BSP_GPIO_SMOTO2_EN,
    200                         CSP_GPIO_DIR_OUT,
    201                         CSP_GPIO_FLAG_MODE_NONE,
    202                         DEF_NO,
    203                         0u,
    204                         CSP_GPIO_FNCT_00);
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x9002             STR      R0,[SP, #+8]
   \   000001EA   0x2000             MOVS     R0,#+0
   \   000001EC   0x9001             STR      R0,[SP, #+4]
   \   000001EE   0x2000             MOVS     R0,#+0
   \   000001F0   0x9000             STR      R0,[SP, #+0]
   \   000001F2   0x2301             MOVS     R3,#+1
   \   000001F4   0x2201             MOVS     R2,#+1
   \   000001F6   0xF44F 0x6180      MOV      R1,#+1024
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x.... 0x....      BL       CSP_GPIO_Cfg
    205            CSP_GPIO_Cfg(BSP_GPIO_SMOTO2_RST_PORT,
    206                         BSP_GPIO_SMOTO2_RST,
    207                         CSP_GPIO_DIR_OUT,
    208                         CSP_GPIO_FLAG_MODE_NONE,
    209                         DEF_NO,
    210                         0u,
    211                         CSP_GPIO_FNCT_00);
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0x9002             STR      R0,[SP, #+8]
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x9001             STR      R0,[SP, #+4]
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x9000             STR      R0,[SP, #+0]
   \   0000020C   0x2301             MOVS     R3,#+1
   \   0000020E   0x2201             MOVS     R2,#+1
   \   00000210   0xF44F 0x7100      MOV      R1,#+512
   \   00000214   0x2001             MOVS     R0,#+1
   \   00000216   0x.... 0x....      BL       CSP_GPIO_Cfg
    212            CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_CC_PORT,
    213                            BSP_GPIO_SMOTO2_CC);
   \   0000021A   0xF05F 0x6180      MOVS     R1,#+67108864
   \   0000021E   0x2003             MOVS     R0,#+3
   \   00000220   0x.... 0x....      BL       CSP_GPIO_BitSet
    214            CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_CLK_PORT,
    215                            BSP_GPIO_SMOTO2_CLK);
   \   00000224   0xF05F 0x5100      MOVS     R1,#+536870912
   \   00000228   0x2001             MOVS     R0,#+1
   \   0000022A   0x.... 0x....      BL       CSP_GPIO_BitSet
    216            CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_EN_PORT,
    217                            BSP_GPIO_SMOTO2_EN);
   \   0000022E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000232   0x2001             MOVS     R0,#+1
   \   00000234   0x.... 0x....      BL       CSP_GPIO_BitSet
    218            CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_RST_PORT,
    219                            BSP_GPIO_SMOTO2_RST);
   \   00000238   0xF44F 0x7100      MOV      R1,#+512
   \   0000023C   0x2001             MOVS     R0,#+1
   \   0000023E   0x.... 0x....      BL       CSP_GPIO_BitSet
    220          
    221            //Pos1
    222            CSP_GPIO_Cfg(BSP_GPIO_DMOTO1_POSA_PORT,
    223                         BSP_GPIO_DMOTO1_POSA,
    224                         CSP_GPIO_DIR_IN,
    225                         CSP_GPIO_FLAG_MODE_PULLUP,
    226                         DEF_NO,
    227                         0u,
    228                         CSP_GPIO_FNCT_00);
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x9002             STR      R0,[SP, #+8]
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x9001             STR      R0,[SP, #+4]
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0x9000             STR      R0,[SP, #+0]
   \   0000024E   0x2302             MOVS     R3,#+2
   \   00000250   0x2200             MOVS     R2,#+0
   \   00000252   0x2110             MOVS     R1,#+16
   \   00000254   0x2000             MOVS     R0,#+0
   \   00000256   0x.... 0x....      BL       CSP_GPIO_Cfg
    229            CSP_GPIO_Cfg(BSP_GPIO_DMOTO1_POSB_PORT,
    230                         BSP_GPIO_DMOTO1_POSB,
    231                         CSP_GPIO_DIR_IN,
    232                         CSP_GPIO_FLAG_MODE_PULLUP,
    233                         DEF_NO,
    234                         0u,
    235                         CSP_GPIO_FNCT_00);
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x9002             STR      R0,[SP, #+8]
   \   0000025E   0x2000             MOVS     R0,#+0
   \   00000260   0x9001             STR      R0,[SP, #+4]
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x9000             STR      R0,[SP, #+0]
   \   00000266   0x2302             MOVS     R3,#+2
   \   00000268   0x2200             MOVS     R2,#+0
   \   0000026A   0x2120             MOVS     R1,#+32
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x.... 0x....      BL       CSP_GPIO_Cfg
    236            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSE1_PORT,
    237                         BSP_GPIO_CARD_POSE1,
    238                         CSP_GPIO_DIR_IN,
    239                         CSP_GPIO_FLAG_MODE_PULLUP,
    240                         DEF_NO,
    241                         0u,
    242                         CSP_GPIO_FNCT_00);
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x9002             STR      R0,[SP, #+8]
   \   00000276   0x2000             MOVS     R0,#+0
   \   00000278   0x9001             STR      R0,[SP, #+4]
   \   0000027A   0x2000             MOVS     R0,#+0
   \   0000027C   0x9000             STR      R0,[SP, #+0]
   \   0000027E   0x2302             MOVS     R3,#+2
   \   00000280   0x2200             MOVS     R2,#+0
   \   00000282   0x2140             MOVS     R1,#+64
   \   00000284   0x2000             MOVS     R0,#+0
   \   00000286   0x.... 0x....      BL       CSP_GPIO_Cfg
    243            CSP_GPIO_Cfg(BSP_GPIO_BOXLOAD1_PORT,
    244                         BSP_GPIO_BOXLOAD1,
    245                         CSP_GPIO_DIR_IN,
    246                         CSP_GPIO_FLAG_MODE_PULLUP,
    247                         DEF_NO,
    248                         0u,
    249                         CSP_GPIO_FNCT_00);
   \   0000028A   0x2000             MOVS     R0,#+0
   \   0000028C   0x9002             STR      R0,[SP, #+8]
   \   0000028E   0x2000             MOVS     R0,#+0
   \   00000290   0x9001             STR      R0,[SP, #+4]
   \   00000292   0x2000             MOVS     R0,#+0
   \   00000294   0x9000             STR      R0,[SP, #+0]
   \   00000296   0x2302             MOVS     R3,#+2
   \   00000298   0x2200             MOVS     R2,#+0
   \   0000029A   0x2180             MOVS     R1,#+128
   \   0000029C   0x2000             MOVS     R0,#+0
   \   0000029E   0x.... 0x....      BL       CSP_GPIO_Cfg
    250            CSP_GPIO_Cfg(BSP_GPIO_BOX1_REV1_PORT,
    251                         BSP_GPIO_BOX1_REV1,
    252                         CSP_GPIO_DIR_IN,
    253                         CSP_GPIO_FLAG_MODE_PULLUP,
    254                         DEF_NO,
    255                         0u,
    256                         CSP_GPIO_FNCT_00);
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x9002             STR      R0,[SP, #+8]
   \   000002A6   0x2000             MOVS     R0,#+0
   \   000002A8   0x9001             STR      R0,[SP, #+4]
   \   000002AA   0x2000             MOVS     R0,#+0
   \   000002AC   0x9000             STR      R0,[SP, #+0]
   \   000002AE   0x2302             MOVS     R3,#+2
   \   000002B0   0x2200             MOVS     R2,#+0
   \   000002B2   0xF44F 0x7180      MOV      R1,#+256
   \   000002B6   0x2000             MOVS     R0,#+0
   \   000002B8   0x.... 0x....      BL       CSP_GPIO_Cfg
    257            CSP_GPIO_Cfg(BSP_GPIO_BOX1_REV2_PORT,
    258                         BSP_GPIO_BOX1_REV2,
    259                         CSP_GPIO_DIR_IN,
    260                         CSP_GPIO_FLAG_MODE_PULLUP,
    261                         DEF_NO,
    262                         0u,
    263                         CSP_GPIO_FNCT_00);
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0x9002             STR      R0,[SP, #+8]
   \   000002C0   0x2000             MOVS     R0,#+0
   \   000002C2   0x9001             STR      R0,[SP, #+4]
   \   000002C4   0x2000             MOVS     R0,#+0
   \   000002C6   0x9000             STR      R0,[SP, #+0]
   \   000002C8   0x2302             MOVS     R3,#+2
   \   000002CA   0x2200             MOVS     R2,#+0
   \   000002CC   0xF44F 0x7100      MOV      R1,#+512
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x.... 0x....      BL       CSP_GPIO_Cfg
    264            CSP_GPIO_Cfg(BSP_GPIO_BOX1_POS_PORT,
    265                         BSP_GPIO_BOX1_POS,
    266                         CSP_GPIO_DIR_IN,
    267                         CSP_GPIO_FLAG_MODE_PULLUP,
    268                         DEF_NO,
    269                         0u,
    270                         CSP_GPIO_FNCT_00);
   \   000002D6   0x2000             MOVS     R0,#+0
   \   000002D8   0x9002             STR      R0,[SP, #+8]
   \   000002DA   0x2000             MOVS     R0,#+0
   \   000002DC   0x9001             STR      R0,[SP, #+4]
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x9000             STR      R0,[SP, #+0]
   \   000002E2   0x2302             MOVS     R3,#+2
   \   000002E4   0x2200             MOVS     R2,#+0
   \   000002E6   0x2102             MOVS     R1,#+2
   \   000002E8   0x2001             MOVS     R0,#+1
   \   000002EA   0x.... 0x....      BL       CSP_GPIO_Cfg
    271          
    272            //Pos2
    273            CSP_GPIO_Cfg(BSP_GPIO_DMOTO2_POSA_PORT,
    274                         BSP_GPIO_DMOTO2_POSA,
    275                         CSP_GPIO_DIR_IN,
    276                         CSP_GPIO_FLAG_MODE_PULLUP,
    277                         DEF_NO,
    278                         0u,
    279                         CSP_GPIO_FNCT_00);
   \   000002EE   0x2000             MOVS     R0,#+0
   \   000002F0   0x9002             STR      R0,[SP, #+8]
   \   000002F2   0x2000             MOVS     R0,#+0
   \   000002F4   0x9001             STR      R0,[SP, #+4]
   \   000002F6   0x2000             MOVS     R0,#+0
   \   000002F8   0x9000             STR      R0,[SP, #+0]
   \   000002FA   0x2302             MOVS     R3,#+2
   \   000002FC   0x2200             MOVS     R2,#+0
   \   000002FE   0x2104             MOVS     R1,#+4
   \   00000300   0x2002             MOVS     R0,#+2
   \   00000302   0x.... 0x....      BL       CSP_GPIO_Cfg
    280            CSP_GPIO_Cfg(BSP_GPIO_DMOTO2_POSB_PORT,
    281                         BSP_GPIO_DMOTO2_POSB,
    282                         CSP_GPIO_DIR_IN,
    283                         CSP_GPIO_FLAG_MODE_PULLUP,
    284                         DEF_NO,
    285                         0u,
    286                         CSP_GPIO_FNCT_00);
   \   00000306   0x2000             MOVS     R0,#+0
   \   00000308   0x9002             STR      R0,[SP, #+8]
   \   0000030A   0x2000             MOVS     R0,#+0
   \   0000030C   0x9001             STR      R0,[SP, #+4]
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x9000             STR      R0,[SP, #+0]
   \   00000312   0x2302             MOVS     R3,#+2
   \   00000314   0x2200             MOVS     R2,#+0
   \   00000316   0x2108             MOVS     R1,#+8
   \   00000318   0x2002             MOVS     R0,#+2
   \   0000031A   0x.... 0x....      BL       CSP_GPIO_Cfg
    287            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSE2_PORT,
    288                         BSP_GPIO_CARD_POSE2,
    289                         CSP_GPIO_DIR_IN,
    290                         CSP_GPIO_FLAG_MODE_PULLUP,
    291                         DEF_NO,
    292                         0u,
    293                         CSP_GPIO_FNCT_00);
   \   0000031E   0x2000             MOVS     R0,#+0
   \   00000320   0x9002             STR      R0,[SP, #+8]
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x9001             STR      R0,[SP, #+4]
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x9000             STR      R0,[SP, #+0]
   \   0000032A   0x2302             MOVS     R3,#+2
   \   0000032C   0x2200             MOVS     R2,#+0
   \   0000032E   0x2110             MOVS     R1,#+16
   \   00000330   0x2002             MOVS     R0,#+2
   \   00000332   0x.... 0x....      BL       CSP_GPIO_Cfg
    294            CSP_GPIO_Cfg(BSP_GPIO_BOXLOAD2_PORT,
    295                         BSP_GPIO_BOXLOAD2,
    296                         CSP_GPIO_DIR_IN,
    297                         CSP_GPIO_FLAG_MODE_PULLUP,
    298                         DEF_NO,
    299                         0u,
    300                         CSP_GPIO_FNCT_00);
   \   00000336   0x2000             MOVS     R0,#+0
   \   00000338   0x9002             STR      R0,[SP, #+8]
   \   0000033A   0x2000             MOVS     R0,#+0
   \   0000033C   0x9001             STR      R0,[SP, #+4]
   \   0000033E   0x2000             MOVS     R0,#+0
   \   00000340   0x9000             STR      R0,[SP, #+0]
   \   00000342   0x2302             MOVS     R3,#+2
   \   00000344   0x2200             MOVS     R2,#+0
   \   00000346   0x2120             MOVS     R1,#+32
   \   00000348   0x2002             MOVS     R0,#+2
   \   0000034A   0x.... 0x....      BL       CSP_GPIO_Cfg
    301            CSP_GPIO_Cfg(BSP_GPIO_BOX2_REV1_PORT,
    302                         BSP_GPIO_BOX2_REV1,
    303                         CSP_GPIO_DIR_IN,
    304                         CSP_GPIO_FLAG_MODE_PULLUP,
    305                         DEF_NO,
    306                         0u,
    307                         CSP_GPIO_FNCT_00);
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0x9002             STR      R0,[SP, #+8]
   \   00000352   0x2000             MOVS     R0,#+0
   \   00000354   0x9001             STR      R0,[SP, #+4]
   \   00000356   0x2000             MOVS     R0,#+0
   \   00000358   0x9000             STR      R0,[SP, #+0]
   \   0000035A   0x2302             MOVS     R3,#+2
   \   0000035C   0x2200             MOVS     R2,#+0
   \   0000035E   0x2140             MOVS     R1,#+64
   \   00000360   0x2002             MOVS     R0,#+2
   \   00000362   0x.... 0x....      BL       CSP_GPIO_Cfg
    308            CSP_GPIO_Cfg(BSP_GPIO_BOX2_REV2_PORT,
    309                         BSP_GPIO_BOX2_REV2,
    310                         CSP_GPIO_DIR_IN,
    311                         CSP_GPIO_FLAG_MODE_PULLUP,
    312                         DEF_NO,
    313                         0u,
    314                         CSP_GPIO_FNCT_00);
   \   00000366   0x2000             MOVS     R0,#+0
   \   00000368   0x9002             STR      R0,[SP, #+8]
   \   0000036A   0x2000             MOVS     R0,#+0
   \   0000036C   0x9001             STR      R0,[SP, #+4]
   \   0000036E   0x2000             MOVS     R0,#+0
   \   00000370   0x9000             STR      R0,[SP, #+0]
   \   00000372   0x2302             MOVS     R3,#+2
   \   00000374   0x2200             MOVS     R2,#+0
   \   00000376   0x2180             MOVS     R1,#+128
   \   00000378   0x2002             MOVS     R0,#+2
   \   0000037A   0x.... 0x....      BL       CSP_GPIO_Cfg
    315            CSP_GPIO_Cfg(BSP_GPIO_BOX2_POS_PORT,
    316                         BSP_GPIO_BOX2_POS,
    317                         CSP_GPIO_DIR_IN,
    318                         CSP_GPIO_FLAG_MODE_PULLUP,
    319                         DEF_NO,
    320                         0u,
    321                         CSP_GPIO_FNCT_00);
   \   0000037E   0x2000             MOVS     R0,#+0
   \   00000380   0x9002             STR      R0,[SP, #+8]
   \   00000382   0x2000             MOVS     R0,#+0
   \   00000384   0x9001             STR      R0,[SP, #+4]
   \   00000386   0x2000             MOVS     R0,#+0
   \   00000388   0x9000             STR      R0,[SP, #+0]
   \   0000038A   0x2302             MOVS     R3,#+2
   \   0000038C   0x2200             MOVS     R2,#+0
   \   0000038E   0x2110             MOVS     R1,#+16
   \   00000390   0x2001             MOVS     R0,#+1
   \   00000392   0x.... 0x....      BL       CSP_GPIO_Cfg
    322            
    323            //Pos3
    324            CSP_GPIO_Cfg(BSP_GPIO_DMOTO3_POSA_PORT,
    325                         BSP_GPIO_DMOTO3_POSA,
    326                         CSP_GPIO_DIR_IN,
    327                         CSP_GPIO_FLAG_MODE_PULLUP,
    328                         DEF_NO,
    329                         0u,
    330                         CSP_GPIO_FNCT_00);
   \   00000396   0x2000             MOVS     R0,#+0
   \   00000398   0x9002             STR      R0,[SP, #+8]
   \   0000039A   0x2000             MOVS     R0,#+0
   \   0000039C   0x9001             STR      R0,[SP, #+4]
   \   0000039E   0x2000             MOVS     R0,#+0
   \   000003A0   0x9000             STR      R0,[SP, #+0]
   \   000003A2   0x2302             MOVS     R3,#+2
   \   000003A4   0x2200             MOVS     R2,#+0
   \   000003A6   0xF44F 0x7180      MOV      R1,#+256
   \   000003AA   0x2002             MOVS     R0,#+2
   \   000003AC   0x.... 0x....      BL       CSP_GPIO_Cfg
    331            CSP_GPIO_Cfg(BSP_GPIO_DMOTO3_POSB_PORT,
    332                         BSP_GPIO_DMOTO3_POSB,
    333                         CSP_GPIO_DIR_IN,
    334                         CSP_GPIO_FLAG_MODE_PULLUP,
    335                         DEF_NO,
    336                         0u,
    337                         CSP_GPIO_FNCT_00);
   \   000003B0   0x2000             MOVS     R0,#+0
   \   000003B2   0x9002             STR      R0,[SP, #+8]
   \   000003B4   0x2000             MOVS     R0,#+0
   \   000003B6   0x9001             STR      R0,[SP, #+4]
   \   000003B8   0x2000             MOVS     R0,#+0
   \   000003BA   0x9000             STR      R0,[SP, #+0]
   \   000003BC   0x2302             MOVS     R3,#+2
   \   000003BE   0x2200             MOVS     R2,#+0
   \   000003C0   0xF44F 0x7100      MOV      R1,#+512
   \   000003C4   0x2002             MOVS     R0,#+2
   \   000003C6   0x.... 0x....      BL       CSP_GPIO_Cfg
    338            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSE3_PORT,
    339                         BSP_GPIO_CARD_POSE3,
    340                         CSP_GPIO_DIR_IN,
    341                         CSP_GPIO_FLAG_MODE_PULLUP,
    342                         DEF_NO,
    343                         0u,
    344                         CSP_GPIO_FNCT_00);
   \   000003CA   0x2000             MOVS     R0,#+0
   \   000003CC   0x9002             STR      R0,[SP, #+8]
   \   000003CE   0x2000             MOVS     R0,#+0
   \   000003D0   0x9001             STR      R0,[SP, #+4]
   \   000003D2   0x2000             MOVS     R0,#+0
   \   000003D4   0x9000             STR      R0,[SP, #+0]
   \   000003D6   0x2302             MOVS     R3,#+2
   \   000003D8   0x2200             MOVS     R2,#+0
   \   000003DA   0xF45F 0x3180      MOVS     R1,#+65536
   \   000003DE   0x2000             MOVS     R0,#+0
   \   000003E0   0x.... 0x....      BL       CSP_GPIO_Cfg
    345            CSP_GPIO_Cfg(BSP_GPIO_BOXLOAD3_PORT,
    346                         BSP_GPIO_BOXLOAD3,
    347                         CSP_GPIO_DIR_IN,
    348                         CSP_GPIO_FLAG_MODE_PULLUP,
    349                         DEF_NO,
    350                         0u,
    351                         CSP_GPIO_FNCT_00);
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x9002             STR      R0,[SP, #+8]
   \   000003E8   0x2000             MOVS     R0,#+0
   \   000003EA   0x9001             STR      R0,[SP, #+4]
   \   000003EC   0x2000             MOVS     R0,#+0
   \   000003EE   0x9000             STR      R0,[SP, #+0]
   \   000003F0   0x2302             MOVS     R3,#+2
   \   000003F2   0x2200             MOVS     R2,#+0
   \   000003F4   0xF44F 0x4100      MOV      R1,#+32768
   \   000003F8   0x2000             MOVS     R0,#+0
   \   000003FA   0x.... 0x....      BL       CSP_GPIO_Cfg
    352            CSP_GPIO_Cfg(BSP_GPIO_BOX3_REV1_PORT,
    353                         BSP_GPIO_BOX3_REV1,
    354                         CSP_GPIO_DIR_OUT,
    355                         CSP_GPIO_FLAG_MODE_PULLUP,
    356                         DEF_NO,
    357                         0u,
    358                         CSP_GPIO_FNCT_00);
   \   000003FE   0x2000             MOVS     R0,#+0
   \   00000400   0x9002             STR      R0,[SP, #+8]
   \   00000402   0x2000             MOVS     R0,#+0
   \   00000404   0x9001             STR      R0,[SP, #+4]
   \   00000406   0x2000             MOVS     R0,#+0
   \   00000408   0x9000             STR      R0,[SP, #+0]
   \   0000040A   0x2302             MOVS     R3,#+2
   \   0000040C   0x2201             MOVS     R2,#+1
   \   0000040E   0xF45F 0x3100      MOVS     R1,#+131072
   \   00000412   0x2000             MOVS     R0,#+0
   \   00000414   0x.... 0x....      BL       CSP_GPIO_Cfg
    359            CSP_GPIO_Cfg(BSP_GPIO_BOX3_REV2_PORT,
    360                         BSP_GPIO_BOX3_REV2,
    361                         CSP_GPIO_DIR_OUT,
    362                         CSP_GPIO_FLAG_MODE_PULLUP,
    363                         DEF_NO,
    364                         0u,
    365                         CSP_GPIO_FNCT_00);
   \   00000418   0x2000             MOVS     R0,#+0
   \   0000041A   0x9002             STR      R0,[SP, #+8]
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x9001             STR      R0,[SP, #+4]
   \   00000420   0x2000             MOVS     R0,#+0
   \   00000422   0x9000             STR      R0,[SP, #+0]
   \   00000424   0x2302             MOVS     R3,#+2
   \   00000426   0x2201             MOVS     R2,#+1
   \   00000428   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000042C   0x2000             MOVS     R0,#+0
   \   0000042E   0x.... 0x....      BL       CSP_GPIO_Cfg
    366            CSP_GPIO_Cfg(BSP_GPIO_BOX3_POS_PORT,
    367                         BSP_GPIO_BOX3_POS,
    368                         CSP_GPIO_DIR_IN,
    369                         CSP_GPIO_FLAG_MODE_PULLUP,
    370                         DEF_NO,
    371                         0u,
    372                         CSP_GPIO_FNCT_00);
   \   00000432   0x2000             MOVS     R0,#+0
   \   00000434   0x9002             STR      R0,[SP, #+8]
   \   00000436   0x2000             MOVS     R0,#+0
   \   00000438   0x9001             STR      R0,[SP, #+4]
   \   0000043A   0x2000             MOVS     R0,#+0
   \   0000043C   0x9000             STR      R0,[SP, #+0]
   \   0000043E   0x2302             MOVS     R3,#+2
   \   00000440   0x2200             MOVS     R2,#+0
   \   00000442   0xF44F 0x7180      MOV      R1,#+256
   \   00000446   0x2001             MOVS     R0,#+1
   \   00000448   0x.... 0x....      BL       CSP_GPIO_Cfg
    373          
    374            //Pos4
    375            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSA_PORT,
    376                         BSP_GPIO_CARD_POSA,
    377                         CSP_GPIO_DIR_IN,
    378                         CSP_GPIO_FLAG_MODE_PULLUP,
    379                         DEF_NO,
    380                         0u,
    381                         CSP_GPIO_FNCT_00);
   \   0000044C   0x2000             MOVS     R0,#+0
   \   0000044E   0x9002             STR      R0,[SP, #+8]
   \   00000450   0x2000             MOVS     R0,#+0
   \   00000452   0x9001             STR      R0,[SP, #+4]
   \   00000454   0x2000             MOVS     R0,#+0
   \   00000456   0x9000             STR      R0,[SP, #+0]
   \   00000458   0x2302             MOVS     R3,#+2
   \   0000045A   0x2200             MOVS     R2,#+0
   \   0000045C   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000460   0x2000             MOVS     R0,#+0
   \   00000462   0x.... 0x....      BL       CSP_GPIO_Cfg
    382            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSB_PORT,
    383                         BSP_GPIO_CARD_POSB,
    384                         CSP_GPIO_DIR_IN,
    385                         CSP_GPIO_FLAG_MODE_PULLUP,
    386                         DEF_NO,
    387                         0u,
    388                         CSP_GPIO_FNCT_00);
   \   00000466   0x2000             MOVS     R0,#+0
   \   00000468   0x9002             STR      R0,[SP, #+8]
   \   0000046A   0x2000             MOVS     R0,#+0
   \   0000046C   0x9001             STR      R0,[SP, #+4]
   \   0000046E   0x2000             MOVS     R0,#+0
   \   00000470   0x9000             STR      R0,[SP, #+0]
   \   00000472   0x2302             MOVS     R3,#+2
   \   00000474   0x2200             MOVS     R2,#+0
   \   00000476   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000047A   0x2000             MOVS     R0,#+0
   \   0000047C   0x.... 0x....      BL       CSP_GPIO_Cfg
    389            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSC_PORT,
    390                         BSP_GPIO_CARD_POSC,
    391                         CSP_GPIO_DIR_IN,
    392                         CSP_GPIO_FLAG_MODE_PULLUP,
    393                         DEF_NO,
    394                         0u,
    395                         CSP_GPIO_FNCT_00);
   \   00000480   0x2000             MOVS     R0,#+0
   \   00000482   0x9002             STR      R0,[SP, #+8]
   \   00000484   0x2000             MOVS     R0,#+0
   \   00000486   0x9001             STR      R0,[SP, #+4]
   \   00000488   0x2000             MOVS     R0,#+0
   \   0000048A   0x9000             STR      R0,[SP, #+0]
   \   0000048C   0x2302             MOVS     R3,#+2
   \   0000048E   0x2200             MOVS     R2,#+0
   \   00000490   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000494   0x2000             MOVS     R0,#+0
   \   00000496   0x.... 0x....      BL       CSP_GPIO_Cfg
    396            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSD_PORT,
    397                         BSP_GPIO_CARD_POSD,
    398                         CSP_GPIO_DIR_IN,
    399                         CSP_GPIO_FLAG_MODE_PULLUP,
    400                         DEF_NO,
    401                         0u,
    402                         CSP_GPIO_FNCT_00);
   \   0000049A   0x2000             MOVS     R0,#+0
   \   0000049C   0x9002             STR      R0,[SP, #+8]
   \   0000049E   0x2000             MOVS     R0,#+0
   \   000004A0   0x9001             STR      R0,[SP, #+4]
   \   000004A2   0x2000             MOVS     R0,#+0
   \   000004A4   0x9000             STR      R0,[SP, #+0]
   \   000004A6   0x2302             MOVS     R3,#+2
   \   000004A8   0x2200             MOVS     R2,#+0
   \   000004AA   0xF45F 0x0180      MOVS     R1,#+4194304
   \   000004AE   0x2000             MOVS     R0,#+0
   \   000004B0   0x.... 0x....      BL       CSP_GPIO_Cfg
    403            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSE_PORT,
    404                         BSP_GPIO_CARD_POSE,
    405                         CSP_GPIO_DIR_IN,
    406                         CSP_GPIO_FLAG_MODE_PULLUP,
    407                         DEF_NO,
    408                         0u,
    409                         CSP_GPIO_FNCT_00);
   \   000004B4   0x2000             MOVS     R0,#+0
   \   000004B6   0x9002             STR      R0,[SP, #+8]
   \   000004B8   0x2000             MOVS     R0,#+0
   \   000004BA   0x9001             STR      R0,[SP, #+4]
   \   000004BC   0x2000             MOVS     R0,#+0
   \   000004BE   0x9000             STR      R0,[SP, #+0]
   \   000004C0   0x2302             MOVS     R3,#+2
   \   000004C2   0x2200             MOVS     R2,#+0
   \   000004C4   0xF44F 0x6100      MOV      R1,#+2048
   \   000004C8   0x2002             MOVS     R0,#+2
   \   000004CA   0x.... 0x....      BL       CSP_GPIO_Cfg
    410            CSP_GPIO_Cfg(BSP_GPIO_CARD_POSF_PORT,
    411                         BSP_GPIO_CARD_POSF,
    412                         CSP_GPIO_DIR_IN,
    413                         CSP_GPIO_FLAG_MODE_PULLUP,
    414                         DEF_NO,
    415                         0u,
    416                         CSP_GPIO_FNCT_00);
   \   000004CE   0x2000             MOVS     R0,#+0
   \   000004D0   0x9002             STR      R0,[SP, #+8]
   \   000004D2   0x2000             MOVS     R0,#+0
   \   000004D4   0x9001             STR      R0,[SP, #+4]
   \   000004D6   0x2000             MOVS     R0,#+0
   \   000004D8   0x9000             STR      R0,[SP, #+0]
   \   000004DA   0x2302             MOVS     R3,#+2
   \   000004DC   0x2200             MOVS     R2,#+0
   \   000004DE   0xF44F 0x5180      MOV      R1,#+4096
   \   000004E2   0x2002             MOVS     R0,#+2
   \   000004E4   0x.... 0x....      BL       CSP_GPIO_Cfg
    417            
    418            //AutoCard
    419            CSP_GPIO_Cfg(BSP_GPIO_AUTOCARD_PORT,
    420                         BSP_GPIO_AUTOCARD,
    421                         CSP_GPIO_DIR_IN,
    422                         CSP_GPIO_FLAG_MODE_PULLUP,
    423                         DEF_NO,
    424                         0u,
    425                         CSP_GPIO_FNCT_00);
   \   000004E8   0x2000             MOVS     R0,#+0
   \   000004EA   0x9002             STR      R0,[SP, #+8]
   \   000004EC   0x2000             MOVS     R0,#+0
   \   000004EE   0x9001             STR      R0,[SP, #+4]
   \   000004F0   0x2000             MOVS     R0,#+0
   \   000004F2   0x9000             STR      R0,[SP, #+0]
   \   000004F4   0x2302             MOVS     R3,#+2
   \   000004F6   0x2200             MOVS     R2,#+0
   \   000004F8   0xF45F 0x0100      MOVS     R1,#+8388608
   \   000004FC   0x2000             MOVS     R0,#+0
   \   000004FE   0x.... 0x....      BL       CSP_GPIO_Cfg
    426          
    427            //DEV TYPE
    428            CSP_GPIO_Cfg(BSP_GPIO_DEV_TYPE_PORT,
    429                         BSP_GPIO_DEV1_TYPE,
    430                         CSP_GPIO_DIR_IN,
    431                         CSP_GPIO_FLAG_MODE_PULLUP,
    432                         DEF_NO,
    433                         0u,
    434                         CSP_GPIO_FNCT_00);
   \   00000502   0x2000             MOVS     R0,#+0
   \   00000504   0x9002             STR      R0,[SP, #+8]
   \   00000506   0x2000             MOVS     R0,#+0
   \   00000508   0x9001             STR      R0,[SP, #+4]
   \   0000050A   0x2000             MOVS     R0,#+0
   \   0000050C   0x9000             STR      R0,[SP, #+0]
   \   0000050E   0x2302             MOVS     R3,#+2
   \   00000510   0x2200             MOVS     R2,#+0
   \   00000512   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000516   0x2000             MOVS     R0,#+0
   \   00000518   0x.... 0x....      BL       CSP_GPIO_Cfg
    435          #if BOARD_OLD_EN==0  
    436            CSP_GPIO_Cfg(BSP_GPIO_DEV_TYPE_PORT,
    437                         BSP_GPIO_DEV2_TYPE,
    438                         CSP_GPIO_DIR_IN,
    439                         CSP_GPIO_FLAG_MODE_PULLUP,
    440                         DEF_NO,
    441                         0u,
    442                         CSP_GPIO_FNCT_00);
   \   0000051C   0x2000             MOVS     R0,#+0
   \   0000051E   0x9002             STR      R0,[SP, #+8]
   \   00000520   0x2000             MOVS     R0,#+0
   \   00000522   0x9001             STR      R0,[SP, #+4]
   \   00000524   0x2000             MOVS     R0,#+0
   \   00000526   0x9000             STR      R0,[SP, #+0]
   \   00000528   0x2302             MOVS     R3,#+2
   \   0000052A   0x2200             MOVS     R2,#+0
   \   0000052C   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000530   0x2000             MOVS     R0,#+0
   \   00000532   0x.... 0x....      BL       CSP_GPIO_Cfg
    443            CSP_GPIO_Cfg(BSP_GPIO_DEV_TYPE_PORT,
    444                         BSP_GPIO_DEV3_TYPE,
    445                         CSP_GPIO_DIR_IN,
    446                         CSP_GPIO_FLAG_MODE_PULLUP,
    447                         DEF_NO,
    448                         0u,
    449                         CSP_GPIO_FNCT_00);
   \   00000536   0x2000             MOVS     R0,#+0
   \   00000538   0x9002             STR      R0,[SP, #+8]
   \   0000053A   0x2000             MOVS     R0,#+0
   \   0000053C   0x9001             STR      R0,[SP, #+4]
   \   0000053E   0x2000             MOVS     R0,#+0
   \   00000540   0x9000             STR      R0,[SP, #+0]
   \   00000542   0x2302             MOVS     R3,#+2
   \   00000544   0x2200             MOVS     R2,#+0
   \   00000546   0xF05F 0x6180      MOVS     R1,#+67108864
   \   0000054A   0x2000             MOVS     R0,#+0
   \   0000054C   0x.... 0x....      BL       CSP_GPIO_Cfg
    450          #else
    451            CSP_GPIO_Cfg(BSP_GPIO_DEV2_TYPE_PORT,
    452                         BSP_GPIO_DEV2_TYPE,
    453                         CSP_GPIO_DIR_IN,
    454                         CSP_GPIO_FLAG_MODE_PULLUP,
    455                         DEF_NO,
    456                         0u,
    457                         CSP_GPIO_FNCT_00);
    458            CSP_GPIO_Cfg(BSP_GPIO_DEV3_TYPE_PORT,
    459                         BSP_GPIO_DEV3_TYPE,
    460                         CSP_GPIO_DIR_OUT,
    461                         CSP_GPIO_FLAG_MODE_NONE,
    462                         DEF_NO,
    463                         0u,
    464                         CSP_GPIO_FNCT_00);  
    465            CSP_GPIO_BitClr(BSP_GPIO_DEV3_TYPE_PORT,
    466                            BSP_GPIO_DEV3_TYPE);
    467          #endif  
    468          
    469            CSP_GPIO_Cfg(BSP_GPIO_BOX1_SELECT_PORT,
    470                         BSP_GPIO_BOX1_SELECT,
    471                         CSP_GPIO_DIR_OUT,
    472                         CSP_GPIO_FLAG_MODE_NONE,
    473                         DEF_NO,
    474                         0u,
    475                         CSP_GPIO_FNCT_00);
   \   00000550   0x2000             MOVS     R0,#+0
   \   00000552   0x9002             STR      R0,[SP, #+8]
   \   00000554   0x2000             MOVS     R0,#+0
   \   00000556   0x9001             STR      R0,[SP, #+4]
   \   00000558   0x2000             MOVS     R0,#+0
   \   0000055A   0x9000             STR      R0,[SP, #+0]
   \   0000055C   0x2301             MOVS     R3,#+1
   \   0000055E   0x2201             MOVS     R2,#+1
   \   00000560   0xF44F 0x4180      MOV      R1,#+16384
   \   00000564   0x2001             MOVS     R0,#+1
   \   00000566   0x.... 0x....      BL       CSP_GPIO_Cfg
    476            CSP_GPIO_Cfg(BSP_GPIO_BOX2_SELECT_PORT,
    477                         BSP_GPIO_BOX2_SELECT,
    478                         CSP_GPIO_DIR_OUT,
    479                         CSP_GPIO_FLAG_MODE_NONE,
    480                         DEF_NO,
    481                         0u,
    482                         CSP_GPIO_FNCT_00);
   \   0000056A   0x2000             MOVS     R0,#+0
   \   0000056C   0x9002             STR      R0,[SP, #+8]
   \   0000056E   0x2000             MOVS     R0,#+0
   \   00000570   0x9001             STR      R0,[SP, #+4]
   \   00000572   0x2000             MOVS     R0,#+0
   \   00000574   0x9000             STR      R0,[SP, #+0]
   \   00000576   0x2301             MOVS     R3,#+1
   \   00000578   0x2201             MOVS     R2,#+1
   \   0000057A   0xF44F 0x4100      MOV      R1,#+32768
   \   0000057E   0x2001             MOVS     R0,#+1
   \   00000580   0x.... 0x....      BL       CSP_GPIO_Cfg
    483            CSP_GPIO_Cfg(BSP_GPIO_BOX3_SELECT_PORT,
    484                         BSP_GPIO_BOX3_SELECT,
    485                         CSP_GPIO_DIR_OUT,
    486                         CSP_GPIO_FLAG_MODE_NONE,
    487                         DEF_NO,
    488                         0u,
    489                         CSP_GPIO_FNCT_00);
   \   00000584   0x2000             MOVS     R0,#+0
   \   00000586   0x9002             STR      R0,[SP, #+8]
   \   00000588   0x2000             MOVS     R0,#+0
   \   0000058A   0x9001             STR      R0,[SP, #+4]
   \   0000058C   0x2000             MOVS     R0,#+0
   \   0000058E   0x9000             STR      R0,[SP, #+0]
   \   00000590   0x2301             MOVS     R3,#+1
   \   00000592   0x2201             MOVS     R2,#+1
   \   00000594   0xF45F 0x3100      MOVS     R1,#+131072
   \   00000598   0x2001             MOVS     R0,#+1
   \   0000059A   0x.... 0x....      BL       CSP_GPIO_Cfg
    490          
    491            CSP_GPIO_BitClr(BSP_GPIO_BOX1_SELECT_PORT,
    492                            BSP_GPIO_BOX1_SELECT);
   \   0000059E   0xF44F 0x4180      MOV      R1,#+16384
   \   000005A2   0x2001             MOVS     R0,#+1
   \   000005A4   0x.... 0x....      BL       CSP_GPIO_BitClr
    493            CSP_GPIO_BitClr(BSP_GPIO_BOX2_SELECT_PORT,
    494                            BSP_GPIO_BOX2_SELECT);
   \   000005A8   0xF44F 0x4100      MOV      R1,#+32768
   \   000005AC   0x2001             MOVS     R0,#+1
   \   000005AE   0x.... 0x....      BL       CSP_GPIO_BitClr
    495            CSP_GPIO_BitClr(BSP_GPIO_BOX3_SELECT_PORT,
    496                            BSP_GPIO_BOX3_SELECT);
   \   000005B2   0xF45F 0x3100      MOVS     R1,#+131072
   \   000005B6   0x2001             MOVS     R0,#+1
   \   000005B8   0x.... 0x....      BL       CSP_GPIO_BitClr
    497            
    498          
    499            CSP_GPIO_Cfg(BSP_GPIO_SELFTEST_KEY_PORT,
    500                         BSP_GPIO_SELFTEST_KEY,
    501                         CSP_GPIO_DIR_IN,
    502                         CSP_GPIO_FLAG_MODE_PULLUP,
    503                         DEF_NO,
    504                         0u,
    505                         CSP_GPIO_FNCT_00);
   \   000005BC   0x2000             MOVS     R0,#+0
   \   000005BE   0x9002             STR      R0,[SP, #+8]
   \   000005C0   0x2000             MOVS     R0,#+0
   \   000005C2   0x9001             STR      R0,[SP, #+4]
   \   000005C4   0x2000             MOVS     R0,#+0
   \   000005C6   0x9000             STR      R0,[SP, #+0]
   \   000005C8   0x2302             MOVS     R3,#+2
   \   000005CA   0x2200             MOVS     R2,#+0
   \   000005CC   0xF44F 0x6180      MOV      R1,#+1024
   \   000005D0   0x2002             MOVS     R0,#+2
   \   000005D2   0x.... 0x....      BL       CSP_GPIO_Cfg
    506              
    507          }
   \   000005D6   0xBD07             POP      {R0-R2,PC}       ;; return
    508          
    509          /********************************************************************************************************
    510          ** 函数名称: SMotoHook
    511          ** 功能描述:
    512          ** 输 　 入:
    513          **
    514          ** 输　  出:
    515          **
    516          ** 全局变量:
    517          ** 调用模块:
    518          **
    519          ** 作　  者: John Tonny
    520          ** 日　  期: 2005年05月01日
    521          **------------------------------------------------------------------------------------------------------
    522          ** 修 改 人:
    523          ** 日　  期:
    524          **------------------------------------------------------------------------------------------------------
    525          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    526          void SMotoHook(void)
    527          {
   \                     SMotoHook: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    528            INT8U i;
    529          
    530            for(i=0;i<CARDMACHINE_SMOTO_NUMS;i++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??SMotoHook_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xDA36             BGE.N    ??SMotoHook_1
    531              if(g_usrSMoto[i].ucEnabled){
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x210A             MOVS     R1,#+10
   \   00000014   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000018   0x4408             ADD      R0,R0,R1
   \   0000001A   0x7980             LDRB     R0,[R0, #+6]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD025             BEQ.N    ??SMotoHook_2
    532                if(g_usrSMoto[i].uiCounts>0){
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x210A             MOVS     R1,#+10
   \   00000028   0xFB01 0xF104      MUL      R1,R1,R4
   \   0000002C   0x4408             ADD      R0,R0,R1
   \   0000002E   0x8840             LDRH     R0,[R0, #+2]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD015             BEQ.N    ??SMotoHook_3
    533                  MOTO_STEP_CLK(i);
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       MOTO_STEP_CLK
    534                  g_usrSMoto[i].uiCounts--;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x210A             MOVS     R1,#+10
   \   00000044   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000048   0x4408             ADD      R0,R0,R1
   \   0000004A   0x8840             LDRH     R0,[R0, #+2]
   \   0000004C   0x1E40             SUBS     R0,R0,#+1
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x220A             MOVS     R2,#+10
   \   00000056   0xFB02 0xF204      MUL      R2,R2,R4
   \   0000005A   0x4411             ADD      R1,R1,R2
   \   0000005C   0x8048             STRH     R0,[R1, #+2]
   \   0000005E   0xE00A             B.N      ??SMotoHook_4
    535                }else{
    536                  MOTO_STEP_DISABLED(i,INTERRUPT_MODE); 
   \                     ??SMotoHook_3: (+1)
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       MOTO_STEP_DISABLED
   \   0000006A   0xE004             B.N      ??SMotoHook_4
    537                }      
    538              }else{
    539                MOTO_STEP_DISABLED(i,INTERRUPT_MODE); 
   \                     ??SMotoHook_2: (+1)
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x.... 0x....      BL       MOTO_STEP_DISABLED
    540              }
    541            }
   \                     ??SMotoHook_4: (+1)
   \   00000076   0x1C64             ADDS     R4,R4,#+1
   \   00000078   0xE7C5             B.N      ??SMotoHook_0
    542          }
   \                     ??SMotoHook_1: (+1)
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return
    543          
    544          /********************************************************************************************************
    545          ** 函数名称: DMotoHook
    546          ** 功能描述:
    547          ** 输 　 入:
    548          **
    549          ** 输　  出:
    550          **
    551          ** 全局变量:
    552          ** 调用模块:
    553          **
    554          ** 作　  者: John Tonny
    555          ** 日　  期: 2005年05月01日
    556          **------------------------------------------------------------------------------------------------------
    557          ** 修 改 人:
    558          ** 日　  期:
    559          **------------------------------------------------------------------------------------------------------
    560          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    561          void DMotoHook(void)
    562          {
   \                     DMotoHook: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    563            INT8U i;
    564            for(i=0;i<CARDMACHINE_DMOTO_NUMS;i++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??DMotoHook_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xDA21             BGE.N    ??DMotoHook_1
    565              if(g_usrDMoto[i].ucEnabled){
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x210A             MOVS     R1,#+10
   \   00000014   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000018   0x4408             ADD      R0,R0,R1
   \   0000001A   0x7980             LDRB     R0,[R0, #+6]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD015             BEQ.N    ??DMotoHook_2
    566                if(g_usrDMoto[i].uiFreq!=g_usrDMoto[i].uiPwm){
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x210A             MOVS     R1,#+10
   \   00000028   0xFB01 0xF104      MUL      R1,R1,R4
   \   0000002C   0x4408             ADD      R0,R0,R1
   \   0000002E   0x8840             LDRH     R0,[R0, #+2]
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x220A             MOVS     R2,#+10
   \   00000038   0xFB02 0xF204      MUL      R2,R2,R4
   \   0000003C   0x4411             ADD      R1,R1,R2
   \   0000003E   0x8889             LDRH     R1,[R1, #+4]
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD003             BEQ.N    ??DMotoHook_2
    567                  MOTO_DC_CLK(i);
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       MOTO_DC_CLK
    568                }
    569              }
    570            }
   \                     ??DMotoHook_2: (+1)
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \   0000004E   0xE7DA             B.N      ??DMotoHook_0
    571          }
   \                     ??DMotoHook_1: (+1)
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
    572          
    573          /********************************************************************************************************
    574          ** 函数名称: MOTO_DC_FORWARD
    575          ** 功能描述:
    576          ** 输 　 入:
    577          **
    578          ** 输　  出:
    579          **
    580          ** 全局变量:
    581          ** 调用模块:
    582          **
    583          ** 作　  者: John Tonny
    584          ** 日　  期: 2005年05月01日
    585          **------------------------------------------------------------------------------------------------------
    586          ** 修 改 人:
    587          ** 日　  期:
    588          **------------------------------------------------------------------------------------------------------
    589          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    590          void MOTO_DC_FORWARD(INT8U ucSelected)
    591          {
   \                     MOTO_DC_FORWARD: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    592            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD005             BEQ.N    ??MOTO_DC_FORWARD_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD019             BEQ.N    ??MOTO_DC_FORWARD_1
   \   0000000E   0xD30D             BCC.N    ??MOTO_DC_FORWARD_2
   \   00000010   0x2C03             CMP      R4,#+3
   \   00000012   0xD021             BEQ.N    ??MOTO_DC_FORWARD_3
   \   00000014   0xE02A             B.N      ??MOTO_DC_FORWARD_4
    593              case 0:
    594                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN1_PORT,BSP_GPIO_DMOTO1_EN1);
   \                     ??MOTO_DC_FORWARD_0: (+1)
   \   00000016   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       CSP_GPIO_BitSet
    595                CSP_GPIO_BitClr(BSP_GPIO_DMOTO1_EN2_PORT,BSP_GPIO_DMOTO1_EN2);
   \   00000020   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       CSP_GPIO_BitClr
    596                break;
   \   0000002A   0xE01F             B.N      ??MOTO_DC_FORWARD_4
    597              case 1:
    598                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN1_PORT,BSP_GPIO_DMOTO2_EN1);
   \                     ??MOTO_DC_FORWARD_2: (+1)
   \   0000002C   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       CSP_GPIO_BitSet
    599                CSP_GPIO_BitClr(BSP_GPIO_DMOTO2_EN2_PORT,BSP_GPIO_DMOTO2_EN2);
   \   00000036   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       CSP_GPIO_BitClr
    600                break;
   \   00000040   0xE014             B.N      ??MOTO_DC_FORWARD_4
    601              case 2:
    602                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN1_PORT,BSP_GPIO_DMOTO3_EN1);
   \                     ??MOTO_DC_FORWARD_1: (+1)
   \   00000042   0xF45F 0x0180      MOVS     R1,#+4194304
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       CSP_GPIO_BitSet
    603                CSP_GPIO_BitClr(BSP_GPIO_DMOTO3_EN2_PORT,BSP_GPIO_DMOTO3_EN2);
   \   0000004C   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       CSP_GPIO_BitClr
    604                break;
   \   00000056   0xE009             B.N      ??MOTO_DC_FORWARD_4
    605              case 3:
    606                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN1_PORT,BSP_GPIO_DMOTO4_EN1);
   \                     ??MOTO_DC_FORWARD_3: (+1)
   \   00000058   0xF05F 0x7100      MOVS     R1,#+33554432
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      BL       CSP_GPIO_BitSet
    607                CSP_GPIO_BitClr(BSP_GPIO_DMOTO4_EN2_PORT,BSP_GPIO_DMOTO4_EN2);
   \   00000062   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       CSP_GPIO_BitClr
    608                break;
    609            }
    610          }
   \                     ??MOTO_DC_FORWARD_4: (+1)
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
    611          
    612          /********************************************************************************************************
    613          ** 函数名称: MOTO_DC_BACKWARD
    614          ** 功能描述:
    615          ** 输 　 入:
    616          **
    617          ** 输　  出:
    618          **
    619          ** 全局变量:
    620          ** 调用模块:
    621          **
    622          ** 作　  者: John Tonny
    623          ** 日　  期: 2005年05月01日
    624          **------------------------------------------------------------------------------------------------------
    625          ** 修 改 人:
    626          ** 日　  期:
    627          **------------------------------------------------------------------------------------------------------
    628          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    629          void MOTO_DC_BACKWARD(INT8U ucSelected)
    630          {
   \                     MOTO_DC_BACKWARD: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    631            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD005             BEQ.N    ??MOTO_DC_BACKWARD_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD019             BEQ.N    ??MOTO_DC_BACKWARD_1
   \   0000000E   0xD30D             BCC.N    ??MOTO_DC_BACKWARD_2
   \   00000010   0x2C03             CMP      R4,#+3
   \   00000012   0xD021             BEQ.N    ??MOTO_DC_BACKWARD_3
   \   00000014   0xE02A             B.N      ??MOTO_DC_BACKWARD_4
    632              case 0:
    633                CSP_GPIO_BitClr(BSP_GPIO_DMOTO1_EN1_PORT,BSP_GPIO_DMOTO1_EN1);
   \                     ??MOTO_DC_BACKWARD_0: (+1)
   \   00000016   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       CSP_GPIO_BitClr
    634                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN2_PORT,BSP_GPIO_DMOTO1_EN2);
   \   00000020   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       CSP_GPIO_BitSet
    635                break;
   \   0000002A   0xE01F             B.N      ??MOTO_DC_BACKWARD_4
    636              case 1:
    637                CSP_GPIO_BitClr(BSP_GPIO_DMOTO2_EN1_PORT,BSP_GPIO_DMOTO2_EN1);
   \                     ??MOTO_DC_BACKWARD_2: (+1)
   \   0000002C   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       CSP_GPIO_BitClr
    638                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN2_PORT,BSP_GPIO_DMOTO2_EN2);
   \   00000036   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       CSP_GPIO_BitSet
    639                break;
   \   00000040   0xE014             B.N      ??MOTO_DC_BACKWARD_4
    640              case 2:
    641                CSP_GPIO_BitClr(BSP_GPIO_DMOTO3_EN1_PORT,BSP_GPIO_DMOTO3_EN1);
   \                     ??MOTO_DC_BACKWARD_1: (+1)
   \   00000042   0xF45F 0x0180      MOVS     R1,#+4194304
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       CSP_GPIO_BitClr
    642                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN2_PORT,BSP_GPIO_DMOTO3_EN2);
   \   0000004C   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       CSP_GPIO_BitSet
    643                break;
   \   00000056   0xE009             B.N      ??MOTO_DC_BACKWARD_4
    644              case 3:
    645                CSP_GPIO_BitClr(BSP_GPIO_DMOTO4_EN1_PORT,BSP_GPIO_DMOTO4_EN1);
   \                     ??MOTO_DC_BACKWARD_3: (+1)
   \   00000058   0xF05F 0x7100      MOVS     R1,#+33554432
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      BL       CSP_GPIO_BitClr
    646                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN2_PORT,BSP_GPIO_DMOTO4_EN2);
   \   00000062   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       CSP_GPIO_BitSet
    647                break;
    648            }
    649          }
   \                     ??MOTO_DC_BACKWARD_4: (+1)
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
    650          
    651          /********************************************************************************************************
    652          ** 函数名称: MOTO_DC_DISABLED
    653          ** 功能描述:
    654          ** 输 　 入:
    655          **
    656          ** 输　  出:
    657          **
    658          ** 全局变量:
    659          ** 调用模块:
    660          **
    661          ** 作　  者: John Tonny
    662          ** 日　  期: 2005年05月01日
    663          **------------------------------------------------------------------------------------------------------
    664          ** 修 改 人:
    665          ** 日　  期:
    666          **------------------------------------------------------------------------------------------------------
    667          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    668          void MOTO_DC_DISABLED(INT8U ucSelected,INT8U ucMode)
    669          {
   \                     MOTO_DC_DISABLED: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    670            INT8U i;
    671            INT8U ucEnabled;
    672          
    673            CPU_SR_ALLOC();
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    674          
    675            if(ucSelected>=CARDMACHINE_DMOTO_NUMS){
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xF280 0x80BF      BGE.W    ??MOTO_DC_DISABLED_0
    676              return;
    677            }
    678          
    679            if(ucMode){
   \                     ??MOTO_DC_DISABLED_1: (+1)
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD02A             BEQ.N    ??MOTO_DC_DISABLED_2
    680              g_usrDMoto[ucSelected].ucEnabled=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x220A             MOVS     R2,#+10
   \   00000024   0xFB02 0xF204      MUL      R2,R2,R4
   \   00000028   0x4411             ADD      R1,R1,R2
   \   0000002A   0x7188             STRB     R0,[R1, #+6]
    681              ucEnabled=0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x0007             MOVS     R7,R0
    682              for(i=0;i<CARDMACHINE_DMOTO_NUMS;i++){
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0006             MOVS     R6,R0
   \                     ??MOTO_DC_DISABLED_3: (+1)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E04             CMP      R6,#+4
   \   00000038   0xDA0E             BGE.N    ??MOTO_DC_DISABLED_4
    683                if(g_usrDMoto[i].ucEnabled){
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0x210A             MOVS     R1,#+10
   \   00000042   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000046   0x4408             ADD      R0,R0,R1
   \   00000048   0x7980             LDRB     R0,[R0, #+6]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD002             BEQ.N    ??MOTO_DC_DISABLED_5
    684                  ucEnabled=1;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x0007             MOVS     R7,R0
    685                  break;
   \   00000052   0xE001             B.N      ??MOTO_DC_DISABLED_4
    686                }
    687              }
   \                     ??MOTO_DC_DISABLED_5: (+1)
   \   00000054   0x1C76             ADDS     R6,R6,#+1
   \   00000056   0xE7ED             B.N      ??MOTO_DC_DISABLED_3
    688              if(!ucEnabled){
   \                     ??MOTO_DC_DISABLED_4: (+1)
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x2F00             CMP      R7,#+0
   \   0000005C   0xD13C             BNE.N    ??MOTO_DC_DISABLED_6
    689                DMOTO_DISABLED();
   \   0000005E   0x20FF             MOVS     R0,#+255
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable13  ;; 0x40018000
   \   00000064   0x6008             STR      R0,[R1, #+0]
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable14  ;; 0x40018004
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0xE033             B.N      ??MOTO_DC_DISABLED_6
    690              }
    691            }else{
    692              OS_ENTER_CRITICAL();
   \                     ??MOTO_DC_DISABLED_2: (+1)
   \   00000070   0x.... 0x....      BL       CPU_SR_Save
   \   00000074   0x4680             MOV      R8,R0
   \   00000076   0x.... 0x....      BL       CPU_IntDisMeasStart
    693              g_usrDMoto[ucSelected].ucEnabled=0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x220A             MOVS     R2,#+10
   \   00000084   0xFB02 0xF204      MUL      R2,R2,R4
   \   00000088   0x4411             ADD      R1,R1,R2
   \   0000008A   0x7188             STRB     R0,[R1, #+6]
    694              ucEnabled=0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x0007             MOVS     R7,R0
    695              for(i=0;i<CARDMACHINE_DMOTO_NUMS;i++){
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x0006             MOVS     R6,R0
   \                     ??MOTO_DC_DISABLED_7: (+1)
   \   00000094   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000096   0x2E04             CMP      R6,#+4
   \   00000098   0xDA0E             BGE.N    ??MOTO_DC_DISABLED_8
    696                if(g_usrDMoto[i].ucEnabled){
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0x210A             MOVS     R1,#+10
   \   000000A2   0xFB01 0xF106      MUL      R1,R1,R6
   \   000000A6   0x4408             ADD      R0,R0,R1
   \   000000A8   0x7980             LDRB     R0,[R0, #+6]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD002             BEQ.N    ??MOTO_DC_DISABLED_9
    697                  ucEnabled=1;
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x0007             MOVS     R7,R0
    698                  break;
   \   000000B2   0xE001             B.N      ??MOTO_DC_DISABLED_8
    699                }
    700              }
   \                     ??MOTO_DC_DISABLED_9: (+1)
   \   000000B4   0x1C76             ADDS     R6,R6,#+1
   \   000000B6   0xE7ED             B.N      ??MOTO_DC_DISABLED_7
    701              if(!ucEnabled){
   \                     ??MOTO_DC_DISABLED_8: (+1)
   \   000000B8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BA   0x2F00             CMP      R7,#+0
   \   000000BC   0xD107             BNE.N    ??MOTO_DC_DISABLED_10
    702                DMOTO_DISABLED();
   \   000000BE   0x20FF             MOVS     R0,#+255
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable13  ;; 0x40018000
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable14  ;; 0x40018004
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    703              }
    704              OS_EXIT_CRITICAL();
   \                     ??MOTO_DC_DISABLED_10: (+1)
   \   000000CE   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000D2   0x4640             MOV      R0,R8
   \   000000D4   0x.... 0x....      BL       CPU_SR_Restore
    705            }
    706          
    707          
    708            switch(ucSelected){
   \                     ??MOTO_DC_DISABLED_6: (+1)
   \   000000D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DA   0x2C00             CMP      R4,#+0
   \   000000DC   0xD005             BEQ.N    ??MOTO_DC_DISABLED_11
   \   000000DE   0x2C02             CMP      R4,#+2
   \   000000E0   0xD019             BEQ.N    ??MOTO_DC_DISABLED_12
   \   000000E2   0xD30D             BCC.N    ??MOTO_DC_DISABLED_13
   \   000000E4   0x2C03             CMP      R4,#+3
   \   000000E6   0xD021             BEQ.N    ??MOTO_DC_DISABLED_14
   \   000000E8   0xE02B             B.N      ??MOTO_DC_DISABLED_15
    709              case 0:
    710                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN1_PORT,BSP_GPIO_DMOTO1_EN1);
   \                     ??MOTO_DC_DISABLED_11: (+1)
   \   000000EA   0xF45F 0x2180      MOVS     R1,#+262144
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x.... 0x....      BL       CSP_GPIO_BitSet
    711                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN2_PORT,BSP_GPIO_DMOTO1_EN2);
   \   000000F4   0xF45F 0x2100      MOVS     R1,#+524288
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x.... 0x....      BL       CSP_GPIO_BitSet
    712                break;
   \   000000FE   0xE048             B.N      ??MOTO_DC_DISABLED_16
    713              case 1:
    714                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN1_PORT,BSP_GPIO_DMOTO2_EN1);
   \                     ??MOTO_DC_DISABLED_13: (+1)
   \   00000100   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000104   0x2001             MOVS     R0,#+1
   \   00000106   0x.... 0x....      BL       CSP_GPIO_BitSet
    715                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN2_PORT,BSP_GPIO_DMOTO2_EN2);
   \   0000010A   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000010E   0x2001             MOVS     R0,#+1
   \   00000110   0x.... 0x....      BL       CSP_GPIO_BitSet
    716                break;
   \   00000114   0xE03D             B.N      ??MOTO_DC_DISABLED_16
    717              case 2:
    718                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN1_PORT,BSP_GPIO_DMOTO3_EN1);
   \                     ??MOTO_DC_DISABLED_12: (+1)
   \   00000116   0xF45F 0x0180      MOVS     R1,#+4194304
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0x.... 0x....      BL       CSP_GPIO_BitSet
    719                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN2_PORT,BSP_GPIO_DMOTO3_EN2);
   \   00000120   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x.... 0x....      BL       CSP_GPIO_BitSet
    720                break;
   \   0000012A   0xE032             B.N      ??MOTO_DC_DISABLED_16
    721              case 3:
    722                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN1_PORT,BSP_GPIO_DMOTO4_EN1);
   \                     ??MOTO_DC_DISABLED_14: (+1)
   \   0000012C   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0x.... 0x....      BL       CSP_GPIO_BitSet
    723                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN2_PORT,BSP_GPIO_DMOTO4_EN2);
   \   00000136   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000013A   0x2001             MOVS     R0,#+1
   \   0000013C   0x.... 0x....      BL       CSP_GPIO_BitSet
    724                break;
   \   00000140   0xE027             B.N      ??MOTO_DC_DISABLED_16
    725              default:
    726                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN1_PORT,BSP_GPIO_DMOTO1_EN1);
   \                     ??MOTO_DC_DISABLED_15: (+1)
   \   00000142   0xF45F 0x2180      MOVS     R1,#+262144
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0x.... 0x....      BL       CSP_GPIO_BitSet
    727                CSP_GPIO_BitSet(BSP_GPIO_DMOTO1_EN2_PORT,BSP_GPIO_DMOTO1_EN2);
   \   0000014C   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x.... 0x....      BL       CSP_GPIO_BitSet
    728                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN1_PORT,BSP_GPIO_DMOTO2_EN1);
   \   00000156   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000015A   0x2001             MOVS     R0,#+1
   \   0000015C   0x.... 0x....      BL       CSP_GPIO_BitSet
    729                CSP_GPIO_BitSet(BSP_GPIO_DMOTO2_EN2_PORT,BSP_GPIO_DMOTO2_EN2);
   \   00000160   0xF45F 0x1180      MOVS     R1,#+1048576
   \   00000164   0x2001             MOVS     R0,#+1
   \   00000166   0x.... 0x....      BL       CSP_GPIO_BitSet
    730                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN1_PORT,BSP_GPIO_DMOTO3_EN1);
   \   0000016A   0xF45F 0x0180      MOVS     R1,#+4194304
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x.... 0x....      BL       CSP_GPIO_BitSet
    731                CSP_GPIO_BitSet(BSP_GPIO_DMOTO3_EN2_PORT,BSP_GPIO_DMOTO3_EN2);
   \   00000174   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000178   0x2001             MOVS     R0,#+1
   \   0000017A   0x.... 0x....      BL       CSP_GPIO_BitSet
    732                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN1_PORT,BSP_GPIO_DMOTO4_EN1);
   \   0000017E   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x.... 0x....      BL       CSP_GPIO_BitSet
    733                CSP_GPIO_BitSet(BSP_GPIO_DMOTO4_EN2_PORT,BSP_GPIO_DMOTO4_EN2);
   \   00000188   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000018C   0x2001             MOVS     R0,#+1
   \   0000018E   0x.... 0x....      BL       CSP_GPIO_BitSet
    734                break;
    735            }
    736          }
   \                     ??MOTO_DC_DISABLED_16: (+1)
   \                     ??MOTO_DC_DISABLED_0: (+1)
   \   00000192   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    737          
    738          /********************************************************************************************************
    739          ** 函数名称: MOTO_DC_CLK
    740          ** 功能描述:
    741          ** 输 　 入:
    742          **
    743          ** 输　  出:
    744          **
    745          ** 全局变量:
    746          ** 调用模块:
    747          **
    748          ** 作　  者: John Tonny
    749          ** 日　  期: 2005年05月01日
    750          **------------------------------------------------------------------------------------------------------
    751          ** 修 改 人:
    752          ** 日　  期:
    753          **------------------------------------------------------------------------------------------------------
    754          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    755          void MOTO_DC_CLK(INT8U ucSelected)
    756          {
   \                     MOTO_DC_CLK: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    757            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD005             BEQ.N    ??MOTO_DC_CLK_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD00F             BEQ.N    ??MOTO_DC_CLK_1
   \   0000000E   0xD308             BCC.N    ??MOTO_DC_CLK_2
   \   00000010   0x2C03             CMP      R4,#+3
   \   00000012   0xD012             BEQ.N    ??MOTO_DC_CLK_3
   \   00000014   0xE016             B.N      ??MOTO_DC_CLK_4
    758              case 0:
    759                CSP_GPIO_BitToggle(BSP_GPIO_DMOTO1_EN1_PORT,BSP_GPIO_DMOTO1_EN1);
   \                     ??MOTO_DC_CLK_0: (+1)
   \   00000016   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       CSP_GPIO_BitToggle
    760                break;
   \   00000020   0xE010             B.N      ??MOTO_DC_CLK_4
    761              case 1:
    762                CSP_GPIO_BitToggle(BSP_GPIO_DMOTO2_EN1_PORT,BSP_GPIO_DMOTO2_EN1);
   \                     ??MOTO_DC_CLK_2: (+1)
   \   00000022   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       CSP_GPIO_BitToggle
    763                break;
   \   0000002C   0xE00A             B.N      ??MOTO_DC_CLK_4
    764              case 2:
    765                CSP_GPIO_BitToggle(BSP_GPIO_DMOTO3_EN1_PORT,BSP_GPIO_DMOTO3_EN1);
   \                     ??MOTO_DC_CLK_1: (+1)
   \   0000002E   0xF45F 0x0180      MOVS     R1,#+4194304
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       CSP_GPIO_BitToggle
    766                break;
   \   00000038   0xE004             B.N      ??MOTO_DC_CLK_4
    767              case 3:
    768                CSP_GPIO_BitToggle(BSP_GPIO_DMOTO4_EN1_PORT,BSP_GPIO_DMOTO4_EN1);
   \                     ??MOTO_DC_CLK_3: (+1)
   \   0000003A   0xF05F 0x7100      MOVS     R1,#+33554432
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       CSP_GPIO_BitToggle
    769                break;
    770            }
    771          }
   \                     ??MOTO_DC_CLK_4: (+1)
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    772          
    773          /********************************************************************************************************
    774          ** 函数名称: MOTO_STEP_FORWARD
    775          ** 功能描述:
    776          ** 输 　 入:
    777          **
    778          ** 输　  出:
    779          **
    780          ** 全局变量:
    781          ** 调用模块:
    782          **
    783          ** 作　  者: John Tonny
    784          ** 日　  期: 2005年05月01日
    785          **------------------------------------------------------------------------------------------------------
    786          ** 修 改 人:
    787          ** 日　  期:
    788          **------------------------------------------------------------------------------------------------------
    789          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    790          void MOTO_STEP_FORWARD(INT8U ucSelected)
    791          {
   \                     MOTO_STEP_FORWARD: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    792            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??MOTO_STEP_FORWARD_0
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD006             BEQ.N    ??MOTO_STEP_FORWARD_1
   \   0000000E   0xE00A             B.N      ??MOTO_STEP_FORWARD_2
    793              case 0:
    794                CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_CC_PORT,BSP_GPIO_SMOTO1_CC);
   \                     ??MOTO_STEP_FORWARD_0: (+1)
   \   00000010   0xF05F 0x6100      MOVS     R1,#+134217728
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       CSP_GPIO_BitSet
    795                break;
   \   0000001A   0xE004             B.N      ??MOTO_STEP_FORWARD_2
    796              case 1:
    797                CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_CC_PORT,BSP_GPIO_SMOTO2_CC);
   \                     ??MOTO_STEP_FORWARD_1: (+1)
   \   0000001C   0xF05F 0x6180      MOVS     R1,#+67108864
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       CSP_GPIO_BitSet
    798                break;
    799            }
    800          }
   \                     ??MOTO_STEP_FORWARD_2: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    801          
    802          /********************************************************************************************************
    803          ** 函数名称: MOTO_STEP_BACKWARD
    804          ** 功能描述:
    805          ** 输 　 入:
    806          **
    807          ** 输　  出:
    808          **
    809          ** 全局变量:
    810          ** 调用模块:
    811          **
    812          ** 作　  者: John Tonny
    813          ** 日　  期: 2005年05月01日
    814          **------------------------------------------------------------------------------------------------------
    815          ** 修 改 人:
    816          ** 日　  期:
    817          **------------------------------------------------------------------------------------------------------
    818          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    819          void MOTO_STEP_BACKWARD(INT8U ucSelected)
    820          {
   \                     MOTO_STEP_BACKWARD: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    821            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??MOTO_STEP_BACKWARD_0
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD006             BEQ.N    ??MOTO_STEP_BACKWARD_1
   \   0000000E   0xE00A             B.N      ??MOTO_STEP_BACKWARD_2
    822              case 0:
    823                CSP_GPIO_BitClr(BSP_GPIO_SMOTO1_CC_PORT,BSP_GPIO_SMOTO1_CC);
   \                     ??MOTO_STEP_BACKWARD_0: (+1)
   \   00000010   0xF05F 0x6100      MOVS     R1,#+134217728
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       CSP_GPIO_BitClr
    824                break;
   \   0000001A   0xE004             B.N      ??MOTO_STEP_BACKWARD_2
    825              case 1:
    826                CSP_GPIO_BitClr(BSP_GPIO_SMOTO2_CC_PORT,BSP_GPIO_SMOTO2_CC);
   \                     ??MOTO_STEP_BACKWARD_1: (+1)
   \   0000001C   0xF05F 0x6180      MOVS     R1,#+67108864
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       CSP_GPIO_BitClr
    827                break;
    828            }
    829          }
   \                     ??MOTO_STEP_BACKWARD_2: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    830          
    831          /********************************************************************************************************
    832          ** 函数名称: MOTO_STEP_ENABLED
    833          ** 功能描述:
    834          ** 输 　 入:
    835          **
    836          ** 输　  出:
    837          **
    838          ** 全局变量:
    839          ** 调用模块:
    840          **
    841          ** 作　  者: John Tonny
    842          ** 日　  期: 2005年05月01日
    843          **------------------------------------------------------------------------------------------------------
    844          ** 修 改 人:
    845          ** 日　  期:
    846          **------------------------------------------------------------------------------------------------------
    847          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    848          void MOTO_STEP_ENABLED(INT8U ucSelected)
    849          {
   \                     MOTO_STEP_ENABLED: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    850            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??MOTO_STEP_ENABLED_0
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD006             BEQ.N    ??MOTO_STEP_ENABLED_1
   \   0000000E   0xE00A             B.N      ??MOTO_STEP_ENABLED_2
    851              case 0:
    852                CSP_GPIO_BitClr(BSP_GPIO_SMOTO1_EN_PORT,BSP_GPIO_SMOTO1_EN);
   \                     ??MOTO_STEP_ENABLED_0: (+1)
   \   00000010   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       CSP_GPIO_BitClr
    853                break;
   \   0000001A   0xE004             B.N      ??MOTO_STEP_ENABLED_2
    854              case 1:
    855                CSP_GPIO_BitClr(BSP_GPIO_SMOTO2_EN_PORT,BSP_GPIO_SMOTO2_EN);
   \                     ??MOTO_STEP_ENABLED_1: (+1)
   \   0000001C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       CSP_GPIO_BitClr
    856                break;
    857            }
    858            SMOTO_ENABLED();
   \                     ??MOTO_STEP_ENABLED_2: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x40008004
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    859          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    860          
    861          /********************************************************************************************************
    862          ** 函数名称: MOTO_STEP_DISABLED
    863          ** 功能描述:
    864          ** 输 　 入:
    865          **
    866          ** 输　  出:
    867          **
    868          ** 全局变量:
    869          ** 调用模块:
    870          **
    871          ** 作　  者: John Tonny
    872          ** 日　  期: 2005年05月01日
    873          **------------------------------------------------------------------------------------------------------
    874          ** 修 改 人:
    875          ** 日　  期:
    876          **------------------------------------------------------------------------------------------------------
    877          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    878          void MOTO_STEP_DISABLED(INT8U ucSelected,INT8U ucMode)
    879          {
   \                     MOTO_STEP_DISABLED: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    880            INT8U i;
    881            INT8U ucEnabled;
    882          
    883            CPU_SR_ALLOC();
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    884            if(ucSelected>=CARDMACHINE_SMOTO_NUMS){
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C02             CMP      R4,#+2
   \   00000010   0xDA75             BGE.N    ??MOTO_STEP_DISABLED_0
    885              return;
    886            }
    887          
    888            if(ucMode){
   \                     ??MOTO_STEP_DISABLED_1: (+1)
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD026             BEQ.N    ??MOTO_STEP_DISABLED_2
    889              g_usrSMoto[ucSelected].ucEnabled=0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable11
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x220A             MOVS     R2,#+10
   \   00000022   0xFB02 0xF204      MUL      R2,R2,R4
   \   00000026   0x4411             ADD      R1,R1,R2
   \   00000028   0x7188             STRB     R0,[R1, #+6]
    890              ucEnabled=0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0007             MOVS     R7,R0
    891              for(i=0;i<CARDMACHINE_SMOTO_NUMS;i++){
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x0006             MOVS     R6,R0
   \                     ??MOTO_STEP_DISABLED_3: (+1)
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0x2E02             CMP      R6,#+2
   \   00000036   0xDA0E             BGE.N    ??MOTO_STEP_DISABLED_4
    892                if(g_usrSMoto[i].ucEnabled){
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x210A             MOVS     R1,#+10
   \   00000040   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000044   0x4408             ADD      R0,R0,R1
   \   00000046   0x7980             LDRB     R0,[R0, #+6]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD002             BEQ.N    ??MOTO_STEP_DISABLED_5
    893                  ucEnabled=1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x0007             MOVS     R7,R0
    894                  break;
   \   00000050   0xE001             B.N      ??MOTO_STEP_DISABLED_4
    895                }
    896              }
   \                     ??MOTO_STEP_DISABLED_5: (+1)
   \   00000052   0x1C76             ADDS     R6,R6,#+1
   \   00000054   0xE7ED             B.N      ??MOTO_STEP_DISABLED_3
    897              if(!ucEnabled){
   \                     ??MOTO_STEP_DISABLED_4: (+1)
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xD134             BNE.N    ??MOTO_STEP_DISABLED_6
    898                SMOTO_DISABLED();
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x40008004
   \   00000062   0x6008             STR      R0,[R1, #+0]
   \   00000064   0xE02F             B.N      ??MOTO_STEP_DISABLED_6
    899              }		
    900            }else{
    901              OS_ENTER_CRITICAL();
   \                     ??MOTO_STEP_DISABLED_2: (+1)
   \   00000066   0x.... 0x....      BL       CPU_SR_Save
   \   0000006A   0x4680             MOV      R8,R0
   \   0000006C   0x.... 0x....      BL       CPU_IntDisMeasStart
    902              g_usrSMoto[ucSelected].ucEnabled=0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x220A             MOVS     R2,#+10
   \   0000007A   0xFB02 0xF204      MUL      R2,R2,R4
   \   0000007E   0x4411             ADD      R1,R1,R2
   \   00000080   0x7188             STRB     R0,[R1, #+6]
    903              ucEnabled=0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x0007             MOVS     R7,R0
    904              for(i=0;i<CARDMACHINE_SMOTO_NUMS;i++){
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x0006             MOVS     R6,R0
   \                     ??MOTO_STEP_DISABLED_7: (+1)
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x2E02             CMP      R6,#+2
   \   0000008E   0xDA0E             BGE.N    ??MOTO_STEP_DISABLED_8
    905                if(g_usrSMoto[i].ucEnabled){
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000094   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000096   0x210A             MOVS     R1,#+10
   \   00000098   0xFB01 0xF106      MUL      R1,R1,R6
   \   0000009C   0x4408             ADD      R0,R0,R1
   \   0000009E   0x7980             LDRB     R0,[R0, #+6]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD002             BEQ.N    ??MOTO_STEP_DISABLED_9
    906                  ucEnabled=1;
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x0007             MOVS     R7,R0
    907                  break;
   \   000000A8   0xE001             B.N      ??MOTO_STEP_DISABLED_8
    908                }
    909              }
   \                     ??MOTO_STEP_DISABLED_9: (+1)
   \   000000AA   0x1C76             ADDS     R6,R6,#+1
   \   000000AC   0xE7ED             B.N      ??MOTO_STEP_DISABLED_7
    910              if(!ucEnabled){
   \                     ??MOTO_STEP_DISABLED_8: (+1)
   \   000000AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B0   0x2F00             CMP      R7,#+0
   \   000000B2   0xD103             BNE.N    ??MOTO_STEP_DISABLED_10
    911                SMOTO_DISABLED();
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x40008004
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    912              }		
    913              OS_EXIT_CRITICAL();
   \                     ??MOTO_STEP_DISABLED_10: (+1)
   \   000000BC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000C0   0x4640             MOV      R0,R8
   \   000000C2   0x.... 0x....      BL       CPU_SR_Restore
    914            }
    915            switch(ucSelected){
   \                     ??MOTO_STEP_DISABLED_6: (+1)
   \   000000C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C8   0x2C00             CMP      R4,#+0
   \   000000CA   0xD002             BEQ.N    ??MOTO_STEP_DISABLED_11
   \   000000CC   0x2C01             CMP      R4,#+1
   \   000000CE   0xD006             BEQ.N    ??MOTO_STEP_DISABLED_12
   \   000000D0   0xE00B             B.N      ??MOTO_STEP_DISABLED_13
    916            case 0:
    917              CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_EN_PORT,BSP_GPIO_SMOTO1_EN);
   \                     ??MOTO_STEP_DISABLED_11: (+1)
   \   000000D2   0xF05F 0x7100      MOVS     R1,#+33554432
   \   000000D6   0x2003             MOVS     R0,#+3
   \   000000D8   0x.... 0x....      BL       CSP_GPIO_BitSet
    918              break;
   \   000000DC   0xE00F             B.N      ??MOTO_STEP_DISABLED_14
    919            case 1:
    920              CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_EN_PORT,BSP_GPIO_SMOTO2_EN);
   \                     ??MOTO_STEP_DISABLED_12: (+1)
   \   000000DE   0xF44F 0x6180      MOV      R1,#+1024
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x.... 0x....      BL       CSP_GPIO_BitSet
    921              break;
   \   000000E8   0xE009             B.N      ??MOTO_STEP_DISABLED_14
    922            default:
    923              CSP_GPIO_BitSet(BSP_GPIO_SMOTO1_EN_PORT,BSP_GPIO_SMOTO1_EN);
   \                     ??MOTO_STEP_DISABLED_13: (+1)
   \   000000EA   0xF05F 0x7100      MOVS     R1,#+33554432
   \   000000EE   0x2003             MOVS     R0,#+3
   \   000000F0   0x.... 0x....      BL       CSP_GPIO_BitSet
    924              CSP_GPIO_BitSet(BSP_GPIO_SMOTO2_EN_PORT,BSP_GPIO_SMOTO2_EN);
   \   000000F4   0xF44F 0x6180      MOV      R1,#+1024
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x.... 0x....      BL       CSP_GPIO_BitSet
    925              break;
    926            }
    927          }
   \                     ??MOTO_STEP_DISABLED_14: (+1)
   \                     ??MOTO_STEP_DISABLED_0: (+1)
   \   000000FE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    928          
    929          /********************************************************************************************************
    930          ** 函数名称: MOTO_STEP_CLK
    931          ** 功能描述:
    932          ** 输 　 入:
    933          **
    934          ** 输　  出:
    935          **
    936          ** 全局变量:
    937          ** 调用模块:
    938          **
    939          ** 作　  者: John Tonny
    940          ** 日　  期: 2005年05月01日
    941          **------------------------------------------------------------------------------------------------------
    942          ** 修 改 人:
    943          ** 日　  期:
    944          **------------------------------------------------------------------------------------------------------
    945          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    946          void MOTO_STEP_CLK(INT8U ucSelected)
    947          {
   \                     MOTO_STEP_CLK: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    948            switch(ucSelected){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??MOTO_STEP_CLK_0
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD006             BEQ.N    ??MOTO_STEP_CLK_1
   \   0000000E   0xE00A             B.N      ??MOTO_STEP_CLK_2
    949              case 0:
    950                CSP_GPIO_BitToggle(BSP_GPIO_SMOTO1_CLK_PORT,BSP_GPIO_SMOTO1_CLK);
   \                     ??MOTO_STEP_CLK_0: (+1)
   \   00000010   0xF05F 0x5180      MOVS     R1,#+268435456
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       CSP_GPIO_BitToggle
    951                break;
   \   0000001A   0xE004             B.N      ??MOTO_STEP_CLK_2
    952              case 1:
    953                CSP_GPIO_BitToggle(BSP_GPIO_SMOTO2_CLK_PORT,BSP_GPIO_SMOTO2_CLK);
   \                     ??MOTO_STEP_CLK_1: (+1)
   \   0000001C   0xF05F 0x5100      MOVS     R1,#+536870912
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       CSP_GPIO_BitToggle
    954                break;
    955            }
    956          }
   \                     ??MOTO_STEP_CLK_2: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    957          
    958          /********************************************************************************************************
    959          ** 函数名称: SMotoStart
    960          ** 功能描述:
    961          ** 输 　 入:
    962          **
    963          ** 输　  出:
    964          **
    965          ** 全局变量:
    966          ** 调用模块:
    967          **
    968          ** 作　  者: John Tonny
    969          ** 日　  期: 2005年05月01日
    970          **------------------------------------------------------------------------------------------------------
    971          ** 修 改 人:
    972          ** 日　  期:
    973          **------------------------------------------------------------------------------------------------------
    974          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    975          void SMotoStart(INT8U ucFreq,INT16U uiCounts,INT8U ucDirection,INT8U ucSelected)
    976          {
   \                     SMotoStart: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    977            CPU_SR_ALLOC();
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    978              
    979            if(ucSelected>=CARDMACHINE_SMOTO_NUMS){
   \   00000010   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000012   0x2F02             CMP      R7,#+2
   \   00000014   0xDA64             BGE.N    ??SMotoStart_0
    980              return;
    981            }
    982            
    983            if(ucFreq<SMOTO_FREQ_600US){
   \                     ??SMotoStart_1: (+1)
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C3C             CMP      R4,#+60
   \   0000001A   0xDA01             BGE.N    ??SMotoStart_2
    984              ucFreq=SMOTO_FREQ_600US;
   \   0000001C   0x203C             MOVS     R0,#+60
   \   0000001E   0x0004             MOVS     R4,R0
    985            }
    986          
    987            MOTO_STEP_DISABLED(ucSelected,NORMAL_MODE);  
   \                     ??SMotoStart_2: (+1)
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x0038             MOVS     R0,R7
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       MOTO_STEP_DISABLED
    988            OS_ENTER_CRITICAL();  
   \   0000002A   0x.... 0x....      BL       CPU_SR_Save
   \   0000002E   0x4680             MOV      R8,R0
   \   00000030   0x.... 0x....      BL       CPU_IntDisMeasStart
    989            g_usrSMoto[ucSelected].ucFreq=ucFreq;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x210A             MOVS     R1,#+10
   \   0000003C   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000040   0x4408             ADD      R0,R0,R1
   \   00000042   0x7044             STRB     R4,[R0, #+1]
    990            g_usrSMoto[ucSelected].uiCounts=uiCounts;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x210A             MOVS     R1,#+10
   \   0000004C   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000050   0x4408             ADD      R0,R0,R1
   \   00000052   0x8045             STRH     R5,[R0, #+2]
    991            g_usrSMoto[ucSelected].uiBakCounts=uiCounts;
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x210A             MOVS     R1,#+10
   \   0000005C   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000060   0x4408             ADD      R0,R0,R1
   \   00000062   0x8085             STRH     R5,[R0, #+4]
    992            g_usrSMoto[ucSelected].ucDirection=ucDirection;
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000068   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   0x210A             MOVS     R1,#+10
   \   0000006C   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000070   0x5446             STRB     R6,[R0, R1]
    993            g_usrSMoto[ucSelected].ucEnabled=1;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000078   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007A   0x220A             MOVS     R2,#+10
   \   0000007C   0xFB02 0xF207      MUL      R2,R2,R7
   \   00000080   0x4411             ADD      R1,R1,R2
   \   00000082   0x7188             STRB     R0,[R1, #+6]
    994            g_usrSMoto[ucSelected].uiTime=(((INT32U)uiCounts)*ucFreq)/1000+2;
   \   00000084   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0xFB04 0xF005      MUL      R0,R4,R5
   \   0000008C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000090   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000094   0x1C80             ADDS     R0,R0,#+2
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable11
   \   0000009A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000009C   0x220A             MOVS     R2,#+10
   \   0000009E   0xFB02 0xF207      MUL      R2,R2,R7
   \   000000A2   0x4411             ADD      R1,R1,R2
   \   000000A4   0x8108             STRH     R0,[R1, #+8]
    995          
    996            if(!ucDirection){
   \   000000A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD104             BNE.N    ??SMotoStart_3
    997              MOTO_STEP_FORWARD(ucSelected);      
   \   000000AC   0x0038             MOVS     R0,R7
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x.... 0x....      BL       MOTO_STEP_FORWARD
   \   000000B4   0xE003             B.N      ??SMotoStart_4
    998            }else{
    999              MOTO_STEP_BACKWARD(ucSelected);
   \                     ??SMotoStart_3: (+1)
   \   000000B6   0x0038             MOVS     R0,R7
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x.... 0x....      BL       MOTO_STEP_BACKWARD
   1000            }
   1001            SMOTO_SET_TIME(ucFreq);
   \                     ??SMotoStart_4: (+1)
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0x40008008
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   \   000000C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40008018
   \   000000CC   0x6004             STR      R4,[R0, #+0]
   1002            MOTO_STEP_ENABLED(ucSelected);  	
   \   000000CE   0x0038             MOVS     R0,R7
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x.... 0x....      BL       MOTO_STEP_ENABLED
   1003            OS_EXIT_CRITICAL();      
   \   000000D6   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000DA   0x4640             MOV      R0,R8
   \   000000DC   0x.... 0x....      BL       CPU_SR_Restore
   1004          }
   \                     ??SMotoStart_0: (+1)
   \   000000E0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1005          			
   1006          /********************************************************************************************************
   1007          ** 函数名称: DMotoStart
   1008          ** 功能描述:
   1009          ** 输 　 入:
   1010          **
   1011          ** 输　  出:
   1012          **
   1013          ** 全局变量:
   1014          ** 调用模块:
   1015          **
   1016          ** 作　  者: John Tonny
   1017          ** 日　  期: 2005年05月01日
   1018          **------------------------------------------------------------------------------------------------------
   1019          ** 修 改 人:
   1020          ** 日　  期:
   1021          **------------------------------------------------------------------------------------------------------
   1022          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1023          void DMotoStart(INT16U uiFreq,INT16U uiPwm,INT8U ucDirection,INT16U uiMotoTime,INT8U ucSelected)
   1024          {
   \                     DMotoStart: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C0A             LDR      R4,[SP, #+40]
   1025            OS_ERR err;
   1026            INT8U ucDirectionBak;
   1027            CPU_SR_ALLOC();
   \   00000010   0xF05F 0x0A00      MOVS     R10,#+0
   1028          
   1029            if(ucSelected>=CARDMACHINE_DMOTO_NUMS){
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xF280 0x8089      BGE.W    ??DMotoStart_0
   1030              return;
   1031            }
   1032            
   1033            if(uiFreq<DMOTO_FREQ_DEFAULT){
   \                     ??DMotoStart_1: (+1)
   \   0000001C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   0xF5B5 0x6FFA      CMP      R5,#+2000
   \   00000022   0xDA02             BGE.N    ??DMotoStart_2
   1034              uiFreq=DMOTO_FREQ_DEFAULT;
   \   00000024   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000028   0x0005             MOVS     R5,R0
   1035            }
   1036            
   1037            if(uiPwm<DMOTO_PWM_700){
   \                     ??DMotoStart_2: (+1)
   \   0000002A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   0xF5B6 0x7F2F      CMP      R6,#+700
   \   00000030   0xDA02             BGE.N    ??DMotoStart_3
   1038              uiPwm=DMOTO_PWM_700;
   \   00000032   0xF44F 0x702F      MOV      R0,#+700
   \   00000036   0x0006             MOVS     R6,R0
   1039            }
   1040          
   1041            
   1042            MOTO_DC_DISABLED(ucSelected,NORMAL_MODE);
   \                     ??DMotoStart_3: (+1)
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       MOTO_DC_DISABLED
   1043          
   1044            OS_ENTER_CRITICAL();  
   \   00000042   0x.... 0x....      BL       CPU_SR_Save
   \   00000046   0x4682             MOV      R10,R0
   \   00000048   0x.... 0x....      BL       CPU_IntDisMeasStart
   1045            ucDirectionBak=g_usrDMoto[ucSelected].ucDirection;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0x210A             MOVS     R1,#+10
   \   00000054   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000058   0x5C40             LDRB     R0,[R0, R1]
   \   0000005A   0x4681             MOV      R9,R0
   1046            OS_EXIT_CRITICAL();  
   \   0000005C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000060   0x4650             MOV      R0,R10
   \   00000062   0x.... 0x....      BL       CPU_SR_Restore
   1047            if(ucDirectionBak!=ucDirection){
   \   00000066   0x4648             MOV      R0,R9
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD004             BEQ.N    ??DMotoStart_4
   1048             OSTimeDly(30,OS_OPT_TIME_DLY, &err) ;         
   \   00000072   0x466A             MOV      R2,SP
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x201E             MOVS     R0,#+30
   \   00000078   0x.... 0x....      BL       OSTimeDly
   1049            }
   1050          
   1051            OS_ENTER_CRITICAL();  
   \                     ??DMotoStart_4: (+1)
   \   0000007C   0x.... 0x....      BL       CPU_SR_Save
   \   00000080   0x4682             MOV      R10,R0
   \   00000082   0x.... 0x....      BL       CPU_IntDisMeasStart
   1052          
   1053            g_usrDMoto[ucSelected].uiFreq=uiFreq;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000008A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008C   0x210A             MOVS     R1,#+10
   \   0000008E   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000092   0x4408             ADD      R0,R0,R1
   \   00000094   0x8045             STRH     R5,[R0, #+2]
   1054            g_usrDMoto[ucSelected].uiPwm=uiPwm;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x210A             MOVS     R1,#+10
   \   0000009E   0xFB01 0xF104      MUL      R1,R1,R4
   \   000000A2   0x4408             ADD      R0,R0,R1
   \   000000A4   0x8086             STRH     R6,[R0, #+4]
   1055            g_usrDMoto[ucSelected].ucDirection=ucDirection;
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0x210A             MOVS     R1,#+10
   \   000000AE   0xFB01 0xF104      MUL      R1,R1,R4
   \   000000B2   0x5447             STRB     R7,[R0, R1]
   1056            g_usrDMoto[ucSelected].uiTime=uiMotoTime;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x210A             MOVS     R1,#+10
   \   000000BC   0xFB01 0xF104      MUL      R1,R1,R4
   \   000000C0   0x4408             ADD      R0,R0,R1
   \   000000C2   0xF8A0 0x8008      STRH     R8,[R0, #+8]
   1057          
   1058            PWM1TC=0;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable17_2  ;; 0x40018008
   \   000000CC   0x6008             STR      R0,[R1, #+0]
   1059            DMOTO_SET_TIME(uiFreq,uiPwm);	
   \   000000CE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40018018
   \   000000D4   0x6005             STR      R5,[R0, #+0]
   \   000000D6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable17_4  ;; 0x4001801c
   \   000000DC   0x6006             STR      R6,[R0, #+0]
   1060            if(uiFreq!=uiPwm){
   \   000000DE   0x0028             MOVS     R0,R5
   \   000000E0   0x0031             MOVS     R1,R6
   \   000000E2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD007             BEQ.N    ??DMotoStart_5
   1061              DMOTO_ENABLED();
   \   000000EA   0x20FF             MOVS     R0,#+255
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable13  ;; 0x40018000
   \   000000F0   0x6008             STR      R0,[R1, #+0]
   \   000000F2   0x2009             MOVS     R0,#+9
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable14  ;; 0x40018004
   \   000000F8   0x6008             STR      R0,[R1, #+0]
   1062            }
   1063            if(!ucDirection){
   \                     ??DMotoStart_5: (+1)
   \   000000FA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000FC   0x2F00             CMP      R7,#+0
   \   000000FE   0xD104             BNE.N    ??DMotoStart_6
   1064              MOTO_DC_FORWARD(ucSelected);
   \   00000100   0x0020             MOVS     R0,R4
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0x.... 0x....      BL       MOTO_DC_FORWARD
   \   00000108   0xE003             B.N      ??DMotoStart_7
   1065            }else{
   1066              MOTO_DC_BACKWARD(ucSelected);
   \                     ??DMotoStart_6: (+1)
   \   0000010A   0x0020             MOVS     R0,R4
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x.... 0x....      BL       MOTO_DC_BACKWARD
   1067            }
   1068            g_usrDMoto[ucSelected].ucEnabled=1;
   \                     ??DMotoStart_7: (+1)
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000118   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011A   0x220A             MOVS     R2,#+10
   \   0000011C   0xFB02 0xF204      MUL      R2,R2,R4
   \   00000120   0x4411             ADD      R1,R1,R2
   \   00000122   0x7188             STRB     R0,[R1, #+6]
   1069          
   1070            OS_EXIT_CRITICAL();
   \   00000124   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000128   0x4650             MOV      R0,R10
   \   0000012A   0x.... 0x....      BL       CPU_SR_Restore
   1071          }
   \                     ??DMotoStart_0: (+1)
   \   0000012E   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
   1072          
   1073          /********************************************************************************************************
   1074          ** 函数名称: MotoTime
   1075          ** 功能描述:
   1076          ** 输 　 入:
   1077          **
   1078          ** 输　  出:
   1079          **
   1080          ** 全局变量:
   1081          ** 调用模块:
   1082          **
   1083          ** 作　  者: John Tonny
   1084          ** 日　  期: 2005年05月01日
   1085          **------------------------------------------------------------------------------------------------------
   1086          ** 修 改 人:
   1087          ** 日　  期:
   1088          **------------------------------------------------------------------------------------------------------
   1089          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1090          void MotoTime(void)
   1091          {
   \                     MotoTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1092            INT8U i;
   1093            
   1094            for(i=0;i<CARDMACHINE_DMOTO_NUMS;i++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??MotoTime_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xDA22             BGE.N    ??MotoTime_1
   1095              if(g_usrDMoto[i].uiTime>0){
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x210A             MOVS     R1,#+10
   \   00000014   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000018   0x4408             ADD      R0,R0,R1
   \   0000001A   0x8900             LDRH     R0,[R0, #+8]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD011             BEQ.N    ??MotoTime_2
   1096                g_usrDMoto[i].uiTime--;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x210A             MOVS     R1,#+10
   \   00000028   0xFB01 0xF104      MUL      R1,R1,R4
   \   0000002C   0x4408             ADD      R0,R0,R1
   \   0000002E   0x8900             LDRH     R0,[R0, #+8]
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x220A             MOVS     R2,#+10
   \   0000003A   0xFB02 0xF204      MUL      R2,R2,R4
   \   0000003E   0x4411             ADD      R1,R1,R2
   \   00000040   0x8108             STRH     R0,[R1, #+8]
   \   00000042   0xE004             B.N      ??MotoTime_3
   1097              }else{
   1098                MOTO_DC_DISABLED(i,INTERRUPT_MODE);
   \                     ??MotoTime_2: (+1)
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x.... 0x....      BL       MOTO_DC_DISABLED
   1099              }
   1100            }
   \                     ??MotoTime_3: (+1)
   \   0000004E   0x1C64             ADDS     R4,R4,#+1
   \   00000050   0xE7D9             B.N      ??MotoTime_0
   1101            for(i=0;i<CARDMACHINE_SMOTO_NUMS;i++){
   \                     ??MotoTime_1: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x0004             MOVS     R4,R0
   \                     ??MotoTime_4: (+1)
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0x2C02             CMP      R4,#+2
   \   0000005A   0xDA22             BGE.N    ??MotoTime_5
   1102              if(g_usrSMoto[i].uiTime>0){
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x210A             MOVS     R1,#+10
   \   00000064   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000068   0x4408             ADD      R0,R0,R1
   \   0000006A   0x8900             LDRH     R0,[R0, #+8]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD011             BEQ.N    ??MotoTime_6
   1103                g_usrSMoto[i].uiTime--;
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0xFB01 0xF104      MUL      R1,R1,R4
   \   0000007C   0x4408             ADD      R0,R0,R1
   \   0000007E   0x8900             LDRH     R0,[R0, #+8]
   \   00000080   0x1E40             SUBS     R0,R0,#+1
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x220A             MOVS     R2,#+10
   \   0000008A   0xFB02 0xF204      MUL      R2,R2,R4
   \   0000008E   0x4411             ADD      R1,R1,R2
   \   00000090   0x8108             STRH     R0,[R1, #+8]
   \   00000092   0xE004             B.N      ??MotoTime_7
   1104              }else{
   1105                MOTO_STEP_DISABLED(i,INTERRUPT_MODE);
   \                     ??MotoTime_6: (+1)
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   1106              }
   1107            }
   \                     ??MotoTime_7: (+1)
   \   0000009E   0x1C64             ADDS     R4,R4,#+1
   \   000000A0   0xE7D9             B.N      ??MotoTime_4
   1108          }
   \                     ??MotoTime_5: (+1)
   \   000000A2   0xBD10             POP      {R4,PC}          ;; return
   1109                         
   1110                         
   1111          /********************************************************************************************************
   1112          ** 函数名称: Action_Process
   1113          ** 功能描述:
   1114          ** 输 　 入:
   1115          **
   1116          ** 输　  出:
   1117          **
   1118          ** 全局变量:
   1119          ** 调用模块:
   1120          **
   1121          ** 作　  者: John Tonny
   1122          ** 日　  期: 2005年05月01日
   1123          **------------------------------------------------------------------------------------------------------
   1124          ** 修 改 人:
   1125          ** 日　  期:
   1126          **------------------------------------------------------------------------------------------------------
   1127          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1128          void Action_Process(void)
   1129          {
   \                     Action_Process: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   1130            LIB_ERR               lib_err;
   1131            OS_ERR                os_err;
   1132            CPU_TS                ts;
   1133            OS_MSG_SIZE           msgSize;
   1134            
   1135            CardMachineRxData     *pcommData;
   1136            INT8U                 *pMsg;
   1137            
   1138            INT8U                 ucType;
   1139            INT8U                 ucCmd;
   1140          
   1141            PowerOnSelftest();
   \   00000002   0x.... 0x....      BL       PowerOnSelftest
   1142              
   1143            while(DEF_TRUE){
   1144              ucType=DEV_TYPE();
   \                     ??Action_Process_0: (+1)
   \   00000006   0x.... 0x....      BL       DEV_TYPE
   \   0000000A   0x0006             MOVS     R6,R0
   1145              if(CARD_AUTO_MODE()){
   \   0000000C   0x.... 0x....      BL       CARD_AUTO_MODE
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD02A             BEQ.N    ??Action_Process_1
   1146                if(!m_usrGlobalFlag.usrBit.bKeyTest){
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD11C             BNE.N    ??Action_Process_2
   1147                  if(ucType==LARGE_THICK_OUT_TYPE){
   \   00000024   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000026   0x2E04             CMP      R6,#+4
   \   00000028   0xD102             BNE.N    ??Action_Process_3
   1148                    LOutAutoEvent();
   \   0000002A   0x.... 0x....      BL       LOutAutoEvent
   \   0000002E   0xE016             B.N      ??Action_Process_2
   1149                  }else if(ucType==SMALL_THICK_OUT_TYPE){
   \                     ??Action_Process_3: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E00             CMP      R6,#+0
   \   00000034   0xD102             BNE.N    ??Action_Process_4
   1150                    SOutAutoEvent();
   \   00000036   0x.... 0x....      BL       SOutAutoEvent
   \   0000003A   0xE010             B.N      ??Action_Process_2
   1151                  }else if(ucType==SMALL_THICK_IN_TYPE){
   \                     ??Action_Process_4: (+1)
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x2E01             CMP      R6,#+1
   \   00000040   0xD102             BNE.N    ??Action_Process_5
   1152                    SInAutoEvent();
   \   00000042   0x.... 0x....      BL       SInAutoEvent
   \   00000046   0xE00A             B.N      ??Action_Process_2
   1153                  }else if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_5: (+1)
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E02             CMP      R6,#+2
   \   0000004C   0xD102             BNE.N    ??Action_Process_6
   1154                    ZInAutoEvent();
   \   0000004E   0x.... 0x....      BL       ZInAutoEvent
   \   00000052   0xE004             B.N      ??Action_Process_2
   1155                  }else if(ucType==SMALL_THICK_GIN_TYPE){
   \                     ??Action_Process_6: (+1)
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E03             CMP      R6,#+3
   \   00000058   0xD101             BNE.N    ??Action_Process_2
   1156                    SGInAutoEvent();
   \   0000005A   0x.... 0x....      BL       SGInAutoEvent
   1157                  }
   1158                }
   1159                OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??Action_Process_2: (+1)
   \   0000005E   0xAA02             ADD      R2,SP,#+8
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x.... 0x....      BL       OSTimeDly
   \   00000068   0xE7CD             B.N      ??Action_Process_0
   1160              }else{
   1161                BSP_OS_SemPost(g_pActionSem);
   \                     ??Action_Process_1: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       BSP_OS_SemPost
   1162                pMsg = (INT8U *)OSTaskQPend(0, OS_OPT_PEND_BLOCKING, &msgSize, &ts, &os_err);
   \   00000074   0xA802             ADD      R0,SP,#+8
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xAB03             ADD      R3,SP,#+12
   \   0000007A   0xF10D 0x0206      ADD      R2,SP,#+6
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       OSTaskQPend
   \   00000086   0x0005             MOVS     R5,R0
   1163                if(pMsg){
   \   00000088   0x2D00             CMP      R5,#+0
   \   0000008A   0xD0BC             BEQ.N    ??Action_Process_0
   1164                  if(msgSize==1){
   \   0000008C   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000090   0x2801             CMP      R0,#+1
   \   00000092   0xD122             BNE.N    ??Action_Process_7
   1165                    ucCmd=*pMsg;
   \   00000094   0x7828             LDRB     R0,[R5, #+0]
   \   00000096   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1166                    if(ucCmd==POWER_ON_SELFTEST_MSG){
   \   0000009A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000009E   0x2863             CMP      R0,#+99
   \   000000A0   0xD10B             BNE.N    ??Action_Process_8
   1167                      ucCmd=DISPLAY_SELFTEST_MSG;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1168                      Box_TaskLcdQPost(&App_TaskLcdTCB,&ucCmd,1);  
   \   000000A8   0x2201             MOVS     R2,#+1
   \   000000AA   0xA901             ADD      R1,SP,#+4
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable18
   \   000000B0   0x.... 0x....      BL       Box_TaskLcdQPost
   1169                      PowerOnSelftest();
   \   000000B4   0x.... 0x....      BL       PowerOnSelftest
   \   000000B8   0xE0A8             B.N      ??Action_Process_9
   1170                    }else if(ucCmd==MOTO_IN_TO_ANT_MSG){
   \                     ??Action_Process_8: (+1)
   \   000000BA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000BE   0x2820             CMP      R0,#+32
   \   000000C0   0xF040 0x80A4      BNE.W    ??Action_Process_9
   1171                      if(ucType==SMALL_THICK_IN_TYPE){
   \   000000C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C6   0x2E01             CMP      R6,#+1
   \   000000C8   0xD103             BNE.N    ??Action_Process_10
   1172                        InToAntProcess(NULL);
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       InToAntProcess
   \   000000D0   0xE09C             B.N      ??Action_Process_9
   1173                      }else{
   1174                        if(ZInToAntProcess(NULL)){
   \                     ??Action_Process_10: (+1)
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       ZInToAntProcess
   \   000000D8   0xE098             B.N      ??Action_Process_9
   1175                        #if PRINT_MOTO_EN==1                
   1176                          ZPrintOpenProcess(NULL,DOOR_CLOSE_MODE);
   1177                        #endif
   1178                        }
   1179                      }
   1180                    }
   1181                  }else if(msgSize==sizeof(CardMachineRxData)){
   \                     ??Action_Process_7: (+1)
   \   000000DA   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000000DE   0x2840             CMP      R0,#+64
   \   000000E0   0xF040 0x8094      BNE.W    ??Action_Process_9
   1182                    ucType=DEV_TYPE();
   \   000000E4   0x.... 0x....      BL       DEV_TYPE
   \   000000E8   0x0006             MOVS     R6,R0
   1183                    pcommData=(CardMachineRxData *)pMsg;
   \   000000EA   0x002C             MOVS     R4,R5
   1184                    switch(pcommData->ucCmd){
   \   000000EC   0x78E0             LDRB     R0,[R4, #+3]
   \   000000EE   0x2810             CMP      R0,#+16
   \   000000F0   0xD03A             BEQ.N    ??Action_Process_11
   \   000000F2   0x2811             CMP      R0,#+17
   \   000000F4   0xD04F             BEQ.N    ??Action_Process_12
   \   000000F6   0x2813             CMP      R0,#+19
   \   000000F8   0xD036             BEQ.N    ??Action_Process_11
   \   000000FA   0x2820             CMP      R0,#+32
   \   000000FC   0xD00A             BEQ.N    ??Action_Process_13
   \   000000FE   0x2821             CMP      R0,#+33
   \   00000100   0xD01D             BEQ.N    ??Action_Process_14
   \   00000102   0x2822             CMP      R0,#+34
   \   00000104   0xD04D             BEQ.N    ??Action_Process_15
   \   00000106   0x2823             CMP      R0,#+35
   \   00000108   0xD06A             BEQ.N    ??Action_Process_16
   \   0000010A   0x2838             CMP      R0,#+56
   \   0000010C   0xD06F             BEQ.N    ??Action_Process_17
   \   0000010E   0x2839             CMP      R0,#+57
   \   00000110   0xD075             BEQ.N    ??Action_Process_18
   \   00000112   0xE07B             B.N      ??Action_Process_9
   1185                    case MOTO_IN_TO_ANT_MSG:
   1186                      if(ucType==SMALL_THICK_GIN_TYPE){
   \                     ??Action_Process_13: (+1)
   \   00000114   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000116   0x2E03             CMP      R6,#+3
   \   00000118   0xD103             BNE.N    ??Action_Process_19
   1187                        GCardToAntProcess(pcommData);		
   \   0000011A   0x0020             MOVS     R0,R4
   \   0000011C   0x.... 0x....      BL       GCardToAntProcess
   \   00000120   0xE00C             B.N      ??Action_Process_20
   1188                      }else if(ucType==SMALL_THICK_IN_TYPE){
   \                     ??Action_Process_19: (+1)
   \   00000122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000124   0x2E01             CMP      R6,#+1
   \   00000126   0xD103             BNE.N    ??Action_Process_21
   1189                        InToAntProcess(pcommData);
   \   00000128   0x0020             MOVS     R0,R4
   \   0000012A   0x.... 0x....      BL       InToAntProcess
   \   0000012E   0xE005             B.N      ??Action_Process_20
   1190                      }else if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_21: (+1)
   \   00000130   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000132   0x2E02             CMP      R6,#+2
   \   00000134   0xD102             BNE.N    ??Action_Process_20
   1191                        if(ZInToAntProcess(pcommData)){
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0x.... 0x....      BL       ZInToAntProcess
   1192                        #if PRINT_MOTO_EN==1                
   1193                          ZPrintOpenProcess(pcommData,DOOR_CLOSE_MODE);
   1194                        #endif                
   1195                        }
   1196                      }
   1197                      break;
   \                     ??Action_Process_20: (+1)
   \   0000013C   0xE066             B.N      ??Action_Process_9
   1198                      
   1199                    case MOTO_ANT_TO_BOX_MSG:
   1200                      if(ucType==SMALL_THICK_GIN_TYPE){
   \                     ??Action_Process_14: (+1)
   \   0000013E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000140   0x2E03             CMP      R6,#+3
   \   00000142   0xD103             BNE.N    ??Action_Process_22
   1201                        GAntToBoxProcess(pcommData);		
   \   00000144   0x0020             MOVS     R0,R4
   \   00000146   0x.... 0x....      BL       GAntToBoxProcess
   \   0000014A   0xE00C             B.N      ??Action_Process_23
   1202                      }else if(ucType==SMALL_THICK_IN_TYPE){
   \                     ??Action_Process_22: (+1)
   \   0000014C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014E   0x2E01             CMP      R6,#+1
   \   00000150   0xD103             BNE.N    ??Action_Process_24
   1203                        AntToBoxProcess(pcommData);
   \   00000152   0x0020             MOVS     R0,R4
   \   00000154   0x.... 0x....      BL       AntToBoxProcess
   \   00000158   0xE005             B.N      ??Action_Process_23
   1204                      }else if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_24: (+1)
   \   0000015A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000015C   0x2E02             CMP      R6,#+2
   \   0000015E   0xD102             BNE.N    ??Action_Process_23
   1205                        ZAntToBoxProcess(pcommData);
   \   00000160   0x0020             MOVS     R0,R4
   \   00000162   0x.... 0x....      BL       ZAntToBoxProcess
   1206                      }
   1207                      break;
   \                     ??Action_Process_23: (+1)
   \   00000166   0xE051             B.N      ??Action_Process_9
   1208                      
   1209                    case MOTO_BOX_TO_ANT_MSG:
   1210                    case MOTO_BOX_TO_ANT_B_MSG:
   1211                      if(ucType==LARGE_THICK_OUT_TYPE){
   \                     ??Action_Process_11: (+1)
   \   00000168   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000016A   0x2E04             CMP      R6,#+4
   \   0000016C   0xD107             BNE.N    ??Action_Process_25
   1212                        LBoxToAntProcess(pcommData,pcommData->ucData[0]-0x30);
   \   0000016E   0x7920             LDRB     R0,[R4, #+4]
   \   00000170   0xF1B0 0x0130      SUBS     R1,R0,#+48
   \   00000174   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000176   0x0020             MOVS     R0,R4
   \   00000178   0x.... 0x....      BL       LBoxToAntProcess
   \   0000017C   0xE00A             B.N      ??Action_Process_26
   1213                      }else if(DEV_TYPE()==SMALL_THICK_IN_TYPE || DEV_TYPE()==SMALL_THICK_OUT_TYPE){
   \                     ??Action_Process_25: (+1)
   \   0000017E   0x.... 0x....      BL       DEV_TYPE
   \   00000182   0x2801             CMP      R0,#+1
   \   00000184   0xD003             BEQ.N    ??Action_Process_27
   \   00000186   0x.... 0x....      BL       DEV_TYPE
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xD102             BNE.N    ??Action_Process_26
   1214                        BoxToAntProcess(pcommData);
   \                     ??Action_Process_27: (+1)
   \   0000018E   0x0020             MOVS     R0,R4
   \   00000190   0x.... 0x....      BL       BoxToAntProcess
   1215                      }
   1216                      break;
   \                     ??Action_Process_26: (+1)
   \   00000194   0xE03A             B.N      ??Action_Process_9
   1217                      
   1218                    case MOTO_ANT_TO_OUT_MSG:
   1219                      m_ucMachineAddr=m_usrComm1RxData.ucAddr;
   \                     ??Action_Process_12: (+1)
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000019A   0x7840             LDRB     R0,[R0, #+1]
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable18_2
   \   000001A0   0x7008             STRB     R0,[R1, #+0]
   1220                    case MOTO_ANT_TO_OUT_B_MSG:
   1221                      if(ucType==LARGE_THICK_OUT_TYPE){
   \                     ??Action_Process_15: (+1)
   \   000001A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001A4   0x2E04             CMP      R6,#+4
   \   000001A6   0xD103             BNE.N    ??Action_Process_28
   1222                        LAntToOutProcess(pcommData);
   \   000001A8   0x0020             MOVS     R0,R4
   \   000001AA   0x.... 0x....      BL       LAntToOutProcess
   \   000001AE   0xE016             B.N      ??Action_Process_29
   1223                      }else if(ucType==SMALL_THICK_GIN_TYPE){
   \                     ??Action_Process_28: (+1)
   \   000001B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001B2   0x2E03             CMP      R6,#+3
   \   000001B4   0xD103             BNE.N    ??Action_Process_30
   1224                        GAntToOutProcess(pcommData);
   \   000001B6   0x0020             MOVS     R0,R4
   \   000001B8   0x.... 0x....      BL       GAntToOutProcess
   \   000001BC   0xE00F             B.N      ??Action_Process_29
   1225                      }else if(ucType==SMALL_THICK_IN_TYPE || ucType==SMALL_THICK_OUT_TYPE){
   \                     ??Action_Process_30: (+1)
   \   000001BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C0   0x2E01             CMP      R6,#+1
   \   000001C2   0xD002             BEQ.N    ??Action_Process_31
   \   000001C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C6   0x2E00             CMP      R6,#+0
   \   000001C8   0xD103             BNE.N    ??Action_Process_32
   1226                        AntToOutProcess(pcommData);
   \                     ??Action_Process_31: (+1)
   \   000001CA   0x0020             MOVS     R0,R4
   \   000001CC   0x.... 0x....      BL       AntToOutProcess
   \   000001D0   0xE005             B.N      ??Action_Process_29
   1227                      }else if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_32: (+1)
   \   000001D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001D4   0x2E02             CMP      R6,#+2
   \   000001D6   0xD102             BNE.N    ??Action_Process_29
   1228                        ZAntToOutProcess(pcommData);
   \   000001D8   0x0020             MOVS     R0,R4
   \   000001DA   0x.... 0x....      BL       ZAntToOutProcess
   1229                      }
   1230                      break;
   \                     ??Action_Process_29: (+1)
   \   000001DE   0xE015             B.N      ??Action_Process_9
   1231                      
   1232                    case MOTO_ANT_TO_REV_MSG:
   1233                      if(ucType==LARGE_THICK_OUT_TYPE){
   \                     ??Action_Process_16: (+1)
   \   000001E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E2   0x2E04             CMP      R6,#+4
   \   000001E4   0xD102             BNE.N    ??Action_Process_33
   1234                        LAntToRevProcess(pcommData);
   \   000001E6   0x0020             MOVS     R0,R4
   \   000001E8   0x.... 0x....      BL       LAntToRevProcess
   1235                      }
   1236                      break;
   \                     ??Action_Process_33: (+1)
   \   000001EC   0xE00E             B.N      ??Action_Process_9
   1237                      
   1238                    case MOTO_DOOR_OPEN_MSG:
   1239                      if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_17: (+1)
   \   000001EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001F0   0x2E02             CMP      R6,#+2
   \   000001F2   0xD103             BNE.N    ??Action_Process_34
   1240                        ZDoorOpenProcess(pcommData,DOOR_CLOSE_MODE);
   \   000001F4   0x2100             MOVS     R1,#+0
   \   000001F6   0x0020             MOVS     R0,R4
   \   000001F8   0x.... 0x....      BL       ZDoorOpenProcess
   1241                      }
   1242                      break;
   \                     ??Action_Process_34: (+1)
   \   000001FC   0xE006             B.N      ??Action_Process_9
   1243                      
   1244                    case MOTO_PRINT_OPEN_MSG:
   1245                      if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??Action_Process_18: (+1)
   \   000001FE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000200   0x2E02             CMP      R6,#+2
   \   00000202   0xD103             BNE.N    ??Action_Process_35
   1246                        ZPrintOpenProcess(pcommData,DOOR_CLOSE_MODE);
   \   00000204   0x2100             MOVS     R1,#+0
   \   00000206   0x0020             MOVS     R0,R4
   \   00000208   0x.... 0x....      BL       ZPrintOpenProcess
   1247                      }
   1248                      break;
   1249                      
   1250                    /*case SCAN_OPEN_MSG:
   1251                      if(ucType==SMALL_THICK_ZIN_TYPE || ucType==SMALL_THIN_ZIN_TYPE){
   1252                        CloseScan();
   1253                        BSP_OS_TimeDlyMs(30);    
   1254                        OpenScan();
   1255                        Uart0Pack(INFTYPE_CMD_FINISHED,pcommData->ucAddr,pcommData->ucSeq,NULL,0,0);
   1256                      }
   1257                      break;
   1258                      */
   1259                      
   1260                    }
   1261                  }
   1262                  Mem_PoolBlkFree(&m_BoxPool, pMsg, &lib_err);
   \                     ??Action_Process_35: (+1)
   \                     ??Action_Process_9: (+1)
   \   0000020C   0xF10D 0x020A      ADD      R2,SP,#+10
   \   00000210   0x0029             MOVS     R1,R5
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   00000216   0x.... 0x....      BL       Mem_PoolBlkFree
   1263                  if (lib_err != LIB_MEM_ERR_NONE)  {
   \   0000021A   0xE6F4             B.N      ??Action_Process_0
   1264                    //error
   1265                  }
   1266                }
   1267              }
   1268            }
   1269          }
   1270          
   1271          /********************************************************************************************************
   1272          ** 函数名称: PowerOnSelftest
   1273          ** 功能描述:
   1274          ** 输 　 入:
   1275          **
   1276          ** 输　  出:
   1277          **
   1278          ** 全局变量:
   1279          ** 调用模块:
   1280          **
   1281          ** 作　  者: John Tonny
   1282          ** 日　  期: 2005年05月01日
   1283          **------------------------------------------------------------------------------------------------------
   1284          ** 修 改 人:
   1285          ** 日　  期:
   1286          **------------------------------------------------------------------------------------------------------
   1287          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1288          void PowerOnSelftest(void)
   1289          {
   \                     PowerOnSelftest: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   1290            INT32U ulTmp;
   1291            INT8U ucTmp;
   1292            
   1293            INT16U uiDMotoPwm;	
   1294            INT16U uiDMotoTime;
   1295            INT8U ucDSelected;
   1296            
   1297            INT8U ucSwitchErr=0;
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
   1298            INT8U ucDMotoErr=0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
   1299            INT8U ucDMotoErr1=0;
   \   0000000E   0xF05F 0x0A00      MOVS     R10,#+0
   1300            
   1301            INT8U ucRet;
   1302            
   1303            ucTmp=DISPLAY_SELFTEST_MSG;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1304            Box_TaskLcdQPost(&App_TaskLcdTCB,&ucTmp,1);    
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable18
   \   00000020   0x.... 0x....      BL       Box_TaskLcdQPost
   1305            
   1306            INT8U ucType=DEV_TYPE();
   \   00000024   0x.... 0x....      BL       DEV_TYPE
   \   00000028   0x4683             MOV      R11,R0
   1307            if(ucType==SMALL_THICK_IN_TYPE){
   \   0000002A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000002E   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000032   0xF000 0x8119      BEQ.W    ??PowerOnSelftest_0
   1308            }else if(ucType==SMALL_THICK_OUT_TYPE){
   \   00000036   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000003A   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000003E   0xF000 0x8113      BEQ.W    ??PowerOnSelftest_0
   1309            }else if(ucType==SMALL_THICK_GIN_TYPE){
   \   00000042   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000046   0xF1BB 0x0F03      CMP      R11,#+3
   \   0000004A   0xF040 0x80A5      BNE.W    ??PowerOnSelftest_1
   1310              SMotoMoveWait(1500,MOTO_BACKWARD_MODE,SMOTO_FIRST);									
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000056   0x.... 0x....      BL       SMotoMoveWait
   1311              ulTmp=GetKey();    
   \   0000005A   0x.... 0x....      BL       GetKey
   \   0000005E   0x0004             MOVS     R4,R0
   1312              ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulTmp>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1);
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000064   0x7E00             LDRB     R0,[R0, #+24]
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0x40C1             LSRS     R1,R1,R0
   \   0000006A   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable18_4
   \   00000072   0x7E89             LDRB     R1,[R1, #+26]
   \   00000074   0x0022             MOVS     R2,R4
   \   00000076   0x40CA             LSRS     R2,R2,R1
   \   00000078   0x0051             LSLS     R1,R2,#+1
   \   0000007A   0xF011 0x0106      ANDS     R1,R1,#0x6
   \   0000007E   0x4308             ORRS     R0,R1,R0
   \   00000080   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1313              if(ucTmp){
   \   00000084   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD001             BEQ.N    ??PowerOnSelftest_2
   1314                ucSwitchErr=1;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x4680             MOV      R8,R0
   1315              }
   1316              DMotoMoveWait(35,MOTO_BACKWARD_MODE,DMOTO_FIRST);	
   \                     ??PowerOnSelftest_2: (+1)
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x2023             MOVS     R0,#+35
   \   00000096   0x.... 0x....      BL       DMotoMoveWait
   1317              DMotoMoveWait(35,MOTO_FORWARD_MODE,DMOTO_FIRST);	
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x2023             MOVS     R0,#+35
   \   000000A0   0x.... 0x....      BL       DMotoMoveWait
   1318              
   1319              uiDMotoPwm=m_uiDMotoPwm[DMOTO_SECOND];	
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000A8   0x8840             LDRH     R0,[R0, #+2]
   \   000000AA   0x0005             MOVS     R5,R0
   1320              uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x27100
   \   000000B0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B2   0xFBB0 0xF0F5      UDIV     R0,R0,R5
   \   000000B6   0x0006             MOVS     R6,R0
   1321              ucDSelected=m_ucDMotoBit[DMOTO_SECOND];
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   000000BC   0x7840             LDRB     R0,[R0, #+1]
   \   000000BE   0x0007             MOVS     R7,R0
   1322              
   1323              if(!DMotoPosAValid(DMOTO_SECOND)){
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0x.... 0x....      BL       DMotoPosAValid
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD107             BNE.N    ??PowerOnSelftest_3
   1324                if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x.... 0x....      BL       MotoReset
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD101             BNE.N    ??PowerOnSelftest_3
   1325                  ucDMotoErr=1;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x4681             MOV      R9,R0
   1326                }
   1327              }
   1328              if(!ucDMotoErr){
   \                     ??PowerOnSelftest_3: (+1)
   \   000000DA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000DE   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000E2   0xD126             BNE.N    ??PowerOnSelftest_4
   1329                DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,uiDMotoTime,ucDSelected);
   \   000000E4   0x0038             MOVS     R0,R7
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x0033             MOVS     R3,R6
   \   000000EC   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000EE   0x2200             MOVS     R2,#+0
   \   000000F0   0x0029             MOVS     R1,R5
   \   000000F2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F4   0xF44F 0x60FA      MOV      R0,#+2000
   \   000000F8   0x.... 0x....      BL       DMotoStart
   1330                ucRet=DMotoPosBWaitEnter(uiDMotoTime+5,DMOTO_SECOND);			
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x1D70             ADDS     R0,R6,#+5
   \   00000100   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000102   0x.... 0x....      BL       DMotoPosBWaitEnter
   \   00000106   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1331                MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x0038             MOVS     R0,R7
   \   0000010E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000110   0x.... 0x....      BL       MOTO_DC_DISABLED
   1332                if(ucRet){
   \   00000114   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD008             BEQ.N    ??PowerOnSelftest_5
   1333                  if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   \   0000011C   0x2101             MOVS     R1,#+1
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0x.... 0x....      BL       MotoReset
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD104             BNE.N    ??PowerOnSelftest_4
   1334                    ucDMotoErr=1;
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0x4681             MOV      R9,R0
   \   0000012C   0xE001             B.N      ??PowerOnSelftest_4
   1335                  }				
   1336                }else{
   1337                  ucDMotoErr=1;
   \                     ??PowerOnSelftest_5: (+1)
   \   0000012E   0x2001             MOVS     R0,#+1
   \   00000130   0x4681             MOV      R9,R0
   1338                }
   1339              }
   1340              if(ucSwitchErr && ucDMotoErr){
   \                     ??PowerOnSelftest_4: (+1)
   \   00000132   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000136   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000013A   0xD00D             BEQ.N    ??PowerOnSelftest_6
   \   0000013C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000140   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000144   0xD008             BEQ.N    ??PowerOnSelftest_6
   1341                m_usrErrorFlags.usrBit.bSelfTest=3;
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000014A   0x7800             LDRB     R0,[R0, #+0]
   \   0000014C   0xF050 0x0060      ORRS     R0,R0,#0x60
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000154   0x7008             STRB     R0,[R1, #+0]
   \   00000156   0xE087             B.N      ??PowerOnSelftest_0
   1342              }else if(ucSwitchErr){
   \                     ??PowerOnSelftest_6: (+1)
   \   00000158   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000160   0xD00A             BEQ.N    ??PowerOnSelftest_7
   1343                m_usrErrorFlags.usrBit.bSelfTest=1;			
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   00000166   0x7800             LDRB     R0,[R0, #+0]
   \   00000168   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   0000016C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000174   0x7008             STRB     R0,[R1, #+0]
   \   00000176   0xE077             B.N      ??PowerOnSelftest_0
   1344              }else if(ucDMotoErr){
   \                     ??PowerOnSelftest_7: (+1)
   \   00000178   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000017C   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000180   0xD072             BEQ.N    ??PowerOnSelftest_0
   1345                m_usrErrorFlags.usrBit.bSelfTest=2;			
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   00000186   0x7800             LDRB     R0,[R0, #+0]
   \   00000188   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   0000018C   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000194   0x7008             STRB     R0,[R1, #+0]
   \   00000196   0xE067             B.N      ??PowerOnSelftest_0
   1346              }
   1347            }else if(ucType==SMALL_THICK_ZIN_TYPE){
   \                     ??PowerOnSelftest_1: (+1)
   \   00000198   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000019C   0xF1BB 0x0F02      CMP      R11,#+2
   \   000001A0   0xD160             BNE.N    ??PowerOnSelftest_8
   1348              SMotoMoveWait(1500,MOTO_BACKWARD_MODE,SMOTO_FIRST);									
   \   000001A2   0x2200             MOVS     R2,#+0
   \   000001A4   0x2101             MOVS     R1,#+1
   \   000001A6   0xF240 0x50DC      MOVW     R0,#+1500
   \   000001AA   0x.... 0x....      BL       SMotoMoveWait
   1349              ulTmp=GetKey();    
   \   000001AE   0x.... 0x....      BL       GetKey
   \   000001B2   0x0004             MOVS     R4,R0
   1350              ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulTmp>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1);
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   000001B8   0x7E00             LDRB     R0,[R0, #+24]
   \   000001BA   0x0021             MOVS     R1,R4
   \   000001BC   0x40C1             LSRS     R1,R1,R0
   \   000001BE   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   000001C2   0x.... 0x....      LDR.W    R1,??DataTable18_4
   \   000001C6   0x7E89             LDRB     R1,[R1, #+26]
   \   000001C8   0x0022             MOVS     R2,R4
   \   000001CA   0x40CA             LSRS     R2,R2,R1
   \   000001CC   0x0051             LSLS     R1,R2,#+1
   \   000001CE   0xF011 0x0106      ANDS     R1,R1,#0x6
   \   000001D2   0x4308             ORRS     R0,R1,R0
   \   000001D4   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1351              if(ucTmp){
   \   000001D8   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001DC   0x2800             CMP      R0,#+0
   \   000001DE   0xD001             BEQ.N    ??PowerOnSelftest_9
   1352                ucSwitchErr=1;
   \   000001E0   0x2001             MOVS     R0,#+1
   \   000001E2   0x4680             MOV      R8,R0
   1353              }
   1354              
   1355          #if DOOR_OPEN_EN==1
   1356              uiDMotoPwm=m_uiDMotoPwm[DMOTO_SECOND];	                                                //掉卡
   1357              uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   1358              ucDSelected=m_ucDMotoBit[DMOTO_SECOND];
   1359              
   1360              if(DMotoPosBValid(DMOTO_SECOND) && !DMotoPosAValid(DMOTO_SECOND)){
   1361                if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   1362                  ucDMotoErr=1;
   1363                }
   1364              }
   1365              if(!ucDMotoErr){
   1366                DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,uiDMotoTime,ucDSelected);
   1367                ucRet=DMotoPosBWaitEnter(uiDMotoTime+5,DMOTO_SECOND);			
   1368                MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   1369                
   1370                BSP_OS_TimeDlyMs(1000);    
   1371                if(ucRet){
   1372                  if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   1373                    ucDMotoErr=1;
   1374                  }				
   1375                }else{
   1376                  ucDMotoErr=1;
   1377                }
   1378              }
   1379          #endif
   1380          
   1381          #if PAPER_RECYCLE_EN==1
   1382              SMotoReset(WAIT_MODE,SMOTO_SECOND);
   \                     ??PowerOnSelftest_9: (+1)
   \   000001E4   0x2101             MOVS     R1,#+1
   \   000001E6   0x2001             MOVS     R0,#+1
   \   000001E8   0x.... 0x....      BL       SMotoReset
   1383          #else    
   1384              uiDMotoPwm=m_uiDMotoPwm[DMOTO_FIRST];	                                                //打印机
   1385              uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   1386              ucDSelected=m_ucDMotoBit[DMOTO_FIRST];
   1387              
   1388              if(DMotoPosAValid(DMOTO_FIRST)){
   1389                DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,uiDMotoTime,ucDSelected);
   1390                ucRet=DMotoPosAWaitEnter(uiDMotoTime+5,DMOTO_SECOND);			
   1391                MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   1392              }else{
   1393                if(!MotoReset(WAIT_MODE,DMOTO_FIRST)){
   1394                  ucDMotoErr1=1;
   1395                }
   1396              }
   1397          #endif    
   1398              
   1399              if(ucSwitchErr && ucDMotoErr && ucDMotoErr1){
   \   000001EC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001F0   0xF1B8 0x0F00      CMP      R8,#+0
   \   000001F4   0xD012             BEQ.N    ??PowerOnSelftest_10
   \   000001F6   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001FA   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001FE   0xD00D             BEQ.N    ??PowerOnSelftest_10
   \   00000200   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000204   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000208   0xD008             BEQ.N    ??PowerOnSelftest_10
   1400                m_usrErrorFlags.usrBit.bSelfTest=3;
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000020E   0x7800             LDRB     R0,[R0, #+0]
   \   00000210   0xF050 0x0060      ORRS     R0,R0,#0x60
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000218   0x7008             STRB     R0,[R1, #+0]
   \   0000021A   0xE01E             B.N      ??PowerOnSelftest_11
   1401              }else if(ucSwitchErr){
   \                     ??PowerOnSelftest_10: (+1)
   \   0000021C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000220   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000224   0xD00A             BEQ.N    ??PowerOnSelftest_12
   1402                m_usrErrorFlags.usrBit.bSelfTest=1;			
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000022A   0x7800             LDRB     R0,[R0, #+0]
   \   0000022C   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   00000230   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000234   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000238   0x7008             STRB     R0,[R1, #+0]
   \   0000023A   0xE00E             B.N      ??PowerOnSelftest_11
   1403              }else if(ucDMotoErr){
   \                     ??PowerOnSelftest_12: (+1)
   \   0000023C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000240   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000244   0xD009             BEQ.N    ??PowerOnSelftest_11
   1404                m_usrErrorFlags.usrBit.bSelfTest=2;			
   \   00000246   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000024A   0x7800             LDRB     R0,[R0, #+0]
   \   0000024C   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   00000250   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000254   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000258   0x7008             STRB     R0,[R1, #+0]
   1405              }
   1406              g_ucLedMode=LEDOUT_ON_MODE;
   \                     ??PowerOnSelftest_11: (+1)
   \   0000025A   0x2001             MOVS     R0,#+1
   \   0000025C   0x.... 0x....      LDR.W    R1,??DataTable20
   \   00000260   0x7008             STRB     R0,[R1, #+0]
   \   00000262   0xE001             B.N      ??PowerOnSelftest_0
   1407              
   1408            }else if(DEV_TYPE()==LARGE_THICK_OUT_TYPE){
   \                     ??PowerOnSelftest_8: (+1)
   \   00000264   0x.... 0x....      BL       DEV_TYPE
   1409            }	
   1410            ucTmp=DISPLAY_MAIN_MSG;
   \                     ??PowerOnSelftest_0: (+1)
   \   00000268   0x2001             MOVS     R0,#+1
   \   0000026A   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1411            Box_TaskLcdQPost(&App_TaskLcdTCB,&ucTmp,1);  
   \   0000026E   0x2201             MOVS     R2,#+1
   \   00000270   0xA901             ADD      R1,SP,#+4
   \   00000272   0x.... 0x....      LDR.W    R0,??DataTable18
   \   00000276   0x.... 0x....      BL       Box_TaskLcdQPost
   1412          }
   \   0000027A   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
   1413                         
   1414          
   1415          /********************************************************************************************************
   1416          ** 函数名称: SMotoMoveWait
   1417          ** 功能描述:
   1418          ** 输 　 入:
   1419          **
   1420          ** 输　  出:
   1421          **
   1422          ** 全局变量:
   1423          ** 调用模块:
   1424          **
   1425          ** 作　  者: John Tonny
   1426          ** 日　  期: 2005年05月01日
   1427          **------------------------------------------------------------------------------------------------------
   1428          ** 修 改 人:
   1429          ** 日　  期:
   1430          **------------------------------------------------------------------------------------------------------
   1431          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1432          INT8U SMotoMoveWait(INT16U uiCounts,INT8U ucDirection,INT8U ucSelected)
   1433          {  
   \                     SMotoMoveWait: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   1434            OS_ERR os_err;
   1435            
   1436            INT8U ucRet;
   1437            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSelected];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   0000000E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   0xF810 0x8006      LDRB     R8,[R0, R6]
   1438            INT8U ucSSelected=m_ucSMotoBit[ucSelected];
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0xF810 0x9006      LDRB     R9,[R0, R6]
   1439            INT16U uiTimes;
   1440            
   1441            CPU_SR_ALLOC();
   \   0000001E   0xF05F 0x0B00      MOVS     R11,#+0
   1442            
   1443            SMotoStart(ucSMotoFreq,uiCounts,ucDirection,ucSSelected);
   \   00000022   0x464B             MOV      R3,R9
   \   00000024   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       SMotoStart
   1444            OS_ENTER_CRITICAL();
   \   00000036   0x.... 0x....      BL       CPU_SR_Save
   \   0000003A   0x4683             MOV      R11,R0
   \   0000003C   0x.... 0x....      BL       CPU_IntDisMeasStart
   1445            uiTimes=g_usrSMoto[ucSSelected].uiTime;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000044   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000048   0x210A             MOVS     R1,#+10
   \   0000004A   0xFB01 0xF109      MUL      R1,R1,R9
   \   0000004E   0x4408             ADD      R0,R0,R1
   \   00000050   0x8900             LDRH     R0,[R0, #+8]
   \   00000052   0x4682             MOV      R10,R0
   1446            OS_EXIT_CRITICAL();
   \   00000054   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000058   0x4658             MOV      R0,R11
   \   0000005A   0x.... 0x....      BL       CPU_SR_Restore
   1447            
   1448            ucRet=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x0007             MOVS     R7,R0
   1449            while(!ucRet){
   \                     ??SMotoMoveWait_0: (+1)
   \   00000062   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000064   0x2F00             CMP      R7,#+0
   \   00000066   0xD126             BNE.N    ??SMotoMoveWait_1
   1450              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000068   0x466A             MOV      R2,SP
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x.... 0x....      BL       OSTimeDly
   1451              OS_ENTER_CRITICAL();
   \   00000072   0x.... 0x....      BL       CPU_SR_Save
   \   00000076   0x4683             MOV      R11,R0
   \   00000078   0x.... 0x....      BL       CPU_IntDisMeasStart
   1452              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000080   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000084   0x210A             MOVS     R1,#+10
   \   00000086   0xFB01 0xF109      MUL      R1,R1,R9
   \   0000008A   0x4408             ADD      R0,R0,R1
   \   0000008C   0x8840             LDRH     R0,[R0, #+2]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD101             BNE.N    ??SMotoMoveWait_2
   1453                ucRet=1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x0007             MOVS     R7,R0
   1454              }
   1455              OS_EXIT_CRITICAL();
   \                     ??SMotoMoveWait_2: (+1)
   \   00000096   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000009A   0x4658             MOV      R0,R11
   \   0000009C   0x.... 0x....      BL       CPU_SR_Restore
   1456              if(uiTimes>0){
   \   000000A0   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000A4   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000A8   0xD002             BEQ.N    ??SMotoMoveWait_3
   1457                uiTimes--;
   \   000000AA   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000AE   0xE7D8             B.N      ??SMotoMoveWait_0
   1458              }else{
   1459                ucRet=2;                                                                      //系统故障
   \                     ??SMotoMoveWait_3: (+1)
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x0007             MOVS     R7,R0
   \   000000B4   0xE7D5             B.N      ??SMotoMoveWait_0
   1460              }
   1461            }
   1462            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??SMotoMoveWait_1: (+1)
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x4648             MOV      R0,R9
   \   000000BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   1463            if(ucRet==1){
   \   000000C0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C2   0x2F01             CMP      R7,#+1
   \   000000C4   0xD101             BNE.N    ??SMotoMoveWait_4
   1464              return TRUE;
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0xE000             B.N      ??SMotoMoveWait_5
   1465            }
   1466            return FALSE;
   \                     ??SMotoMoveWait_4: (+1)
   \   000000CA   0x2000             MOVS     R0,#+0
   \                     ??SMotoMoveWait_5: (+1)
   \   000000CC   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1467          }
   1468          
   1469          /********************************************************************************************************
   1470          ** 函数名称: DMotoMoveWait
   1471          ** 功能描述:
   1472          ** 输 　 入:
   1473          **
   1474          ** 输　  出:
   1475          **
   1476          ** 全局变量:
   1477          ** 调用模块:
   1478          **
   1479          ** 作　  者: John Tonny
   1480          ** 日　  期: 2005年05月01日
   1481          **------------------------------------------------------------------------------------------------------
   1482          ** 修 改 人:
   1483          ** 日　  期:
   1484          **------------------------------------------------------------------------------------------------------
   1485          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1486          void DMotoMoveWait(INT16U uiTime,INT8U ucDirection,INT8U ucSelected)
   1487          {
   \                     DMotoMoveWait: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   1488            OS_ERR os_err;
   1489            INT8U ucDSelected=m_ucDMotoBit[ucSelected];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   0000000E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   0x5D87             LDRB     R7,[R0, R6]
   1490          
   1491            DMotoStart(DMOTO_FREQ_DEFAULT,m_uiDMotoPwm[ucDSelected],ucDirection,uiTime,ucDSelected);
   \   00000012   0x0038             MOVS     R0,R7
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x0023             MOVS     R3,R4
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0xF830 0x1017      LDRH     R1,[R0, R7, LSL #+1]
   \   0000002A   0xF44F 0x60FA      MOV      R0,#+2000
   \   0000002E   0x.... 0x....      BL       DMotoStart
   1492            OSTimeDly(uiTime*10,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000032   0xAA01             ADD      R2,SP,#+4
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x200A             MOVS     R0,#+10
   \   0000003A   0xFB00 0xF004      MUL      R0,R0,R4
   \   0000003E   0x.... 0x....      BL       OSTimeDly
   1493            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);	
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x0038             MOVS     R0,R7
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       MOTO_DC_DISABLED
   1494          }
   \   0000004C   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
   1495          
   1496          
   1497          /********************************************************************************************************
   1498          ** 函数名称: DMotoPosAValid
   1499          ** 功能描述:
   1500          ** 输 　 入:
   1501          **
   1502          ** 输　  出:
   1503          **
   1504          ** 全局变量:
   1505          ** 调用模块:
   1506          **
   1507          ** 作　  者: John Tonny
   1508          ** 日　  期: 2005年05月01日
   1509          **------------------------------------------------------------------------------------------------------
   1510          ** 修 改 人:
   1511          ** 日　  期:
   1512          **------------------------------------------------------------------------------------------------------
   1513          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1514          INT8U DMotoPosAValid(INT8U ucSelected)
   1515          {
   \                     DMotoPosAValid: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1516            INT8U ucTmp;
   1517            INT8U ucPos;
   1518            INT32U ulTmp;
   1519          
   1520            
   1521            if(ucSelected>=CARDMACHINE_DMOTO_NUMS){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xDB01             BLT.N    ??DMotoPosAValid_0
   1522              return FALSE;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE019             B.N      ??DMotoPosAValid_1
   1523            }
   1524          
   1525            ucPos=DMotoPosBySelected(ucSelected);	
   \                     ??DMotoPosAValid_0: (+1)
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       DMotoPosBySelected
   \   00000016   0x0006             MOVS     R6,R0
   1526            ucPos=DMotoByPos(ucPos);
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       DMotoByPos
   \   00000020   0x0006             MOVS     R6,R0
   1527            ucTmp=m_ucKeyBit[DMOTO1_POSA_BIT+ucPos*8];
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0xF810 0x0036      LDRB     R0,[R0, R6, LSL #+3]
   \   0000002C   0x0005             MOVS     R5,R0
   1528            ulTmp=GetKeyOutput();  
   \   0000002E   0x.... 0x....      BL       GetKeyOutput
   \   00000032   0x0007             MOVS     R7,R0
   1529            
   1530            if(CheckBit(ulTmp,ucTmp)){
   \   00000034   0x0038             MOVS     R0,R7
   \   00000036   0x40E8             LSRS     R0,R0,R5
   \   00000038   0x07C0             LSLS     R0,R0,#+31
   \   0000003A   0xD501             BPL.N    ??DMotoPosAValid_2
   1531              return TRUE;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xE000             B.N      ??DMotoPosAValid_1
   1532            }else{
   1533              return FALSE;
   \                     ??DMotoPosAValid_2: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??DMotoPosAValid_1: (+1)
   \   00000042   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1534            }
   1535          }
   1536          
   1537          /********************************************************************************************************
   1538          ** 函数名称: DMotoPosBValid
   1539          ** 功能描述:
   1540          ** 输 　 入:
   1541          **
   1542          ** 输　  出:
   1543          **
   1544          ** 全局变量:
   1545          ** 调用模块:
   1546          **
   1547          ** 作　  者: John Tonny
   1548          ** 日　  期: 2005年05月01日
   1549          **------------------------------------------------------------------------------------------------------
   1550          ** 修 改 人:
   1551          ** 日　  期:
   1552          **------------------------------------------------------------------------------------------------------
   1553          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1554          INT8U DMotoPosBValid(INT8U ucSelected)
   1555          {
   \                     DMotoPosBValid: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1556            INT8U ucTmp;
   1557            INT8U ucPos;
   1558            INT32U ulTmp;
   1559          
   1560            
   1561            if(ucSelected>=CARDMACHINE_DMOTO_NUMS){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xDB01             BLT.N    ??DMotoPosBValid_0
   1562              return FALSE;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE01A             B.N      ??DMotoPosBValid_1
   1563            }
   1564          
   1565            ucPos=DMotoPosBySelected(ucSelected);	
   \                     ??DMotoPosBValid_0: (+1)
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       DMotoPosBySelected
   \   00000016   0x0006             MOVS     R6,R0
   1566            ucPos=DMotoByPos(ucPos);
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       DMotoByPos
   \   00000020   0x0006             MOVS     R6,R0
   1567            ucTmp=m_ucKeyBit[DMOTO1_POSB_BIT+ucPos*8];
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0xEB00 0x00C6      ADD      R0,R0,R6, LSL #+3
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x0005             MOVS     R5,R0
   1568            ulTmp=GetKeyOutput();  
   \   00000030   0x.... 0x....      BL       GetKeyOutput
   \   00000034   0x0007             MOVS     R7,R0
   1569            
   1570            if(CheckBit(ulTmp,ucTmp)){
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0x40E8             LSRS     R0,R0,R5
   \   0000003A   0x07C0             LSLS     R0,R0,#+31
   \   0000003C   0xD501             BPL.N    ??DMotoPosBValid_2
   1571              return TRUE;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE000             B.N      ??DMotoPosBValid_1
   1572            }else{
   1573              return FALSE;
   \                     ??DMotoPosBValid_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \                     ??DMotoPosBValid_1: (+1)
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1574            }
   1575          }
   1576          
   1577          /********************************************************************************************************
   1578          ** 函数名称: DMotoPosAWaitEnter
   1579          ** 功能描述:
   1580          ** 输 　 入:
   1581          **
   1582          ** 输　  出:
   1583          **
   1584          ** 全局变量:
   1585          ** 调用模块:
   1586          **
   1587          ** 作　  者: John Tonny
   1588          ** 日　  期: 2005年05月01日
   1589          **------------------------------------------------------------------------------------------------------
   1590          ** 修 改 人:
   1591          ** 日　  期:
   1592          **------------------------------------------------------------------------------------------------------
   1593          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1594          INT8U DMotoPosAWaitEnter(INT16U uiWaitTime,INT8U ucSelected)
   1595          {
   \                     DMotoPosAWaitEnter: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1596            OS_ERR os_err;
   1597            INT16U uiTimes=uiWaitTime;
   \   00000008   0x0026             MOVS     R6,R4
   1598            
   1599            while(!DMotoPosAValid(ucSelected)){
   \                     ??DMotoPosAWaitEnter_0: (+1)
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       DMotoPosAValid
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD10B             BNE.N    ??DMotoPosAWaitEnter_1
   1600              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err);
   \   00000016   0x466A             MOV      R2,SP
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       OSTimeDly
   1601              if(uiTimes>0){
   \   00000020   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xD001             BEQ.N    ??DMotoPosAWaitEnter_2
   1602                uiTimes--;
   \   00000026   0x1E76             SUBS     R6,R6,#+1
   \   00000028   0xE7EF             B.N      ??DMotoPosAWaitEnter_0
   1603              }else{
   1604                return FALSE;
   \                     ??DMotoPosAWaitEnter_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B.N      ??DMotoPosAWaitEnter_3
   1605              }
   1606            }
   1607            return TRUE;
   \                     ??DMotoPosAWaitEnter_1: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??DMotoPosAWaitEnter_3: (+1)
   \   00000030   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   1608          }
   1609          
   1610          /********************************************************************************************************
   1611          ** 函数名称: DMotoPosBWaitEnter
   1612          ** 功能描述:
   1613          ** 输 　 入:
   1614          **
   1615          ** 输　  出:
   1616          **
   1617          ** 全局变量:
   1618          ** 调用模块:
   1619          **
   1620          ** 作　  者: John Tonny
   1621          ** 日　  期: 2005年05月01日
   1622          **------------------------------------------------------------------------------------------------------
   1623          ** 修 改 人:
   1624          ** 日　  期:
   1625          **------------------------------------------------------------------------------------------------------
   1626          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1627          INT8U DMotoPosBWaitEnter(INT16U uiWaitTime,INT8U ucSelected)
   1628          {
   \                     DMotoPosBWaitEnter: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1629            OS_ERR os_err;
   1630            INT16U uiTimes=uiWaitTime;
   \   00000008   0x0026             MOVS     R6,R4
   1631            
   1632            while(!DMotoPosBValid(ucSelected)){
   \                     ??DMotoPosBWaitEnter_0: (+1)
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       DMotoPosBValid
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD10B             BNE.N    ??DMotoPosBWaitEnter_1
   1633              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err);
   \   00000016   0x466A             MOV      R2,SP
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       OSTimeDly
   1634              if(uiTimes>0){
   \   00000020   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xD001             BEQ.N    ??DMotoPosBWaitEnter_2
   1635                uiTimes--;
   \   00000026   0x1E76             SUBS     R6,R6,#+1
   \   00000028   0xE7EF             B.N      ??DMotoPosBWaitEnter_0
   1636              }else{
   1637                return FALSE;
   \                     ??DMotoPosBWaitEnter_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B.N      ??DMotoPosBWaitEnter_3
   1638              }
   1639            }
   1640            return TRUE;
   \                     ??DMotoPosBWaitEnter_1: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??DMotoPosBWaitEnter_3: (+1)
   \   00000030   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   1641          }
   1642          
   1643          /********************************************************************************************************
   1644          ** 函数名称: SMotoReset
   1645          ** 功能描述:
   1646          ** 输 　 入:
   1647          **
   1648          ** 输　  出:
   1649          **
   1650          ** 全局变量:
   1651          ** 调用模块:
   1652          **
   1653          ** 作　  者: John Tonny
   1654          ** 日　  期: 2005年05月01日
   1655          **------------------------------------------------------------------------------------------------------
   1656          ** 修 改 人:
   1657          ** 日　  期:
   1658          **------------------------------------------------------------------------------------------------------
   1659          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1660          INT8U SMotoReset(INT8U ucMode,INT8U ucSelected)
   1661          {
   \                     SMotoReset: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1662            INT8U ucRet;
   1663            INT8U ucSSelected=m_ucSMotoBit[ucSelected];
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x5D47             LDRB     R7,[R0, R5]
   1664            INT8U ucRetrys=0;
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   1665          
   1666            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0xF810 0x9007      LDRB     R9,[R0, R7]
   1667          
   1668            if(DMotoPosAValid(ucSelected)){
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       DMotoPosAValid
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD001             BEQ.N    ??SMotoReset_0
   1669              return TRUE;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE01F             B.N      ??SMotoReset_1
   1670            }
   1671            
   1672            /*
   1673            if(!ucMode){
   1674              SMotoStart(ucSMotoFreq,SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT,MOTO_BACKWARD_MODE,ucSSelected);    
   1675              return TRUE;
   1676            }*/
   1677            
   1678            while(ucRetrys++<MOTO_RETRYS){
   \                     ??SMotoReset_0: (+1)
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0xF110 0x0801      ADDS     R8,R0,#+1
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2803             CMP      R0,#+3
   \   00000038   0xDA18             BGE.N    ??SMotoReset_2
   1679              SMotoStart(ucSMotoFreq,SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT,MOTO_BACKWARD_MODE,ucSSelected);    
   \   0000003A   0x003B             MOVS     R3,R7
   \   0000003C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0xF44F 0x7148      MOV      R1,#+800
   \   00000044   0x4648             MOV      R0,R9
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       SMotoStart
   1680              ucRet=DMotoPosAWaitEnter(SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT-10,0);//ucSelected);
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xF240 0x3016      MOVW     R0,#+790
   \   00000052   0x.... 0x....      BL       DMotoPosAWaitEnter
   \   00000056   0x0006             MOVS     R6,R0
   1681              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x0038             MOVS     R0,R7
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       MOTO_STEP_DISABLED
   1682              if(ucRet){
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0x2E00             CMP      R6,#+0
   \   00000066   0xD0E2             BEQ.N    ??SMotoReset_0
   1683                return TRUE;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xE000             B.N      ??SMotoReset_1
   1684              }
   1685            }
   1686            return FALSE;
   \                     ??SMotoReset_2: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??SMotoReset_1: (+1)
   \   0000006E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1687          }
   1688          
   1689          /********************************************************************************************************
   1690          ** 函数名称: MotoReset
   1691          ** 功能描述:
   1692          ** 输 　 入:
   1693          **
   1694          ** 输　  出:
   1695          **
   1696          ** 全局变量:
   1697          ** 调用模块:
   1698          **
   1699          ** 作　  者: John Tonny
   1700          ** 日　  期: 2005年05月01日
   1701          **------------------------------------------------------------------------------------------------------
   1702          ** 修 改 人:
   1703          ** 日　  期:
   1704          **------------------------------------------------------------------------------------------------------
   1705          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1706          INT8U MotoReset(INT8U ucMode,INT8U ucSelected)
   1707          {
   \                     MotoReset: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1708            INT8U ucRet;
   1709            INT16U uiDMotoPwm;
   1710            INT8U ucDSelected=m_ucDMotoBit[ucSelected];
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0xF810 0x8005      LDRB     R8,[R0, R5]
   1711            INT8U ucRetrys=0;
   \   00000012   0xF05F 0x0900      MOVS     R9,#+0
   1712          
   1713            uiDMotoPwm=m_uiDMotoPwm[ucDSelected];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000001A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001E   0xF830 0x0018      LDRH     R0,[R0, R8, LSL #+1]
   \   00000022   0x0007             MOVS     R7,R0
   1714          
   1715            if(DMotoPosAValid(ucSelected)){
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       DMotoPosAValid
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD001             BEQ.N    ??MotoReset_0
   1716              return TRUE;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE031             B.N      ??MotoReset_1
   1717            }
   1718          
   1719            if(!ucMode){
   \                     ??MotoReset_0: (+1)
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD10C             BNE.N    ??MotoReset_2
   1720              DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,DMOTO_TIME_SK_DEFAULT,ucDSelected);
   \   0000003A   0x4640             MOV      R0,R8
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x2350             MOVS     R3,#+80
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x0039             MOVS     R1,R7
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0xF44F 0x60FA      MOV      R0,#+2000
   \   0000004C   0x.... 0x....      BL       DMotoStart
   1721              return TRUE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE021             B.N      ??MotoReset_1
   1722            }
   1723            
   1724            while(ucRetrys++<MOTO_RETRYS){
   \                     ??MotoReset_2: (+1)
   \   00000054   0x4648             MOV      R0,R9
   \   00000056   0xF110 0x0901      ADDS     R9,R0,#+1
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x2803             CMP      R0,#+3
   \   0000005E   0xDA1A             BGE.N    ??MotoReset_3
   1725              DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,DMOTO_TIME_SK_DEFAULT,ucDSelected);
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0x2350             MOVS     R3,#+80
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x0039             MOVS     R1,R7
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000072   0x.... 0x....      BL       DMotoStart
   1726              ucRet=DMotoPosAWaitEnter(DMOTO_TIME_SK_DEFAULT-10,ucSelected);
   \   00000076   0x0029             MOVS     R1,R5
   \   00000078   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007A   0x2046             MOVS     R0,#+70
   \   0000007C   0x.... 0x....      BL       DMotoPosAWaitEnter
   \   00000080   0x0006             MOVS     R6,R0
   1727              MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x4640             MOV      R0,R8
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x.... 0x....      BL       MOTO_DC_DISABLED
   1728              if(ucRet){
   \   0000008C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008E   0x2E00             CMP      R6,#+0
   \   00000090   0xD0E0             BEQ.N    ??MotoReset_2
   1729                return TRUE;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE000             B.N      ??MotoReset_1
   1730              }
   1731            }
   1732            return FALSE;
   \                     ??MotoReset_3: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??MotoReset_1: (+1)
   \   00000098   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1733          }
   1734          
   1735          
   1736          /********************************************************************************************************
   1737          ** 函数名称: DMotoSwitchStop
   1738          ** 功能描述:
   1739          ** 输 　 入:
   1740          **
   1741          ** 输　  出:
   1742          **
   1743          ** 全局变量:
   1744          ** 调用模块:
   1745          **
   1746          ** 作　  者: John Tonny
   1747          ** 日　  期: 2005年05月01日
   1748          **------------------------------------------------------------------------------------------------------
   1749          ** 修 改 人:
   1750          ** 日　  期:
   1751          **------------------------------------------------------------------------------------------------------
   1752          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1753          void DMotoSwitchStop(void)
   1754          {
   \                     DMotoSwitchStop: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   1755            INT8U i;
   1756            
   1757            INT8U ucDMotoPosABit;
   1758            INT8U ucDMotoPosBBit;
   1759            INT8U ucCardPosBit;
   1760            
   1761            INT8U ucSelected;
   1762            
   1763            INT8U ucABit[3];
   1764            INT8U ucBBit[3];
   1765            
   1766            static INT32U ulKeyOutput1=0; 
   1767            
   1768            INT8U ucType=DEV_TYPE();
   \   00000006   0x.... 0x....      BL       DEV_TYPE
   \   0000000A   0x4681             MOV      R9,R0
   1769            
   1770            g_usrGetKey1.ulKeyInput=GetKey();
   \   0000000C   0x.... 0x....      BL       GetKey
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000014   0x6108             STR      R0,[R1, #+16]
   1771            KeyDeBounce1();
   \   00000016   0x.... 0x....      BL       KeyDeBounce1
   1772          
   1773            if(ulKeyOutput1==g_usrGetKey1.ulKeyOutput){
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000024   0x6949             LDR      R1,[R1, #+20]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xF000 0x8086      BEQ.W    ??DMotoSwitchStop_0
   1774              return;
   1775            }
   1776            
   1777            ucABit[0]=m_ucKeyBit[DMOTO1_POSA_BIT];
   \                     ??DMotoSwitchStop_1: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1778            ucABit[1]=m_ucKeyBit[DMOTO2_POSA_BIT];
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   0000003A   0x7A00             LDRB     R0,[R0, #+8]
   \   0000003C   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1779            ucABit[2]=m_ucKeyBit[DMOTO3_POSA_BIT];
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000044   0x7C00             LDRB     R0,[R0, #+16]
   \   00000046   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1780            
   1781            ucBBit[0]=m_ucKeyBit[DMOTO1_POSB_BIT];
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   0000004E   0x7840             LDRB     R0,[R0, #+1]
   \   00000050   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1782            ucBBit[1]=m_ucKeyBit[DMOTO2_POSB_BIT];
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000058   0x7A40             LDRB     R0,[R0, #+9]
   \   0000005A   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1783            ucBBit[2]=m_ucKeyBit[DMOTO3_POSB_BIT];
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000062   0x7C40             LDRB     R0,[R0, #+17]
   \   00000064   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1784          
   1785            for(i=0;i<CARDMACHINE_CARDBOX_NUMS;i++){
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x0004             MOVS     R4,R0
   \                     ??DMotoSwitchStop_2: (+1)
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x2C03             CMP      R4,#+3
   \   00000070   0xDA5C             BGE.N    ??DMotoSwitchStop_3
   1786              ucDMotoPosABit=ucABit[i];
   \   00000072   0xA801             ADD      R0,SP,#+4
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x5D00             LDRB     R0,[R0, R4]
   \   00000078   0x0005             MOVS     R5,R0
   1787              if(CheckBit(g_usrGetKey1.ulKeyOutput,ucDMotoPosABit) && !CheckBit(ulKeyOutput1,ucDMotoPosABit)){
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000007E   0x6940             LDR      R0,[R0, #+20]
   \   00000080   0x40E8             LSRS     R0,R0,R5
   \   00000082   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD012             BEQ.N    ??DMotoSwitchStop_4
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x40E8             LSRS     R0,R0,R5
   \   00000094   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD109             BNE.N    ??DMotoSwitchStop_4
   1788                ucSelected=DMotoByPos(i);
   \   0000009E   0x0020             MOVS     R0,R4
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x.... 0x....      BL       DMotoByPos
   \   000000A6   0x4680             MOV      R8,R0
   1789                MOTO_DC_DISABLED(ucSelected,INTERRUPT_MODE);
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x4640             MOV      R0,R8
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x.... 0x....      BL       MOTO_DC_DISABLED
   1790              }
   1791              ucDMotoPosBBit=ucBBit[i];
   \                     ??DMotoSwitchStop_4: (+1)
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0x5D00             LDRB     R0,[R0, R4]
   \   000000B8   0x0006             MOVS     R6,R0
   1792              if(CheckBit(g_usrGetKey1.ulKeyOutput,ucDMotoPosBBit) && !CheckBit(ulKeyOutput1,ucDMotoPosBBit)){
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable21
   \   000000BE   0x6940             LDR      R0,[R0, #+20]
   \   000000C0   0x40F0             LSRS     R0,R0,R6
   \   000000C2   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD012             BEQ.N    ??DMotoSwitchStop_5
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x40F0             LSRS     R0,R0,R6
   \   000000D4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD109             BNE.N    ??DMotoSwitchStop_5
   1793                ucSelected=DMotoByPos(i);
   \   000000DE   0x0020             MOVS     R0,R4
   \   000000E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E2   0x.... 0x....      BL       DMotoByPos
   \   000000E6   0x4680             MOV      R8,R0
   1794                MOTO_DC_DISABLED(ucSelected,INTERRUPT_MODE);
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x4640             MOV      R0,R8
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x.... 0x....      BL       MOTO_DC_DISABLED
   1795              }
   1796              
   1797              ucCardPosBit=m_ucKeyBit[CARDBOX1_POS_BIT+i*8];
   \                     ??DMotoSwitchStop_5: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   000000F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F8   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   000000FC   0x7980             LDRB     R0,[R0, #+6]
   \   000000FE   0x0007             MOVS     R7,R0
   1798              if(!CheckBit(g_usrGetKey1.ulKeyOutput,ucCardPosBit)){
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000104   0x6940             LDR      R0,[R0, #+20]
   \   00000106   0x40F8             LSRS     R0,R0,R7
   \   00000108   0x07C0             LSLS     R0,R0,#+31
   \   0000010A   0xD40D             BMI.N    ??DMotoSwitchStop_6
   1799                m_usrBoxInfo[i].usrFlag.usrBit.bSelftest=0;													//?è?úμ20,è?oó?′?úμ21,×??ì1y3ìíê3é
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000110   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000112   0x0161             LSLS     R1,R4,#+5
   \   00000114   0x4408             ADD      R0,R0,R1
   \   00000116   0x7B80             LDRB     R0,[R0, #+14]
   \   00000118   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000120   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000122   0x0162             LSLS     R2,R4,#+5
   \   00000124   0x4411             ADD      R1,R1,R2
   \   00000126   0x7388             STRB     R0,[R1, #+14]
   1800              }
   1801            }
   \                     ??DMotoSwitchStop_6: (+1)
   \   00000128   0x1C64             ADDS     R4,R4,#+1
   \   0000012A   0xE79F             B.N      ??DMotoSwitchStop_2
   1802            ulKeyOutput1=g_usrGetKey1.ulKeyOutput;
   \                     ??DMotoSwitchStop_3: (+1)
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000130   0x6940             LDR      R0,[R0, #+20]
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable21_1
   \   00000136   0x6008             STR      R0,[R1, #+0]
   1803          }
   \                     ??DMotoSwitchStop_0: (+1)
   \   00000138   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return

   \                                 In section .bss, align 4
   \                     `DMotoSwitchStop::ulKeyOutput1`:
   \   00000000                      DS8 4
   1804          
   1805          /*******************************************************************************************************
   1806          ** oˉêy??3?: GCardToAnt
   1807          ** 1|?ü?èê?: 
   1808          ** ê? ?? è?:
   1809          **
   1810          ** ê???  3?: 
   1811          **
   1812          ** è???±?á?:
   1813          ** μ÷ó??￡?é:
   1814          **
   1815          ** ×÷??  ??: John Tonny
   1816          ** è???  ?ú: 2009?ê11??01è?
   1817          **------------------------------------------------------------------------------------------------------
   1818          ** DT ?? è?:
   1819          ** è???  ?ú:
   1820          **------------------------------------------------------------------------------------------------------
   1821          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1822          INT8U GCardToAnt(INT8U ucRetrys)
   1823          {
   \                     GCardToAnt: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   1824            OS_ERR os_err;
   1825            
   1826            INT16U uiTimes;
   1827            INT16U uiDelays;
   1828            INT8U ucRet;
   1829            INT32U ulTmp;
   1830            INT8U ucTmp;
   1831            INT8U ucDSelected=m_ucDMotoBit[DMOTO_FIRST];
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   0000000C   0xF890 0x9000      LDRB     R9,[R0, #+0]
   1832            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000014   0xF890 0xA000      LDRB     R10,[R0, #+0]
   1833                    
   1834            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   0000001C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000020   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   00000024   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1835            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000002C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000030   0xF830 0x0019      LDRH     R0,[R0, R9, LSL #+1]
   \   00000034   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   1836            
   1837            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   0000003C   0x7E00             LDRB     R0,[R0, #+24]
   \   0000003E   0xF88D 0x0007      STRB     R0,[SP, #+7]
   1838            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000046   0x7E80             LDRB     R0,[R0, #+26]
   \   00000048   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1839            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000050   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000052   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1840            
   1841            CPU_SR_ALLOC();
   \   00000056   0xF05F 0x0B00      MOVS     R11,#+0
   1842            if(ucRetrys==1){        
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C01             CMP      R4,#+1
   \   0000005E   0xD13C             BNE.N    ??GCardToAnt_0
   1843              ulTmp=GetKeyOutput();    
   \   00000060   0x.... 0x....      BL       GetKeyOutput
   \   00000064   0x4680             MOV      R8,R0
   1844              ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulTmp>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1) ;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   0000006A   0x7E00             LDRB     R0,[R0, #+24]
   \   0000006C   0x4641             MOV      R1,R8
   \   0000006E   0x40C1             LSRS     R1,R1,R0
   \   00000070   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable21_3
   \   00000078   0x7E89             LDRB     R1,[R1, #+26]
   \   0000007A   0x4642             MOV      R2,R8
   \   0000007C   0x40CA             LSRS     R2,R2,R1
   \   0000007E   0x0051             LSLS     R1,R2,#+1
   \   00000080   0xF011 0x0106      ANDS     R1,R1,#0x6
   \   00000084   0x4308             ORRS     R0,R1,R0
   \   00000086   0xF88D 0x0008      STRB     R0,[SP, #+8]
   1845              if(ucTmp){
   \   0000008A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD023             BEQ.N    ??GCardToAnt_0
   1846                if(SMotoMoveWait(SMOTO_COUNT_GK_CLEAR_DEFAULT,MOTO_BACKWARD_MODE,SMOTO_FIRST)){
   \   00000092   0x2200             MOVS     R2,#+0
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0xF44F 0x60E1      MOV      R0,#+1800
   \   0000009A   0x.... 0x....      BL       SMotoMoveWait
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD002             BEQ.N    ??GCardToAnt_1
   1847                  ucRet=3;
   \   000000A2   0x2003             MOVS     R0,#+3
   \   000000A4   0x0007             MOVS     R7,R0
   \   000000A6   0xE001             B.N      ??GCardToAnt_2
   1848                }else{
   1849                  ucRet=4;
   \                     ??GCardToAnt_1: (+1)
   \   000000A8   0x2004             MOVS     R0,#+4
   \   000000AA   0x0007             MOVS     R7,R0
   1850                }
   1851                if(ValidBit(ulTmp,ucCardPosDBit) && NoValidBit(ulTmp,ucCardPosCBit)){
   \                     ??GCardToAnt_2: (+1)
   \   000000AC   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000000B0   0x4641             MOV      R1,R8
   \   000000B2   0x40C1             LSRS     R1,R1,R0
   \   000000B4   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD00A             BEQ.N    ??GCardToAnt_3
   \   000000BE   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000C2   0x4641             MOV      R1,R8
   \   000000C4   0x40C1             LSRS     R1,R1,R0
   \   000000C6   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   000000CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD101             BNE.N    ??GCardToAnt_3
   1852                  ucRet=5;
   \   000000D0   0x2005             MOVS     R0,#+5
   \   000000D2   0x0007             MOVS     R7,R0
   1853                }
   1854                return ucRet;
   \                     ??GCardToAnt_3: (+1)
   \   000000D4   0x0038             MOVS     R0,R7
   \   000000D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D8   0xE077             B.N      ??GCardToAnt_4
   1855              }
   1856            }
   1857          
   1858            uiDelays=MOTO_INTERFER_TIME_DEFAULT/ACTION_DELAY_TIME_DEFAULT;
   \                     ??GCardToAnt_0: (+1)
   \   000000DA   0x2014             MOVS     R0,#+20
   \   000000DC   0x0006             MOVS     R6,R0
   1859            uiTimes=(((INT32U)SMOTO_COUNT_GK_INTOANT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+20/ACTION_DELAY_TIME_DEFAULT;
   \   000000DE   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000E2   0xF44F 0x61E1      MOV      R1,#+1800
   \   000000E6   0x4348             MULS     R0,R1,R0
   \   000000E8   0xF44F 0x71FA      MOV      R1,#+500
   \   000000EC   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000F0   0x1D00             ADDS     R0,R0,#+4
   \   000000F2   0x0005             MOVS     R5,R0
   1860            
   1861            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,DMOTO_TIME_GK_DEFAULT,ucDSelected);
   \   000000F4   0x4648             MOV      R0,R9
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F8   0x9000             STR      R0,[SP, #+0]
   \   000000FA   0x2346             MOVS     R3,#+70
   \   000000FC   0x2201             MOVS     R2,#+1
   \   000000FE   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   00000102   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000106   0x.... 0x....      BL       DMotoStart
   1862            SMotoStart(ucSMotoFreq,SMOTO_COUNT_GK_INTOANT_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);
   \   0000010A   0x4653             MOV      R3,R10
   \   0000010C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000010E   0x2200             MOVS     R2,#+0
   \   00000110   0xF44F 0x61E1      MOV      R1,#+1800
   \   00000114   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000118   0x.... 0x....      BL       SMotoStart
   1863            ucRet=0;
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x0007             MOVS     R7,R0
   1864            while(!ucRet){
   \                     ??GCardToAnt_5: (+1)
   \   00000120   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000122   0x2F00             CMP      R7,#+0
   \   00000124   0xD133             BNE.N    ??GCardToAnt_6
   1865              OSTimeDly(ACTION_DELAY_TIME_DEFAULT,OS_OPT_TIME_DLY, &os_err);         
   \   00000126   0xAA03             ADD      R2,SP,#+12
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0x2005             MOVS     R0,#+5
   \   0000012C   0x.... 0x....      BL       OSTimeDly
   1866              if(uiDelays>0){
   \   00000130   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000132   0x2E00             CMP      R6,#+0
   \   00000134   0xD001             BEQ.N    ??GCardToAnt_7
   1867                uiDelays--;
   \   00000136   0x1E76             SUBS     R6,R6,#+1
   \   00000138   0xE7F2             B.N      ??GCardToAnt_5
   1868              }else{
   1869                ulTmp=GetKeyOutput();    
   \                     ??GCardToAnt_7: (+1)
   \   0000013A   0x.... 0x....      BL       GetKeyOutput
   \   0000013E   0x4680             MOV      R8,R0
   1870                if(CheckBit(ulTmp,ucCardPosABit)){
   \   00000140   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   00000144   0x4641             MOV      R1,R8
   \   00000146   0x40C1             LSRS     R1,R1,R0
   \   00000148   0x07C8             LSLS     R0,R1,#+31
   \   0000014A   0xD501             BPL.N    ??GCardToAnt_8
   1871                  ucRet=1;
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0x0007             MOVS     R7,R0
   1872                }
   1873                /*if(CheckBit(ulTmp,ucCardPosCBit)){
   1874                  ucRet=2;
   1875                }*/
   1876          
   1877                OS_ENTER_CRITICAL();
   \                     ??GCardToAnt_8: (+1)
   \   00000150   0x.... 0x....      BL       CPU_SR_Save
   \   00000154   0x4683             MOV      R11,R0
   \   00000156   0x.... 0x....      BL       CPU_IntDisMeasStart
   1878                if(!g_usrSMoto[ucSSelected].uiCounts){
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable22
   \   0000015E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000162   0x210A             MOVS     R1,#+10
   \   00000164   0xFB01 0xF10A      MUL      R1,R1,R10
   \   00000168   0x4408             ADD      R0,R0,R1
   \   0000016A   0x8840             LDRH     R0,[R0, #+2]
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD101             BNE.N    ??GCardToAnt_9
   1879                  ucRet=3;
   \   00000170   0x2003             MOVS     R0,#+3
   \   00000172   0x0007             MOVS     R7,R0
   1880                }
   1881                OS_EXIT_CRITICAL();
   \                     ??GCardToAnt_9: (+1)
   \   00000174   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000178   0x4658             MOV      R0,R11
   \   0000017A   0x.... 0x....      BL       CPU_SR_Restore
   1882                if(uiTimes>0){
   \   0000017E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000180   0x2D00             CMP      R5,#+0
   \   00000182   0xD001             BEQ.N    ??GCardToAnt_10
   1883                  uiTimes--;
   \   00000184   0x1E6D             SUBS     R5,R5,#+1
   \   00000186   0xE7CB             B.N      ??GCardToAnt_5
   1884                }else{
   1885                  ucRet=4;                                                                      //系统故障
   \                     ??GCardToAnt_10: (+1)
   \   00000188   0x2004             MOVS     R0,#+4
   \   0000018A   0x0007             MOVS     R7,R0
   \   0000018C   0xE7C8             B.N      ??GCardToAnt_5
   1886                }
   1887              }
   1888            }
   1889            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \                     ??GCardToAnt_6: (+1)
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x4648             MOV      R0,R9
   \   00000192   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000194   0x.... 0x....      BL       MOTO_DC_DISABLED
   1890            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000198   0x2100             MOVS     R1,#+0
   \   0000019A   0x4650             MOV      R0,R10
   \   0000019C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019E   0x.... 0x....      BL       MOTO_STEP_DISABLED
   1891          
   1892          #if MOTO_INTERFER_TIME_EN==1
   1893            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT,OS_OPT_TIME_DLY, &os_err) ;         
   1894          #endif	
   1895            ulTmp=GetKey();    
   \   000001A2   0x.... 0x....      BL       GetKey
   \   000001A6   0x4680             MOV      R8,R0
   1896            if(CheckBit(ulTmp,m_ucKeyBit[CARD_POSA_BIT])){
   \   000001A8   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   000001AC   0x7E00             LDRB     R0,[R0, #+24]
   \   000001AE   0x4641             MOV      R1,R8
   \   000001B0   0x40C1             LSRS     R1,R1,R0
   \   000001B2   0x07C8             LSLS     R0,R1,#+31
   \   000001B4   0xD501             BPL.N    ??GCardToAnt_11
   1897              ucRet=1;
   \   000001B6   0x2001             MOVS     R0,#+1
   \   000001B8   0x0007             MOVS     R7,R0
   1898            }    
   1899            
   1900            DMotoMoveWait(400,MOTO_FORWARD_MODE,DMOTO_FIRST);
   \                     ??GCardToAnt_11: (+1)
   \   000001BA   0x2200             MOVS     R2,#+0
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0xF44F 0x70C8      MOV      R0,#+400
   \   000001C2   0x.... 0x....      BL       DMotoMoveWait
   1901            
   1902            return ucRet;
   \   000001C6   0x0038             MOVS     R0,R7
   \   000001C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??GCardToAnt_4: (+1)
   \   000001CA   0xB005             ADD      SP,SP,#+20
   \   000001CC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1903          }
   1904          
   1905          /*******************************************************************************************************
   1906          ** oˉêy??3?: GCardToAntProcess
   1907          ** 1|?ü?èê?: 
   1908          ** ê? ?? è?:
   1909          **
   1910          ** ê???  3?:
   1911          **
   1912          ** è???±?á?:
   1913          ** μ÷ó??￡?é:
   1914          **
   1915          ** ×÷??  ??: John Tonny
   1916          ** è???  ?ú: 2009?ê11??01è?
   1917          **------------------------------------------------------------------------------------------------------
   1918          ** DT ?? è?:
   1919          ** è???  ?ú:
   1920          **------------------------------------------------------------------------------------------------------
   1921          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1922          INT8U GCardToAntProcess(CardMachineRxData *pcommRx1Data)
   1923          {
   \                     GCardToAntProcess: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0004             MOVS     R4,R0
   1924            INT8U ucRetrys=0;
   \   00000006   0x2700             MOVS     R7,#+0
   1925            INT8U ucData[32];
   1926            INT8U ucMode;
   1927            INT8U ucRet;
   1928          	
   1929            ucMode=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
   1930            if(!pcommRx1Data){
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD101             BNE.N    ??GCardToAntProcess_0
   1931              ucMode=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0005             MOVS     R5,R0
   1932            }
   1933          	
   1934            ucRetrys=0;
   \                     ??GCardToAntProcess_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0007             MOVS     R7,R0
   1935            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??GCardToAntProcess_1: (+1)
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2F04             CMP      R7,#+4
   \   0000001E   0xDA0F             BGE.N    ??GCardToAntProcess_2
   1936              ucRet=GCardToAnt(ucRetrys);
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       GCardToAnt
   \   00000028   0x0006             MOVS     R6,R0
   1937              if(ucRet==1){
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E01             CMP      R6,#+1
   \   0000002E   0xD007             BEQ.N    ??GCardToAntProcess_2
   1938                break;
   1939              }else if(ucRet==4 || ucRet==5){
   \                     ??GCardToAntProcess_3: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E04             CMP      R6,#+4
   \   00000034   0xD002             BEQ.N    ??GCardToAntProcess_4
   \   00000036   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000038   0x2E05             CMP      R6,#+5
   \   0000003A   0xD1ED             BNE.N    ??GCardToAntProcess_1
   1940                ucRetrys=100;
   \                     ??GCardToAntProcess_4: (+1)
   \   0000003C   0x2064             MOVS     R0,#+100
   \   0000003E   0x0007             MOVS     R7,R0
   1941                break;
   1942              }
   1943            }
   1944            
   1945            if(ucRetrys>MOTO_RETRYS){
   \                     ??GCardToAntProcess_2: (+1)
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x2F04             CMP      R7,#+4
   \   00000044   0xDB15             BLT.N    ??GCardToAntProcess_5
   1946              ucData[0]=SUBTYPE_ERR_BOX2ANT_FAIL;
   \   00000046   0x2053             MOVS     R0,#+83
   \   00000048   0xF88D 0x0008      STRB     R0,[SP, #+8]
   1947              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0xAB02             ADD      R3,SP,#+8
   \   00000058   0x78A2             LDRB     R2,[R4, #+2]
   \   0000005A   0x7861             LDRB     R1,[R4, #+1]
   \   0000005C   0x205E             MOVS     R0,#+94
   \   0000005E   0x.... 0x....      BL       Uart0Pack
   1948              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000062   0x2313             MOVS     R3,#+19
   \   00000064   0x2219             MOVS     R2,#+25
   \   00000066   0x2132             MOVS     R1,#+50
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x.... 0x....      BL       BuzzSet
   1949              return FALSE;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE00B             B.N      ??GCardToAntProcess_6
   1950            }else{
   1951              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \                     ??GCardToAntProcess_5: (+1)
   \   00000072   0x0028             MOVS     R0,R5
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x9001             STR      R0,[SP, #+4]
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0x2300             MOVS     R3,#+0
   \   0000007E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000080   0x7861             LDRB     R1,[R4, #+1]
   \   00000082   0x205F             MOVS     R0,#+95
   \   00000084   0x.... 0x....      BL       Uart0Pack
   1952            }
   1953            return TRUE;
   \   00000088   0x2001             MOVS     R0,#+1
   \                     ??GCardToAntProcess_6: (+1)
   \   0000008A   0xB00B             ADD      SP,SP,#+44
   \   0000008C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1954          }
   1955                         
   1956          /*******************************************************************************************************
   1957          ** oˉêy??3?: GAntToBox
   1958          ** 1|?ü?èê?: 
   1959          ** ê? ?? è?:
   1960          **
   1961          ** ê???  3?:
   1962          **
   1963          ** è???±?á?:
   1964          ** μ÷ó??￡?é:
   1965          **
   1966          ** ×÷??  ??: John Tonny
   1967          ** è???  ?ú: 2009?ê11??01è?
   1968          **------------------------------------------------------------------------------------------------------
   1969          ** DT ?? è?:
   1970          ** è???  ?ú:
   1971          **------------------------------------------------------------------------------------------------------
   1972          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1973          INT8U GAntToBox(void)
   1974          {
   \                     GAntToBox: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   1975            OS_ERR os_err;
   1976            
   1977            INT8U ucRet;
   1978            INT32U ulTmp;
   1979            INT8U ucEnterC=0;
   \   00000006   0x2500             MOVS     R5,#+0
   1980            INT8U ucLeaveC=0;	
   \   00000008   0x2600             MOVS     R6,#+0
   1981            INT8U ucDSelected=m_ucDMotoBit[DMOTO_SECOND];
   \   0000000A   0x....             LDR.N    R0,??DataTable18_6
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1982            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000016   0x7807             LDRB     R7,[R0, #+0]
   1983            
   1984            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0x5DC0             LDRB     R0,[R0, R7]
   \   00000020   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1985            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];	
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000028   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000002C   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   00000030   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   1986            INT16U uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   \   00000034   0x....             LDR.N    R0,??DataTable18_5  ;; 0x27100
   \   00000036   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000003A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003E   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1987                    
   1988            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000042   0x....             LDR.N    R0,??DataTable18_4
   \   00000044   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000046   0xF88D 0x000C      STRB     R0,[SP, #+12]
   1989            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000004A   0x....             LDR.N    R0,??DataTable18_4
   \   0000004C   0xF890 0x801A      LDRB     R8,[R0, #+26]
   1990            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000050   0x....             LDR.N    R0,??DataTable18_4
   \   00000052   0x7E00             LDRB     R0,[R0, #+24]
   \   00000054   0xF88D 0x0007      STRB     R0,[SP, #+7]
   1991            INT8U ucDMoto1PosBBit=m_ucKeyBit[DMOTO1_POSB_BIT];
   \   00000058   0x....             LDR.N    R0,??DataTable18_4
   \   0000005A   0x7840             LDRB     R0,[R0, #+1]
   \   0000005C   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1992          
   1993            INT16U uiTimes;
   1994            INT8U uiDelays;
   1995            
   1996            CPU_SR_ALLOC();
   \   00000060   0xF05F 0x0900      MOVS     R9,#+0
   1997          	
   1998            uiTimes=(((INT32U)SMOTO_COUNT_GK_ANTTOBOX_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+20/ACTION_DELAY_TIME_DEFAULT;
   \   00000064   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000068   0xF44F 0x7116      MOV      R1,#+600
   \   0000006C   0x4348             MULS     R0,R1,R0
   \   0000006E   0xF44F 0x71FA      MOV      R1,#+500
   \   00000072   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000076   0x1D00             ADDS     R0,R0,#+4
   \   00000078   0x4682             MOV      R10,R0
   1999            SMotoStart(ucSMotoFreq,SMOTO_COUNT_GK_ANTTOBOX_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);
   \   0000007A   0x003B             MOVS     R3,R7
   \   0000007C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0xF44F 0x7116      MOV      R1,#+600
   \   00000084   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000088   0x.... 0x....      BL       SMotoStart
   2000            ucRet=0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x0004             MOVS     R4,R0
   2001            while(!ucRet){
   \                     ??GAntToBox_0: (+1)
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x2C00             CMP      R4,#+0
   \   00000094   0xD143             BNE.N    ??GAntToBox_1
   2002              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000096   0xF10D 0x0212      ADD      R2,SP,#+18
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x200A             MOVS     R0,#+10
   \   0000009E   0x.... 0x....      BL       OSTimeDly
   2003              ulTmp=GetKeyOutput();    
   \   000000A2   0x.... 0x....      BL       GetKeyOutput
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   2004              if(CheckBit(ulTmp,ucCardPosCBit) && !ucEnterC){
   \   000000A8   0x9802             LDR      R0,[SP, #+8]
   \   000000AA   0xFA30 0xF008      LSRS     R0,R0,R8
   \   000000AE   0x07C0             LSLS     R0,R0,#+31
   \   000000B0   0xD504             BPL.N    ??GAntToBox_2
   \   000000B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B4   0x2D00             CMP      R5,#+0
   \   000000B6   0xD101             BNE.N    ??GAntToBox_2
   2005                //??è??ú2??a1?????
   2006                ucEnterC=1;
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0x0005             MOVS     R5,R0
   2007              }    
   2008          		
   2009              if(!CheckBit(ulTmp,ucCardPosCBit) && ucEnterC){
   \                     ??GAntToBox_2: (+1)
   \   000000BC   0x9802             LDR      R0,[SP, #+8]
   \   000000BE   0xFA30 0xF008      LSRS     R0,R0,R8
   \   000000C2   0x07C0             LSLS     R0,R0,#+31
   \   000000C4   0xD404             BMI.N    ??GAntToBox_3
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xD001             BEQ.N    ??GAntToBox_3
   2010                //à??a?ú2??a1?????
   2011                //MOTO_STEP_DISABLED();
   2012                ucLeaveC=1;
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x0006             MOVS     R6,R0
   2013              }    
   2014          		
   2015              OS_ENTER_CRITICAL();
   \                     ??GAntToBox_3: (+1)
   \   000000D0   0x.... 0x....      BL       CPU_SR_Save
   \   000000D4   0x4681             MOV      R9,R0
   \   000000D6   0x.... 0x....      BL       CPU_IntDisMeasStart
   2016              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable22
   \   000000DE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000E0   0x210A             MOVS     R1,#+10
   \   000000E2   0xFB01 0xF107      MUL      R1,R1,R7
   \   000000E6   0x4408             ADD      R0,R0,R1
   \   000000E8   0x8840             LDRH     R0,[R0, #+2]
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD107             BNE.N    ??GAntToBox_4
   2017                if(ucLeaveC){
   \   000000EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F0   0x2E00             CMP      R6,#+0
   \   000000F2   0xD002             BEQ.N    ??GAntToBox_5
   2018                  ucRet=1;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x0004             MOVS     R4,R0
   \   000000F8   0xE001             B.N      ??GAntToBox_4
   2019                }else{
   2020                  ucRet=2;
   \                     ??GAntToBox_5: (+1)
   \   000000FA   0x2002             MOVS     R0,#+2
   \   000000FC   0x0004             MOVS     R4,R0
   2021                }
   2022              }
   2023              OS_EXIT_CRITICAL();
   \                     ??GAntToBox_4: (+1)
   \   000000FE   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000102   0x4648             MOV      R0,R9
   \   00000104   0x.... 0x....      BL       CPU_SR_Restore
   2024              
   2025              if(uiTimes>0){
   \   00000108   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000010C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000110   0xD002             BEQ.N    ??GAntToBox_6
   2026                uiTimes--;
   \   00000112   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   00000116   0xE7BB             B.N      ??GAntToBox_0
   2027              }else{
   2028                ucRet=4;                                                                  //系统故障
   \                     ??GAntToBox_6: (+1)
   \   00000118   0x2004             MOVS     R0,#+4
   \   0000011A   0x0004             MOVS     R4,R0
   \   0000011C   0xE7B8             B.N      ??GAntToBox_0
   2029              }	
   2030            }
   2031            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??GAntToBox_1: (+1)
   \   0000011E   0x2100             MOVS     R1,#+0
   \   00000120   0x0038             MOVS     R0,R7
   \   00000122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000124   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2032          	
   2033            ulTmp=GetKey();
   \   00000128   0x.... 0x....      BL       GetKey
   \   0000012C   0x9002             STR      R0,[SP, #+8]
   2034            if(CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosABit)){								//óD?¨￡?′ò??￡?・μ????ê?
   \   0000012E   0x9802             LDR      R0,[SP, #+8]
   \   00000130   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000134   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD108             BNE.N    ??GAntToBox_7
   \   0000013E   0x9802             LDR      R0,[SP, #+8]
   \   00000140   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000144   0x40C8             LSRS     R0,R0,R1
   \   00000146   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000014A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD001             BEQ.N    ??GAntToBox_8
   2035              return 0;
   \                     ??GAntToBox_7: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0xE09A             B.N      ??GAntToBox_9
   2036            }
   2037            
   2038            uiDelays=MOTO_INTERFER_TIME_DEFAULT/ACTION_DELAY_TIME_DEFAULT;
   \                     ??GAntToBox_8: (+1)
   \   00000154   0x2014             MOVS     R0,#+20
   \   00000156   0x4683             MOV      R11,R0
   2039            uiTimes=uiDMotoTime*(10/ACTION_DELAY_TIME_DEFAULT)+20/ACTION_DELAY_TIME_DEFAULT;
   \   00000158   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   0000015C   0x0040             LSLS     R0,R0,#+1
   \   0000015E   0x1D00             ADDS     R0,R0,#+4
   \   00000160   0x4682             MOV      R10,R0
   2040            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,uiDMotoTime,ucDSelected);
   \   00000162   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000166   0x9000             STR      R0,[SP, #+0]
   \   00000168   0xF8BD 0x300E      LDRH     R3,[SP, #+14]
   \   0000016C   0x2200             MOVS     R2,#+0
   \   0000016E   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   00000172   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000176   0x.... 0x....      BL       DMotoStart
   2041            ucRet=0;
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x0004             MOVS     R4,R0
   2042            while(!ucRet){
   \                     ??GAntToBox_10: (+1)
   \   0000017E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000180   0x2C00             CMP      R4,#+0
   \   00000182   0xD132             BNE.N    ??GAntToBox_11
   2043              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err);
   \   00000184   0xF10D 0x0212      ADD      R2,SP,#+18
   \   00000188   0x2100             MOVS     R1,#+0
   \   0000018A   0x2005             MOVS     R0,#+5
   \   0000018C   0x.... 0x....      BL       OSTimeDly
   2044              if(uiTimes>0){
   \   00000190   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000194   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000198   0xD001             BEQ.N    ??GAntToBox_12
   2045                uiTimes--;
   \   0000019A   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   2046              }
   2047              if(uiDelays>0){
   \                     ??GAntToBox_12: (+1)
   \   0000019E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001A2   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001A6   0xD002             BEQ.N    ??GAntToBox_13
   2048                uiDelays--;
   \   000001A8   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   000001AC   0xE7E7             B.N      ??GAntToBox_10
   2049              }else{
   2050                ulTmp=GetKeyOutput();    
   \                     ??GAntToBox_13: (+1)
   \   000001AE   0x.... 0x....      BL       GetKeyOutput
   \   000001B2   0x9002             STR      R0,[SP, #+8]
   2051                if(CheckBit(ulTmp,ucDMoto1PosBBit)){
   \   000001B4   0x9802             LDR      R0,[SP, #+8]
   \   000001B6   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   000001BA   0x40C8             LSRS     R0,R0,R1
   \   000001BC   0x07C0             LSLS     R0,R0,#+31
   \   000001BE   0xD50C             BPL.N    ??GAntToBox_14
   2052                  OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   \   000001C0   0xF10D 0x0212      ADD      R2,SP,#+18
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0x2014             MOVS     R0,#+20
   \   000001C8   0x.... 0x....      BL       OSTimeDly
   2053                  MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \   000001CC   0x2100             MOVS     R1,#+0
   \   000001CE   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001D2   0x.... 0x....      BL       MOTO_DC_DISABLED
   2054                  ucRet=1;
   \   000001D6   0x2001             MOVS     R0,#+1
   \   000001D8   0x0004             MOVS     R4,R0
   2055                }
   2056                if(!uiTimes){
   \                     ??GAntToBox_14: (+1)
   \   000001DA   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000001DE   0xF1BA 0x0F00      CMP      R10,#+0
   \   000001E2   0xD1CC             BNE.N    ??GAntToBox_10
   2057                  ucRet=2;
   \   000001E4   0x2002             MOVS     R0,#+2
   \   000001E6   0x0004             MOVS     R4,R0
   \   000001E8   0xE7C9             B.N      ??GAntToBox_10
   2058                }
   2059              }
   2060            }
   2061            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \                     ??GAntToBox_11: (+1)
   \   000001EA   0x2100             MOVS     R1,#+0
   \   000001EC   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001F0   0x.... 0x....      BL       MOTO_DC_DISABLED
   2062          #if MOTO_INTERFER_TIME_EN==1
   2063            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   2064          #endif
   2065            
   2066            ucRet=0;
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x0004             MOVS     R4,R0
   2067            ulTmp=GetKeyOutput();    	
   \   000001F8   0x.... 0x....      BL       GetKeyOutput
   \   000001FC   0x9002             STR      R0,[SP, #+8]
   2068            DebugInfoA(0x66,(INT8U *)&ulTmp,4);
   \   000001FE   0xA802             ADD      R0,SP,#+8
   2069            if(!(CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosDBit))){//?T?¨
   \   00000200   0x9802             LDR      R0,[SP, #+8]
   \   00000202   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000206   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000020A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD136             BNE.N    ??GAntToBox_15
   \   00000210   0x9802             LDR      R0,[SP, #+8]
   \   00000212   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000216   0x40C8             LSRS     R0,R0,R1
   \   00000218   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000021C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021E   0x2800             CMP      R0,#+0
   \   00000220   0xD12D             BNE.N    ??GAntToBox_15
   2070              DebugInfoA(0x77,(INT8U *)&ulTmp,4);
   \   00000222   0xA802             ADD      R0,SP,#+8
   2071              ucRet=1;
   \   00000224   0x2001             MOVS     R0,#+1
   \   00000226   0x0004             MOVS     R4,R0
   2072                      
   2073              if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited){
   \   00000228   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   0000022C   0x7B80             LDRB     R0,[R0, #+14]
   \   0000022E   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000232   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000234   0x2800             CMP      R0,#+0
   \   00000236   0xD122             BNE.N    ??GAntToBox_15
   2074                m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=1;
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   0000023C   0x7B80             LDRB     R0,[R0, #+14]
   \   0000023E   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000246   0x7388             STRB     R0,[R1, #+14]
   2075                
   2076                //???ó?¨êy
   2077                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ulMachineId=m_usrBoxInfo[BOX_FIRST].ulMachineId;
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   0000024C   0x6840             LDR      R0,[R0, #+4]
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000252   0x6148             STR      R0,[R1, #+20]
   2078                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucCurrentCount=m_usrBoxInfo[BOX_FIRST].ucCounts;
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000258   0x7800             LDRB     R0,[R0, #+0]
   \   0000025A   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000025E   0x7608             STRB     R0,[R1, #+24]
   2079                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucNewCount=m_usrBoxInfo[BOX_FIRST].ucCounts+1;
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000264   0x7800             LDRB     R0,[R0, #+0]
   \   00000266   0x1C40             ADDS     R0,R0,#+1
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000026C   0x7648             STRB     R0,[R1, #+25]
   2080                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucRetrys=8;
   \   0000026E   0x2008             MOVS     R0,#+8
   \   00000270   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000274   0x7688             STRB     R0,[R1, #+26]
   2081                CardCountUpdateSend(0,BOX_FIRST);
   \   00000276   0x2100             MOVS     R1,#+0
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x.... 0x....      BL       CardCountUpdateSend
   2082              #if MOTO_INTERFER_TIME_EN==1
   2083                OSTimeDly(BOX_COUNT_WRITE_TIME/10,OS_OPT_TIME_DLY, &os_err) ;         
   2084              #endif			
   2085              }
   2086            }
   2087            
   2088            MotoReset(WAIT_MODE,DMOTO_SECOND);
   \                     ??GAntToBox_15: (+1)
   \   0000027E   0x2101             MOVS     R1,#+1
   \   00000280   0x2001             MOVS     R0,#+1
   \   00000282   0x.... 0x....      BL       MotoReset
   2089            
   2090            return ucRet; 	
   \   00000286   0x0020             MOVS     R0,R4
   \   00000288   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??GAntToBox_9: (+1)
   \   0000028A   0xB005             ADD      SP,SP,#+20
   \   0000028C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2091          }
   2092          
   2093          /*******************************************************************************************************
   2094          ** oˉêy??3?: GAntToBoxProcess
   2095          ** 1|?ü?èê?: 
   2096          ** ê? ?? è?:
   2097          **
   2098          ** ê???  3?:
   2099          **
   2100          ** è???±?á?:
   2101          ** μ÷ó??￡?é:
   2102          **
   2103          ** ×÷??  ??: John Tonny
   2104          ** è???  ?ú: 2009?ê11??01è?
   2105          **------------------------------------------------------------------------------------------------------
   2106          ** DT ?? è?:
   2107          ** è???  ?ú:
   2108          **------------------------------------------------------------------------------------------------------
   2109          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2110          INT8U GAntToBoxProcess(CardMachineRxData *pcommRx1Data)
   2111          {
   \                     GAntToBoxProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x0004             MOVS     R4,R0
   2112            OS_ERR os_err;
   2113            
   2114            INT8U ucRetrys=0;
   \   00000008   0xF05F 0x0B00      MOVS     R11,#+0
   2115            INT8U ucData[32];
   2116            INT8U ucMode;
   2117            INT32U ulTmp;
   2118            INT8U ucTmp;
   2119          
   2120            INT8U ucBoxLoad1Bit=m_ucKeyBit[BOXLOAD1_BIT];
   \   0000000C   0x....             LDR.N    R0,??DataTable20_3
   \   0000000E   0x78C6             LDRB     R6,[R0, #+3]
   2121            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000010   0x....             LDR.N    R0,??DataTable20_3
   \   00000012   0x7E87             LDRB     R7,[R0, #+26]
   2122            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000014   0x....             LDR.N    R0,??DataTable20_3
   \   00000016   0xF890 0x801B      LDRB     R8,[R0, #+27]
   2123            
   2124            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   0000001A   0x....             LDR.N    R0,??DataTable20_2
   \   0000001C   0xF890 0x9000      LDRB     R9,[R0, #+0]
   2125            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_FIRST];
   \   00000020   0x....             LDR.N    R0,??DataTable20_1
   \   00000022   0xF890 0xA000      LDRB     R10,[R0, #+0]
   2126            
   2127            ucMode=0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0005             MOVS     R5,R0
   2128            if(!pcommRx1Data){
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD101             BNE.N    ??GAntToBoxProcess_0
   2129              ucMode=1;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x0005             MOVS     R5,R0
   2130            }
   2131          
   2132            if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   \                     ??GAntToBoxProcess_0: (+1)
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       MotoReset
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD10F             BNE.N    ??GAntToBoxProcess_1
   2133              ucData[0]=SUBTYPE_ERR_HEAD1STATUSERR;
   \   0000003E   0x2060             MOVS     R0,#+96
   \   00000040   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2134              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0xAB04             ADD      R3,SP,#+16
   \   00000050   0x78A2             LDRB     R2,[R4, #+2]
   \   00000052   0x7861             LDRB     R1,[R4, #+1]
   \   00000054   0x205E             MOVS     R0,#+94
   \   00000056   0x.... 0x....      BL       Uart0Pack
   2135              return 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE120             B.N      ??GAntToBoxProcess_2
   2136            }
   2137          
   2138            ulTmp=GetKeyOutput();
   \                     ??GAntToBoxProcess_1: (+1)
   \   0000005E   0x.... 0x....      BL       GetKeyOutput
   \   00000062   0x9003             STR      R0,[SP, #+12]
   2139            if(!CheckBit(ulTmp,ucBoxLoad1Bit)){
   \   00000064   0x9803             LDR      R0,[SP, #+12]
   \   00000066   0x40F0             LSRS     R0,R0,R6
   \   00000068   0x07C0             LSLS     R0,R0,#+31
   \   0000006A   0xD40F             BMI.N    ??GAntToBoxProcess_3
   2140              ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   0000006C   0x2044             MOVS     R0,#+68
   \   0000006E   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2141              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000072   0x0028             MOVS     R0,R5
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x9001             STR      R0,[SP, #+4]
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0xAB04             ADD      R3,SP,#+16
   \   0000007E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000080   0x7861             LDRB     R1,[R4, #+1]
   \   00000082   0x205E             MOVS     R0,#+94
   \   00000084   0x.... 0x....      BL       Uart0Pack
   2142              return 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xE109             B.N      ??GAntToBoxProcess_2
   2143            }
   2144          
   2145            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \                     ??GAntToBoxProcess_3: (+1)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000090   0x7B80             LDRB     R0,[R0, #+14]
   \   00000092   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD10F             BNE.N    ??GAntToBoxProcess_4
   2146              ucData[0]=SUBTYPE_ERR_BOX_NOCONNECT;
   \   0000009C   0x2064             MOVS     R0,#+100
   \   0000009E   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2147              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000A2   0x0028             MOVS     R0,R5
   \   000000A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A6   0x9001             STR      R0,[SP, #+4]
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0xAB04             ADD      R3,SP,#+16
   \   000000AE   0x78A2             LDRB     R2,[R4, #+2]
   \   000000B0   0x7861             LDRB     R1,[R4, #+1]
   \   000000B2   0x205E             MOVS     R0,#+94
   \   000000B4   0x.... 0x....      BL       Uart0Pack
   2148              return 1;
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xE0F1             B.N      ??GAntToBoxProcess_2
   2149            }
   2150          
   2151            if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \                     ??GAntToBoxProcess_4: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   000000C0   0x7C00             LDRB     R0,[R0, #+16]
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD00F             BEQ.N    ??GAntToBoxProcess_5
   2152              ucData[0]=SUBTYPE_ERR_DEVICE_BUSY;
   \   000000C6   0x203B             MOVS     R0,#+59
   \   000000C8   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2153              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000CC   0x0028             MOVS     R0,R5
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x9001             STR      R0,[SP, #+4]
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0xAB04             ADD      R3,SP,#+16
   \   000000D8   0x78A2             LDRB     R2,[R4, #+2]
   \   000000DA   0x7861             LDRB     R1,[R4, #+1]
   \   000000DC   0x205E             MOVS     R0,#+94
   \   000000DE   0x.... 0x....      BL       Uart0Pack
   2154              return 2;
   \   000000E2   0x2002             MOVS     R0,#+2
   \   000000E4   0xE0DC             B.N      ??GAntToBoxProcess_2
   2155            }
   2156          
   2157            if(m_usrBoxInfo[BOX_FIRST].ucCounts>=m_usrBoxInfo[BOX_FIRST].ucMaxCounts){
   \                     ??GAntToBoxProcess_5: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   000000EA   0x7800             LDRB     R0,[R0, #+0]
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   000000F0   0x7849             LDRB     R1,[R1, #+1]
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xD30F             BCC.N    ??GAntToBoxProcess_6
   2158              ucData[0]=SUBTYPE_ERR_CARDCOUNT_OVER;
   \   000000F6   0x2036             MOVS     R0,#+54
   \   000000F8   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2159              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000FC   0x0028             MOVS     R0,R5
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x9001             STR      R0,[SP, #+4]
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x9000             STR      R0,[SP, #+0]
   \   00000106   0xAB04             ADD      R3,SP,#+16
   \   00000108   0x78A2             LDRB     R2,[R4, #+2]
   \   0000010A   0x7861             LDRB     R1,[R4, #+1]
   \   0000010C   0x205E             MOVS     R0,#+94
   \   0000010E   0x.... 0x....      BL       Uart0Pack
   2160              return 1;
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0xE0C4             B.N      ??GAntToBoxProcess_2
   2161            }
   2162          
   2163            ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulTmp>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1) ;
   \                     ??GAntToBoxProcess_6: (+1)
   \   00000116   0x9803             LDR      R0,[SP, #+12]
   \   00000118   0x....             LDR.N    R1,??DataTable20_3
   \   0000011A   0x7E09             LDRB     R1,[R1, #+24]
   \   0000011C   0x40C8             LSRS     R0,R0,R1
   \   0000011E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000122   0x9903             LDR      R1,[SP, #+12]
   \   00000124   0x....             LDR.N    R2,??DataTable20_3
   \   00000126   0x7E92             LDRB     R2,[R2, #+26]
   \   00000128   0x40D1             LSRS     R1,R1,R2
   \   0000012A   0x0049             LSLS     R1,R1,#+1
   \   0000012C   0xF011 0x0106      ANDS     R1,R1,#0x6
   \   00000130   0x4308             ORRS     R0,R1,R0
   \   00000132   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2164            if(ucTmp==0){
   \   00000136   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD10F             BNE.N    ??GAntToBoxProcess_7
   2165              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   0000013E   0x2042             MOVS     R0,#+66
   \   00000140   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2166              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000144   0x0028             MOVS     R0,R5
   \   00000146   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000148   0x9001             STR      R0,[SP, #+4]
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x9000             STR      R0,[SP, #+0]
   \   0000014E   0xAB04             ADD      R3,SP,#+16
   \   00000150   0x78A2             LDRB     R2,[R4, #+2]
   \   00000152   0x7861             LDRB     R1,[R4, #+1]
   \   00000154   0x205E             MOVS     R0,#+94
   \   00000156   0x.... 0x....      BL       Uart0Pack
   2167              return 2;
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0xE0A0             B.N      ??GAntToBoxProcess_2
   2168            /*}else if(ucTmp!=1){
   2169              ucData[0]=SUBTYPE_ERR_CARD_POSITION;
   2170              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   2171            return 1;*/
   2172            }
   2173          
   2174            m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=0;
   \                     ??GAntToBoxProcess_7: (+1)
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000162   0x7B80             LDRB     R0,[R0, #+14]
   \   00000164   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000016C   0x7388             STRB     R0,[R1, #+14]
   2175            ucRetrys=0;
   \   0000016E   0x2000             MOVS     R0,#+0
   \   00000170   0x4683             MOV      R11,R0
   2176            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??GAntToBoxProcess_8: (+1)
   \   00000172   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000176   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000017A   0xF1BB 0x0F04      CMP      R11,#+4
   \   0000017E   0xDA3F             BGE.N    ??GAntToBoxProcess_9
   2177              if(GAntToBox()){
   \   00000180   0x.... 0x....      BL       GAntToBox
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD022             BEQ.N    ??GAntToBoxProcess_10
   2178                ulTmp=GetKeyOutput();    
   \   00000188   0x.... 0x....      BL       GetKeyOutput
   \   0000018C   0x9003             STR      R0,[SP, #+12]
   2179                DebugInfoA(0x88,(INT8U *)&ulTmp,4);
   \   0000018E   0xA803             ADD      R0,SP,#+12
   2180                if((CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosDBit))){
   \   00000190   0x9803             LDR      R0,[SP, #+12]
   \   00000192   0x40F8             LSRS     R0,R0,R7
   \   00000194   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000198   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019A   0x2800             CMP      R0,#+0
   \   0000019C   0xD107             BNE.N    ??GAntToBoxProcess_11
   \   0000019E   0x9803             LDR      R0,[SP, #+12]
   \   000001A0   0xFA30 0xF008      LSRS     R0,R0,R8
   \   000001A4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001AA   0x2800             CMP      R0,#+0
   \   000001AC   0xD00E             BEQ.N    ??GAntToBoxProcess_12
   2181                  DebugInfoA(0x99,(INT8U *)&ulTmp,4);
   \                     ??GAntToBoxProcess_11: (+1)
   \   000001AE   0xA803             ADD      R0,SP,#+12
   2182                  while(1){
   2183                    BSP_LED_Toggle(2);
   \                     ??GAntToBoxProcess_13: (+1)
   \   000001B0   0x2002             MOVS     R0,#+2
   \   000001B2   0x.... 0x....      BL       BSP_LED_Toggle
   2184                    OSTimeDly(100,OS_OPT_TIME_DLY, &os_err) ;         
   \   000001B6   0xF10D 0x020A      ADD      R2,SP,#+10
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x2064             MOVS     R0,#+100
   \   000001BE   0x.... 0x....      BL       OSTimeDly
   2185                    ulTmp=GetKeyOutput();    
   \   000001C2   0x.... 0x....      BL       GetKeyOutput
   \   000001C6   0x9003             STR      R0,[SP, #+12]
   2186                    DebugInfoA(0xAA,(INT8U *)&ulTmp,4);
   \   000001C8   0xA803             ADD      R0,SP,#+12
   \   000001CA   0xE7F1             B.N      ??GAntToBoxProcess_13
   2187                  }
   2188                }else{
   2189                  break;
   \                     ??GAntToBoxProcess_12: (+1)
   \   000001CC   0xE018             B.N      ??GAntToBoxProcess_9
   2190                }
   2191              }
   2192              
   2193              BoxMotoMoveDown(BOXMOTO_FREQUENCE_PER_CARD*5,BOX_FIRST);		
   \                     ??GAntToBoxProcess_10: (+1)
   \   000001CE   0x2100             MOVS     R1,#+0
   \   000001D0   0xF243 0x7046      MOVW     R0,#+14150
   \   000001D4   0x.... 0x....      BL       BoxMotoMoveDown
   2194              SMotoStart(ucSMotoFreq,20,MOTO_BACKWARD_MODE,ucSSelected);
   \   000001D8   0x464B             MOV      R3,R9
   \   000001DA   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001DC   0x2201             MOVS     R2,#+1
   \   000001DE   0x2114             MOVS     R1,#+20
   \   000001E0   0x4650             MOV      R0,R10
   \   000001E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E4   0x.... 0x....      BL       SMotoStart
   2195              OSTimeDly(200,OS_OPT_TIME_DLY, &os_err) ;         
   \   000001E8   0xF10D 0x020A      ADD      R2,SP,#+10
   \   000001EC   0x2100             MOVS     R1,#+0
   \   000001EE   0x20C8             MOVS     R0,#+200
   \   000001F0   0x.... 0x....      BL       OSTimeDly
   2196              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000001F4   0x2100             MOVS     R1,#+0
   \   000001F6   0x4648             MOV      R0,R9
   \   000001F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FA   0x.... 0x....      BL       MOTO_STEP_DISABLED
   \   000001FE   0xE7B8             B.N      ??GAntToBoxProcess_8
   2197            }
   2198              
   2199            if(ucRetrys<=MOTO_RETRYS){
   \                     ??GAntToBoxProcess_9: (+1)
   \   00000200   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000204   0xF1BB 0x0F04      CMP      R11,#+4
   \   00000208   0xDA35             BGE.N    ??GAntToBoxProcess_14
   2200              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   0000020A   0x0028             MOVS     R0,R5
   \   0000020C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020E   0x9001             STR      R0,[SP, #+4]
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0x9000             STR      R0,[SP, #+0]
   \   00000214   0x2300             MOVS     R3,#+0
   \   00000216   0x78A2             LDRB     R2,[R4, #+2]
   \   00000218   0x7861             LDRB     R1,[R4, #+1]
   \   0000021A   0x205F             MOVS     R0,#+95
   \   0000021C   0x.... 0x....      BL       Uart0Pack
   2201              m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos=0;
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000224   0x7B80             LDRB     R0,[R0, #+14]
   \   00000226   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000022A   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000022E   0x7388             STRB     R0,[R1, #+14]
   2202              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bBuzzEn){
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000234   0x7B80             LDRB     R0,[R0, #+14]
   \   00000236   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000238   0x09C0             LSRS     R0,R0,#+7
   \   0000023A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000023C   0x2800             CMP      R0,#+0
   \   0000023E   0xD018             BEQ.N    ??GAntToBoxProcess_15
   2203                if(m_usrBoxInfo[BOX_FIRST].ucBuzzMode>3){
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000244   0x7AC0             LDRB     R0,[R0, #+11]
   \   00000246   0x2804             CMP      R0,#+4
   \   00000248   0xDB03             BLT.N    ??GAntToBoxProcess_16
   2204                  m_usrBoxInfo[BOX_FIRST].ucBuzzMode=0;
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000250   0x72C8             STRB     R0,[R1, #+11]
   2205                }
   2206                BuzzSet(2,BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],0);
   \                     ??GAntToBoxProcess_16: (+1)
   \   00000252   0x2300             MOVS     R3,#+0
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000025C   0x7AC9             LDRB     R1,[R1, #+11]
   \   0000025E   0x5C42             LDRB     R2,[R0, R1]
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000264   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000268   0x7AC9             LDRB     R1,[R1, #+11]
   \   0000026A   0x5C41             LDRB     R1,[R0, R1]
   \   0000026C   0x2002             MOVS     R0,#+2
   \   0000026E   0x.... 0x....      BL       BuzzSet
   2207              }
   2208              return 0;
   \                     ??GAntToBoxProcess_15: (+1)
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0xE014             B.N      ??GAntToBoxProcess_2
   2209            }else{
   2210              ucData[0]=SUBTYPE_ERR_ANT2BOX_FAIL;
   \                     ??GAntToBoxProcess_14: (+1)
   \   00000276   0x2052             MOVS     R0,#+82
   \   00000278   0xF88D 0x0010      STRB     R0,[SP, #+16]
   2211              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000027C   0x0028             MOVS     R0,R5
   \   0000027E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000280   0x9001             STR      R0,[SP, #+4]
   \   00000282   0x2001             MOVS     R0,#+1
   \   00000284   0x9000             STR      R0,[SP, #+0]
   \   00000286   0xAB04             ADD      R3,SP,#+16
   \   00000288   0x78A2             LDRB     R2,[R4, #+2]
   \   0000028A   0x7861             LDRB     R1,[R4, #+1]
   \   0000028C   0x205E             MOVS     R0,#+94
   \   0000028E   0x.... 0x....      BL       Uart0Pack
   2212              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000292   0x2313             MOVS     R3,#+19
   \   00000294   0x2219             MOVS     R2,#+25
   \   00000296   0x2132             MOVS     R1,#+50
   \   00000298   0x2004             MOVS     R0,#+4
   \   0000029A   0x.... 0x....      BL       BuzzSet
   2213            }
   2214            return 1;
   \   0000029E   0x2001             MOVS     R0,#+1
   \                     ??GAntToBoxProcess_2: (+1)
   \   000002A0   0xB00D             ADD      SP,SP,#+52
   \   000002A2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2215          }
   2216          
   2217          /*******************************************************************************************************
   2218          ** oˉêy??3?: GAntToOut
   2219          ** 1|?ü?èê?: 
   2220          ** ê? ?? è?:
   2221          **
   2222          ** ê???  3?:
   2223          **
   2224          ** è???±?á?:
   2225          ** μ÷ó??￡?é:
   2226          **
   2227          ** ×÷??  ??: John Tonny
   2228          ** è???  ?ú: 2009?ê11??01è?
   2229          **------------------------------------------------------------------------------------------------------
   2230          ** DT ?? è?:
   2231          ** è???  ?ú:
   2232          **------------------------------------------------------------------------------------------------------
   2233          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2234          INT8U GAntToOut(void)
   2235          {
   \                     GAntToOut: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   2236            OS_ERR os_err;
   2237          	
   2238            INT8U ucRet;
   2239            INT32U ulTmp;
   2240            INT8U ucLeaveA=0;	
   \   00000004   0x2600             MOVS     R6,#+0
   2241            INT8U ucSSelected=SMOTO_FIRST;
   \   00000006   0x2700             MOVS     R7,#+0
   2242            
   2243            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000008   0x....             LDR.N    R0,??DataTable20_3
   \   0000000A   0xF890 0x8018      LDRB     R8,[R0, #+24]
   2244            
   2245            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   0000000E   0x....             LDR.N    R0,??DataTable20_1
   \   00000010   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000012   0xF810 0x9007      LDRB     R9,[R0, R7]
   2246            
   2247            INT8U ucTimes=100;
   \   00000016   0xF05F 0x0A64      MOVS     R10,#+100
   2248            
   2249            CPU_SR_ALLOC();
   \   0000001A   0xF05F 0x0B00      MOVS     R11,#+0
   2250            
   2251            SMotoStart(ucSMotoFreq,SMOTO_COUNT_GK_ANTTOOUT_DEFAULT,MOTO_BACKWARD_MODE,ucSSelected);
   \   0000001E   0x003B             MOVS     R3,R7
   \   00000020   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0xF44F 0x7148      MOV      R1,#+800
   \   00000028   0x4648             MOV      R0,R9
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       SMotoStart
   2252            ucRet=0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0004             MOVS     R4,R0
   2253            while(!ucRet){
   \                     ??GAntToOut_0: (+1)
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD135             BNE.N    ??GAntToOut_1
   2254              ulTmp=GetKeyOutput();    
   \   0000003A   0x.... 0x....      BL       GetKeyOutput
   \   0000003E   0x0005             MOVS     R5,R0
   2255              if(!CheckBit(ulTmp,ucCardPosABit)){
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000046   0x07C0             LSLS     R0,R0,#+31
   \   00000048   0xD401             BMI.N    ??GAntToOut_2
   2256                //à??a?ú2??a1?????
   2257                ucLeaveA=1;
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x0006             MOVS     R6,R0
   2258              }    
   2259          		
   2260              OS_ENTER_CRITICAL();
   \                     ??GAntToOut_2: (+1)
   \   0000004E   0x.... 0x....      BL       CPU_SR_Save
   \   00000052   0x4683             MOV      R11,R0
   \   00000054   0x.... 0x....      BL       CPU_IntDisMeasStart
   2261              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable22
   \   0000005C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005E   0x210A             MOVS     R1,#+10
   \   00000060   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000064   0x4408             ADD      R0,R0,R1
   \   00000066   0x8840             LDRH     R0,[R0, #+2]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD107             BNE.N    ??GAntToOut_3
   2262                if(ucLeaveA){
   \   0000006C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006E   0x2E00             CMP      R6,#+0
   \   00000070   0xD002             BEQ.N    ??GAntToOut_4
   2263                  ucRet=1;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x0004             MOVS     R4,R0
   \   00000076   0xE001             B.N      ??GAntToOut_3
   2264                }else{      
   2265                  ucRet=2;
   \                     ??GAntToOut_4: (+1)
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0x0004             MOVS     R4,R0
   2266                }
   2267              }
   2268              OS_EXIT_CRITICAL();
   \                     ??GAntToOut_3: (+1)
   \   0000007C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000080   0x4658             MOV      R0,R11
   \   00000082   0x.... 0x....      BL       CPU_SR_Restore
   2269              if(ucTimes>0){
   \   00000086   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000008A   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000008E   0xD002             BEQ.N    ??GAntToOut_5
   2270                ucTimes--;
   \   00000090   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   00000094   0xE001             B.N      ??GAntToOut_6
   2271              }else{
   2272                ucRet=4;                                                                  //系统故障
   \                     ??GAntToOut_5: (+1)
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x0004             MOVS     R4,R0
   2273              }
   2274              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??GAntToOut_6: (+1)
   \   0000009A   0x466A             MOV      R2,SP
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x200A             MOVS     R0,#+10
   \   000000A0   0x.... 0x....      BL       OSTimeDly
   \   000000A4   0xE7C6             B.N      ??GAntToOut_0
   2275            }
   2276            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??GAntToOut_1: (+1)
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x0038             MOVS     R0,R7
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2277          	
   2278            if(ucRet>=2){
   \   000000B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B2   0x2C02             CMP      R4,#+2
   \   000000B4   0xDB0B             BLT.N    ??GAntToOut_7
   2279              ulTmp=GetKey();    
   \   000000B6   0x.... 0x....      BL       GetKey
   \   000000BA   0x0005             MOVS     R5,R0
   2280              if(!CheckBit(ulTmp,ucCardPosABit)){
   \   000000BC   0x0028             MOVS     R0,R5
   \   000000BE   0xFA30 0xF008      LSRS     R0,R0,R8
   \   000000C2   0x07C0             LSLS     R0,R0,#+31
   \   000000C4   0xD401             BMI.N    ??GAntToOut_8
   2281                return TRUE;
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0xE002             B.N      ??GAntToOut_9
   2282              }
   2283                return FALSE;
   \                     ??GAntToOut_8: (+1)
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0xE000             B.N      ??GAntToOut_9
   2284              }
   2285            return TRUE;
   \                     ??GAntToOut_7: (+1)
   \   000000CE   0x2001             MOVS     R0,#+1
   \                     ??GAntToOut_9: (+1)
   \   000000D0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   2286          }
   2287          
   2288          /*******************************************************************************************************
   2289          ** oˉêy??3?: GAntToOutProcess
   2290          ** 1|?ü?èê?: 
   2291          ** ê? ?? è?:
   2292          **
   2293          ** ê???  3?:
   2294          **
   2295          ** è???±?á?:
   2296          ** μ÷ó??￡?é:
   2297          **
   2298          ** ×÷??  ??: John Tonny
   2299          ** è???  ?ú: 2009?ê11??01è?
   2300          **------------------------------------------------------------------------------------------------------
   2301          ** DT ?? è?:
   2302          ** è???  ?ú:
   2303          **------------------------------------------------------------------------------------------------------
   2304          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2305          INT8U GAntToOutProcess(CardMachineRxData *pcommRx1Data)
   2306          {
   \                     GAntToOutProcess: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   2307            INT8U ucRetrys=0;
   \   00000006   0x2600             MOVS     R6,#+0
   2308            INT8U ucData[16];
   2309          	INT8U ucMode;
   2310          	
   2311            ucMode=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
   2312            if(!pcommRx1Data){
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD101             BNE.N    ??GAntToOutProcess_0
   2313              ucMode=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0005             MOVS     R5,R0
   2314            }
   2315            
   2316            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??GAntToOutProcess_0: (+1)
   \   00000014   0x1C76             ADDS     R6,R6,#+1
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E04             CMP      R6,#+4
   \   0000001A   0xDA03             BGE.N    ??GAntToOutProcess_1
   2317              if(AntToOut()){
   \   0000001C   0x.... 0x....      BL       AntToOut
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0F7             BEQ.N    ??GAntToOutProcess_0
   2318                break;
   2319              }
   2320            }
   2321            
   2322            KeyChange();
   \                     ??GAntToOutProcess_1: (+1)
   \   00000024   0x.... 0x....      BL       KeyChange
   2323            if(ucRetrys<=MOTO_RETRYS){
   \   00000028   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   0x2E04             CMP      R6,#+4
   \   0000002C   0xDA0C             BGE.N    ??GAntToOutProcess_2
   2324              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x9001             STR      R0,[SP, #+4]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x78A2             LDRB     R2,[R4, #+2]
   \   0000003C   0x7861             LDRB     R1,[R4, #+1]
   \   0000003E   0x205F             MOVS     R0,#+95
   \   00000040   0x.... 0x....      BL       Uart0Pack
   2325              return TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE014             B.N      ??GAntToOutProcess_3
   2326            }else{
   2327              ucData[0]=SUBTYPE_ERR_ANT2EXIT_FAIL;
   \                     ??GAntToOutProcess_2: (+1)
   \   00000048   0x2054             MOVS     R0,#+84
   \   0000004A   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2328              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0xAB02             ADD      R3,SP,#+8
   \   0000005A   0x78A2             LDRB     R2,[R4, #+2]
   \   0000005C   0x7861             LDRB     R1,[R4, #+1]
   \   0000005E   0x205E             MOVS     R0,#+94
   \   00000060   0x.... 0x....      BL       Uart0Pack
   2329              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000064   0x2313             MOVS     R3,#+19
   \   00000066   0x2219             MOVS     R2,#+25
   \   00000068   0x2132             MOVS     R1,#+50
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0x.... 0x....      BL       BuzzSet
   2330              return FALSE;
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??GAntToOutProcess_3: (+1)
   \   00000072   0xB006             ADD      SP,SP,#+24
   \   00000074   0xBD70             POP      {R4-R6,PC}       ;; return
   2331            }  
   2332          }
   2333          
   2334          /*******************************************************************************************************
   2335          ** oˉêy??3?: BoxToAnt
   2336          ** 1|?ü?èê?: 
   2337          ** ê? ?? è?:
   2338          **
   2339          ** ê???  3?:
   2340          **
   2341          ** è???±?á?:
   2342          ** μ÷ó??￡?é:
   2343          **
   2344          ** ×÷??  ??: John Tonny
   2345          ** è???  ?ú: 2009?ê11??01è?
   2346          **------------------------------------------------------------------------------------------------------
   2347          ** DT ?? è?:
   2348          ** è???  ?ú:
   2349          **------------------------------------------------------------------------------------------------------
   2350          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2351          INT8U BoxToAnt(void)
   2352          {
   \                     BoxToAnt: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   2353            OS_ERR os_err;
   2354            
   2355            INT8U ucDMotoPosA;
   2356            INT8U ucRet;
   2357            INT32U ulTmp;
   2358            INT8U ucEnterA=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0009      STRB     R0,[SP, #+9]
   2359            INT8U ucEnterC=0;
   \   0000000C   0x2400             MOVS     R4,#+0
   2360            INT8U ucLeaveC=0;
   \   0000000E   0x2500             MOVS     R5,#+0
   2361            INT8U ucDSelected=m_ucDMotoBit[DMOTO_FIRST];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable26
   \   00000014   0x7806             LDRB     R6,[R0, #+0]
   2362            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable26_1
   \   0000001A   0x7807             LDRB     R7,[R0, #+0]
   2363                    
   2364            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable26_2
   \   00000020   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000022   0x5DC0             LDRB     R0,[R0, R7]
   \   00000024   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2365            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];
   \   00000028   0x....             LDR.N    R0,??DataTable21_4
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   00000030   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   2366            
   2367            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000034   0x....             LDR.N    R0,??DataTable21_3
   \   00000036   0x7E00             LDRB     R0,[R0, #+24]
   \   00000038   0xF88D 0x0007      STRB     R0,[SP, #+7]
   2368            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000003C   0x....             LDR.N    R0,??DataTable21_3
   \   0000003E   0x7E80             LDRB     R0,[R0, #+26]
   \   00000040   0xF88D 0x0006      STRB     R0,[SP, #+6]
   2369            
   2370            INT8U ucTimes;
   2371            INT8U ucDelays;
   2372            INT8U ucDelay1s;
   2373            
   2374            ucDelays=MOTO_INTERFER_TIME_DEFAULT/10;
   \   00000044   0x200A             MOVS     R0,#+10
   \   00000046   0x4683             MOV      R11,R0
   2375            ucDelay1s=MOTO_INTERFER_TIME_DEFAULT/10;
   \   00000048   0x200A             MOVS     R0,#+10
   \   0000004A   0x4680             MOV      R8,R0
   2376            ucTimes=(((INT32U)SMOTO_COUNT_GK_ANTTOBOX_DEFAULT)*ucSMotoFreq)/1000+10;
   \   0000004C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000050   0xF44F 0x7116      MOV      R1,#+600
   \   00000054   0x4348             MULS     R0,R1,R0
   \   00000056   0xF44F 0x717A      MOV      R1,#+1000
   \   0000005A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000005E   0x300A             ADDS     R0,R0,#+10
   \   00000060   0x4682             MOV      R10,R0
   2377            
   2378            CPU_SR_ALLOC();
   \   00000062   0xF05F 0x0900      MOVS     R9,#+0
   2379            
   2380            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,DMOTO_TIME_DEFAULT,ucDSelected);
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0x2396             MOVS     R3,#+150
   \   0000006E   0x2201             MOVS     R2,#+1
   \   00000070   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000074   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000078   0x.... 0x....      BL       DMotoStart
   2381            SMotoStart(ucSMotoFreq,SMOTO_COUNT_DEFAULT,MOTO_BACKWARD_MODE,ucSSelected);
   \   0000007C   0x003B             MOVS     R3,R7
   \   0000007E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0xF44F 0x6196      MOV      R1,#+1200
   \   00000086   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000008A   0x.... 0x....      BL       SMotoStart
   2382            
   2383            ucDMotoPosA=0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2384            ucRet=0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF88D 0x0004      STRB     R0,[SP, #+4]
   2385            while(!ucRet){
   \                     ??BoxToAnt_0: (+1)
   \   0000009A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD177             BNE.N    ??BoxToAnt_1
   2386              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \   000000A2   0xF10D 0x020A      ADD      R2,SP,#+10
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x200A             MOVS     R0,#+10
   \   000000AA   0x.... 0x....      BL       OSTimeDly
   2387              if(ucTimes>0){
   \   000000AE   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000B2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000B6   0xD001             BEQ.N    ??BoxToAnt_2
   2388                ucTimes--;
   \   000000B8   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   2389              }
   2390              if(ucDelays>0){
   \                     ??BoxToAnt_2: (+1)
   \   000000BC   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000C0   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000C4   0xD002             BEQ.N    ??BoxToAnt_3
   2391                ucDelays--;
   \   000000C6   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   000000CA   0xE7E6             B.N      ??BoxToAnt_0
   2392              }else{
   2393                ulTmp=GetKeyOutput();    
   \                     ??BoxToAnt_3: (+1)
   \   000000CC   0x.... 0x....      BL       GetKeyOutput
   \   000000D0   0x9004             STR      R0,[SP, #+16]
   2394                if(CheckBit(ulTmp,ucCardPosABit)){
   \   000000D2   0x9804             LDR      R0,[SP, #+16]
   \   000000D4   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   000000D8   0x40C8             LSRS     R0,R0,R1
   \   000000DA   0x07C0             LSLS     R0,R0,#+31
   \   000000DC   0xD50B             BPL.N    ??BoxToAnt_4
   2395                  MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0x0030             MOVS     R0,R6
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       MOTO_DC_DISABLED
   2396                  if(!ucDMotoPosA){
   \   000000E8   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD102             BNE.N    ??BoxToAnt_4
   2397                    ucDMotoPosA=1;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2398                  }
   2399                }
   2400                
   2401                if(!ucDelay1s){
   \                     ??BoxToAnt_4: (+1)
   \   000000F6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000FA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000FE   0xD124             BNE.N    ??BoxToAnt_5
   2402                  if(CheckBit(ulTmp,ucCardPosCBit)){
   \   00000100   0x9804             LDR      R0,[SP, #+16]
   \   00000102   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000106   0x40C8             LSRS     R0,R0,R1
   \   00000108   0x07C0             LSLS     R0,R0,#+31
   \   0000010A   0xD501             BPL.N    ??BoxToAnt_6
   2403                    //ò?μ??ú2??a1?????
   2404                    ucEnterC=1;
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x0004             MOVS     R4,R0
   2405                  }        
   2406                  
   2407                  if(CheckBit(ulTmp,ucCardPosABit)){
   \                     ??BoxToAnt_6: (+1)
   \   00000110   0x9804             LDR      R0,[SP, #+16]
   \   00000112   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000116   0x40C8             LSRS     R0,R0,R1
   \   00000118   0x07C0             LSLS     R0,R0,#+31
   \   0000011A   0xD506             BPL.N    ??BoxToAnt_7
   2408                    //ò?μ?ía2??a1?????
   2409                    MOTO_STEP_DISABLED(SMOTO_FIRST,NORMAL_MODE);
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2410                    ucEnterA=1;
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0xF88D 0x0009      STRB     R0,[SP, #+9]
   2411                  }    
   2412                  
   2413                  //ía2??a1?1ê??ê±,ó??ú2??a1?DT?y
   2414                  if(!CheckBit(ulTmp,ucCardPosCBit) && ucEnterC){
   \                     ??BoxToAnt_7: (+1)
   \   0000012A   0x9804             LDR      R0,[SP, #+16]
   \   0000012C   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000130   0x40C8             LSRS     R0,R0,R1
   \   00000132   0x07C0             LSLS     R0,R0,#+31
   \   00000134   0xD40B             BMI.N    ??BoxToAnt_8
   \   00000136   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000138   0x2C00             CMP      R4,#+0
   \   0000013A   0xD008             BEQ.N    ??BoxToAnt_8
   2415                    //à??a?ú2??a1?????
   2416                    MOTO_STEP_DISABLED(SMOTO_FIRST,NORMAL_MODE);
   \   0000013C   0x2100             MOVS     R1,#+0
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2417                    ucLeaveC=1;
   \   00000144   0x2001             MOVS     R0,#+1
   \   00000146   0x0005             MOVS     R5,R0
   \   00000148   0xE001             B.N      ??BoxToAnt_8
   2418                  }  
   2419                }else{
   2420                  ucDelay1s--;
   \                     ??BoxToAnt_5: (+1)
   \   0000014A   0xF1B8 0x0801      SUBS     R8,R8,#+1
   2421                }
   2422          
   2423                OS_ENTER_CRITICAL();
   \                     ??BoxToAnt_8: (+1)
   \   0000014E   0x.... 0x....      BL       CPU_SR_Save
   \   00000152   0x4681             MOV      R9,R0
   \   00000154   0x.... 0x....      BL       CPU_IntDisMeasStart
   2424                if(ucEnterA  || ucLeaveC){
   \   00000158   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD102             BNE.N    ??BoxToAnt_9
   \   00000160   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000162   0x2D00             CMP      R5,#+0
   \   00000164   0xD003             BEQ.N    ??BoxToAnt_10
   2425                  ucRet=1;			
   \                     ??BoxToAnt_9: (+1)
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000016C   0xE00B             B.N      ??BoxToAnt_11
   2426                }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??BoxToAnt_10: (+1)
   \   0000016E   0x....             LDR.N    R0,??DataTable22
   \   00000170   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000172   0x210A             MOVS     R1,#+10
   \   00000174   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000178   0x4408             ADD      R0,R0,R1
   \   0000017A   0x8840             LDRH     R0,[R0, #+2]
   \   0000017C   0x2800             CMP      R0,#+0
   \   0000017E   0xD102             BNE.N    ??BoxToAnt_11
   2427                  ucRet=2;
   \   00000180   0x2002             MOVS     R0,#+2
   \   00000182   0xF88D 0x0004      STRB     R0,[SP, #+4]
   2428                }
   2429                OS_EXIT_CRITICAL();
   \                     ??BoxToAnt_11: (+1)
   \   00000186   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000018A   0x4648             MOV      R0,R9
   \   0000018C   0x.... 0x....      BL       CPU_SR_Restore
   \   00000190   0xE783             B.N      ??BoxToAnt_0
   2430              }
   2431            }
   2432            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??BoxToAnt_1: (+1)
   \   00000192   0x2100             MOVS     R1,#+0
   \   00000194   0x0038             MOVS     R0,R7
   \   00000196   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000198   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2433                                            
   2434            if(!ucDMotoPosA){
   \   0000019C   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000001A0   0x2800             CMP      R0,#+0
   \   000001A2   0xD106             BNE.N    ??BoxToAnt_12
   2435              ucDMotoPosA=DMotoPosAWaitEnter(100,ucDSelected);
   \   000001A4   0x0031             MOVS     R1,R6
   \   000001A6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001A8   0x2064             MOVS     R0,#+100
   \   000001AA   0x.... 0x....      BL       DMotoPosAWaitEnter
   \   000001AE   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2436            }
   2437            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \                     ??BoxToAnt_12: (+1)
   \   000001B2   0x2100             MOVS     R1,#+0
   \   000001B4   0x0030             MOVS     R0,R6
   \   000001B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B8   0x.... 0x....      BL       MOTO_DC_DISABLED
   2438            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   \   000001BC   0xF10D 0x020A      ADD      R2,SP,#+10
   \   000001C0   0x2100             MOVS     R1,#+0
   \   000001C2   0x200A             MOVS     R0,#+10
   \   000001C4   0x.... 0x....      BL       OSTimeDly
   2439          
   2440            if(ucRet>=2){
   \   000001C8   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001CC   0x2802             CMP      R0,#+2
   \   000001CE   0xDB01             BLT.N    ??BoxToAnt_13
   2441              //ulTmp=GetKeyOutput();    
   2442              //if(!CheckBit(ulTmp,ucCardPosABit) && !CheckBit(ulTmp,ucCardCBit)){
   2443              return FALSE;
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0xE02B             B.N      ??BoxToAnt_14
   2444              //}    
   2445            }  
   2446          
   2447            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited){
   \                     ??BoxToAnt_13: (+1)
   \   000001D4   0x....             LDR.N    R0,??DataTable21_2
   \   000001D6   0x7B80             LDRB     R0,[R0, #+14]
   \   000001D8   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000001DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD123             BNE.N    ??BoxToAnt_15
   2448              m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=1;
   \   000001E2   0x....             LDR.N    R0,??DataTable21_2
   \   000001E4   0x7B80             LDRB     R0,[R0, #+14]
   \   000001E6   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000001EA   0x....             LDR.N    R1,??DataTable21_2
   \   000001EC   0x7388             STRB     R0,[R1, #+14]
   2449              //μ??ú???μ
   2450              CardBoxBasicInfoSend(0x80,BOX_FIRST);
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x2080             MOVS     R0,#+128
   \   000001F2   0x.... 0x....      BL       CardBoxBasicInfoSend
   2451              
   2452              //??éù?¨êy
   2453              m_usrBoxInfo[BOX_FIRST].usrCountResponse.ulMachineId=m_usrBoxInfo[BOX_FIRST].ulMachineId;
   \   000001F6   0x....             LDR.N    R0,??DataTable21_2
   \   000001F8   0x6840             LDR      R0,[R0, #+4]
   \   000001FA   0x....             LDR.N    R1,??DataTable21_2
   \   000001FC   0x6148             STR      R0,[R1, #+20]
   2454              m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucCurrentCount=m_usrBoxInfo[BOX_FIRST].ucCounts;
   \   000001FE   0x....             LDR.N    R0,??DataTable21_2
   \   00000200   0x7800             LDRB     R0,[R0, #+0]
   \   00000202   0x....             LDR.N    R1,??DataTable21_2
   \   00000204   0x7608             STRB     R0,[R1, #+24]
   2455              m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucNewCount=m_usrBoxInfo[BOX_FIRST].ucCounts-1;
   \   00000206   0x....             LDR.N    R0,??DataTable21_2
   \   00000208   0x7800             LDRB     R0,[R0, #+0]
   \   0000020A   0x1E40             SUBS     R0,R0,#+1
   \   0000020C   0x....             LDR.N    R1,??DataTable21_2
   \   0000020E   0x7648             STRB     R0,[R1, #+25]
   2456              m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucRetrys=8;
   \   00000210   0x2008             MOVS     R0,#+8
   \   00000212   0x....             LDR.N    R1,??DataTable21_2
   \   00000214   0x7688             STRB     R0,[R1, #+26]
   2457              CardCountUpdateSend(0,BOX_FIRST);
   \   00000216   0x2100             MOVS     R1,#+0
   \   00000218   0x2000             MOVS     R0,#+0
   \   0000021A   0x.... 0x....      BL       CardCountUpdateSend
   2458              OSTimeDly(BOX_COUNT_WRITE_TIME/10,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000021E   0xF10D 0x020A      ADD      R2,SP,#+10
   \   00000222   0x2100             MOVS     R1,#+0
   \   00000224   0x200A             MOVS     R0,#+10
   \   00000226   0x.... 0x....      BL       OSTimeDly
   2459            }
   2460          
   2461            /*if(ucEnterA){
   2462            MotoStepCounts(20,MOTO_FORWARD_MODE);
   2463            }else if(ucLeaveC){
   2464            MotoStepCounts(60,MOTO_FORWARD_MODE);
   2465            }*/
   2466          
   2467            return TRUE;
   \                     ??BoxToAnt_15: (+1)
   \   0000022A   0x2001             MOVS     R0,#+1
   \                     ??BoxToAnt_14: (+1)
   \   0000022C   0xB005             ADD      SP,SP,#+20
   \   0000022E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2468          }
   2469          
   2470          /*******************************************************************************************************
   2471          ** oˉêy??3?: BoxToAntProcess
   2472          ** 1|?ü?èê?: 
   2473          ** ê? ?? è?:
   2474          **
   2475          ** ê???  3?:
   2476          **
   2477          ** è???±?á?:
   2478          ** μ÷ó??￡?é:
   2479          **
   2480          ** ×÷??  ??: John Tonny
   2481          ** è???  ?ú: 2009?ê11??01è?
   2482          **------------------------------------------------------------------------------------------------------
   2483          ** DT ?? è?:
   2484          ** è???  ?ú:
   2485          **------------------------------------------------------------------------------------------------------
   2486          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2487          INT8U BoxToAntProcess(CardMachineRxData *pcommRx1Data)
   2488          {
   \                     BoxToAntProcess: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x0004             MOVS     R4,R0
   2489            OS_ERR os_err;
   2490            INT8U ucRetrys=0;
   \   00000008   0xF05F 0x0900      MOVS     R9,#+0
   2491            INT8U ucData[32];
   2492            INT8U ucMode;
   2493            INT32U ulTmp;
   2494            INT8U ucRet;
   2495            
   2496            INT8U ucBoxLoad1Bit=m_ucKeyBit[BOXLOAD1_BIT];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000010   0xF890 0x8003      LDRB     R8,[R0, #+3]
   2497            
   2498            ucMode=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
   2499            if(!pcommRx1Data){
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD101             BNE.N    ??BoxToAntProcess_0
   2500              ucMode=1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x0005             MOVS     R5,R0
   2501            }
   2502            
   2503            ucRetrys=0;
   \                     ??BoxToAntProcess_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4681             MOV      R9,R0
   2504            ucRet=0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0007             MOVS     R7,R0
   2505            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??BoxToAntProcess_1: (+1)
   \   00000028   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000002C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000030   0xF1B9 0x0F04      CMP      R9,#+4
   \   00000034   0xDA68             BGE.N    ??BoxToAntProcess_2
   2506              ucRet=BoxToAntPreProcess();
   \   00000036   0x.... 0x....      BL       BoxToAntPreProcess
   \   0000003A   0x0007             MOVS     R7,R0
   2507              if(!ucRet){
   \   0000003C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003E   0x2F00             CMP      R7,#+0
   \   00000040   0xD105             BNE.N    ??BoxToAntProcess_3
   2508                OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000042   0xAA02             ADD      R2,SP,#+8
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       OSTimeDly
   2509                break;
   \   0000004C   0xE05C             B.N      ??BoxToAntProcess_2
   2510              }else if(ucRet==1){
   \                     ??BoxToAntProcess_3: (+1)
   \   0000004E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   0x2F01             CMP      R7,#+1
   \   00000052   0xD11B             BNE.N    ??BoxToAntProcess_4
   2511                ucData[0]=SUBTYPE_ERR_CARD_ONANT;
   \   00000054   0x2041             MOVS     R0,#+65
   \   00000056   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2512                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0xAB03             ADD      R3,SP,#+12
   \   00000066   0x78A2             LDRB     R2,[R4, #+2]
   \   00000068   0x7861             LDRB     R1,[R4, #+1]
   \   0000006A   0x205E             MOVS     R0,#+94
   \   0000006C   0x.... 0x....      BL       Uart0Pack
   2513                ucData[0]=DISPLAY_INFO_MSG;
   \   00000070   0x200A             MOVS     R0,#+10
   \   00000072   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2514                ucData[1]=DISPLAY_INFO_ONANT_HAVING_CARD_CMD;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF88D 0x000D      STRB     R0,[SP, #+13]
   2515                Box_TaskLcdQPost(&App_TaskLcdTCB,ucData,2);  
   \   0000007C   0x2202             MOVS     R2,#+2
   \   0000007E   0xA903             ADD      R1,SP,#+12
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   00000084   0x.... 0x....      BL       Box_TaskLcdQPost
   2516                return FALSE;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xE106             B.N      ??BoxToAntProcess_5
   2517              }else if(ucRet==3){
   \                     ??BoxToAntProcess_4: (+1)
   \   0000008C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008E   0x2F03             CMP      R7,#+3
   \   00000090   0xD11B             BNE.N    ??BoxToAntProcess_6
   2518                ucData[0]=SUBTYPE_ERR_CARD_ONEXIT;
   \   00000092   0x2045             MOVS     R0,#+69
   \   00000094   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2519                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000098   0x0028             MOVS     R0,R5
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x9001             STR      R0,[SP, #+4]
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0xAB03             ADD      R3,SP,#+12
   \   000000A4   0x78A2             LDRB     R2,[R4, #+2]
   \   000000A6   0x7861             LDRB     R1,[R4, #+1]
   \   000000A8   0x205E             MOVS     R0,#+94
   \   000000AA   0x.... 0x....      BL       Uart0Pack
   2520                ucData[0]=DISPLAY_INFO_MSG;
   \   000000AE   0x200A             MOVS     R0,#+10
   \   000000B0   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2521                ucData[1]=DISPLAY_INFO_ONEXIT_HAVING_CARD_CMD;
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0xF88D 0x000D      STRB     R0,[SP, #+13]
   2522                Box_TaskLcdQPost(&App_TaskLcdTCB,ucData,2);  
   \   000000BA   0x2202             MOVS     R2,#+2
   \   000000BC   0xA903             ADD      R1,SP,#+12
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   000000C2   0x.... 0x....      BL       Box_TaskLcdQPost
   2523                return FALSE;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0xE0E7             B.N      ??BoxToAntProcess_5
   2524              }else if(ucRet==4){
   \                     ??BoxToAntProcess_6: (+1)
   \   000000CA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000CC   0x2F04             CMP      R7,#+4
   \   000000CE   0xD1AB             BNE.N    ??BoxToAntProcess_1
   2525                ucData[0]=SUBTYPE_ERR_BOX2ANT_FAIL;
   \   000000D0   0x2053             MOVS     R0,#+83
   \   000000D2   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2526                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000D6   0x0028             MOVS     R0,R5
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x9001             STR      R0,[SP, #+4]
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0xAB03             ADD      R3,SP,#+12
   \   000000E2   0x78A2             LDRB     R2,[R4, #+2]
   \   000000E4   0x7861             LDRB     R1,[R4, #+1]
   \   000000E6   0x205E             MOVS     R0,#+94
   \   000000E8   0x.... 0x....      BL       Uart0Pack
   2527                ucData[0]=DISPLAY_INFO_MSG;
   \   000000EC   0x200A             MOVS     R0,#+10
   \   000000EE   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2528                ucData[1]=DISPLAY_INFO_ONANTEXIT_HAVING_CARD_CMD;
   \   000000F2   0x2002             MOVS     R0,#+2
   \   000000F4   0xF88D 0x000D      STRB     R0,[SP, #+13]
   2529                Box_TaskLcdQPost(&App_TaskLcdTCB,ucData,2);  
   \   000000F8   0x2202             MOVS     R2,#+2
   \   000000FA   0xA903             ADD      R1,SP,#+12
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   00000100   0x.... 0x....      BL       Box_TaskLcdQPost
   2530                return FALSE;
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0xE0C8             B.N      ??BoxToAntProcess_5
   2531              }
   2532            }	
   2533            if(ucRetrys>MOTO_RETRYS){
   \                     ??BoxToAntProcess_2: (+1)
   \   00000108   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000010C   0xF1B9 0x0F04      CMP      R9,#+4
   \   00000110   0xDB15             BLT.N    ??BoxToAntProcess_7
   2534              ucData[0]=SUBTYPE_ERR_BOX2ANT_FAIL;
   \   00000112   0x2053             MOVS     R0,#+83
   \   00000114   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2535              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000118   0x0028             MOVS     R0,R5
   \   0000011A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011C   0x9001             STR      R0,[SP, #+4]
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0xAB03             ADD      R3,SP,#+12
   \   00000124   0x78A2             LDRB     R2,[R4, #+2]
   \   00000126   0x7861             LDRB     R1,[R4, #+1]
   \   00000128   0x205E             MOVS     R0,#+94
   \   0000012A   0x.... 0x....      BL       Uart0Pack
   2536              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   0000012E   0x2313             MOVS     R3,#+19
   \   00000130   0x2219             MOVS     R2,#+25
   \   00000132   0x2132             MOVS     R1,#+50
   \   00000134   0x2004             MOVS     R0,#+4
   \   00000136   0x.... 0x....      BL       BuzzSet
   2537              return FALSE;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0xE0AD             B.N      ??BoxToAntProcess_5
   2538            }		
   2539            
   2540            ulTmp=GetKeyOutput();
   \                     ??BoxToAntProcess_7: (+1)
   \   0000013E   0x.... 0x....      BL       GetKeyOutput
   \   00000142   0x0006             MOVS     R6,R0
   2541            if(!CheckBit(ulTmp,ucBoxLoad1Bit)){
   \   00000144   0x0030             MOVS     R0,R6
   \   00000146   0xFA30 0xF008      LSRS     R0,R0,R8
   \   0000014A   0x07C0             LSLS     R0,R0,#+31
   \   0000014C   0xD40F             BMI.N    ??BoxToAntProcess_8
   2542              ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   0000014E   0x2044             MOVS     R0,#+68
   \   00000150   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2543              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000154   0x0028             MOVS     R0,R5
   \   00000156   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000158   0x9001             STR      R0,[SP, #+4]
   \   0000015A   0x2001             MOVS     R0,#+1
   \   0000015C   0x9000             STR      R0,[SP, #+0]
   \   0000015E   0xAB03             ADD      R3,SP,#+12
   \   00000160   0x78A2             LDRB     R2,[R4, #+2]
   \   00000162   0x7861             LDRB     R1,[R4, #+1]
   \   00000164   0x205E             MOVS     R0,#+94
   \   00000166   0x.... 0x....      BL       Uart0Pack
   2544              return FALSE;
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xE095             B.N      ??BoxToAntProcess_5
   2545            }
   2546                    
   2547            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \                     ??BoxToAntProcess_8: (+1)
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000172   0x7B80             LDRB     R0,[R0, #+14]
   \   00000174   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000178   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD10F             BNE.N    ??BoxToAntProcess_9
   2548              ucData[0]=SUBTYPE_ERR_BOX_NOCONNECT;
   \   0000017E   0x2064             MOVS     R0,#+100
   \   00000180   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2549              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000184   0x0028             MOVS     R0,R5
   \   00000186   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000188   0x9001             STR      R0,[SP, #+4]
   \   0000018A   0x2001             MOVS     R0,#+1
   \   0000018C   0x9000             STR      R0,[SP, #+0]
   \   0000018E   0xAB03             ADD      R3,SP,#+12
   \   00000190   0x78A2             LDRB     R2,[R4, #+2]
   \   00000192   0x7861             LDRB     R1,[R4, #+1]
   \   00000194   0x205E             MOVS     R0,#+94
   \   00000196   0x.... 0x....      BL       Uart0Pack
   2550              return FALSE;
   \   0000019A   0x2000             MOVS     R0,#+0
   \   0000019C   0xE07D             B.N      ??BoxToAntProcess_5
   2551            }
   2552            
   2553            if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \                     ??BoxToAntProcess_9: (+1)
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000001A2   0x7C00             LDRB     R0,[R0, #+16]
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD00F             BEQ.N    ??BoxToAntProcess_10
   2554              ucData[0]=SUBTYPE_ERR_DEVICE_BUSY;
   \   000001A8   0x203B             MOVS     R0,#+59
   \   000001AA   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2555              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000001AE   0x0028             MOVS     R0,R5
   \   000001B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B2   0x9001             STR      R0,[SP, #+4]
   \   000001B4   0x2001             MOVS     R0,#+1
   \   000001B6   0x9000             STR      R0,[SP, #+0]
   \   000001B8   0xAB03             ADD      R3,SP,#+12
   \   000001BA   0x78A2             LDRB     R2,[R4, #+2]
   \   000001BC   0x7861             LDRB     R1,[R4, #+1]
   \   000001BE   0x205E             MOVS     R0,#+94
   \   000001C0   0x.... 0x....      BL       Uart0Pack
   2556              return FALSE;
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0xE068             B.N      ??BoxToAntProcess_5
   2557            }
   2558            
   2559            if(!m_usrBoxInfo[BOX_FIRST].ucCounts){
   \                     ??BoxToAntProcess_10: (+1)
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000001CC   0x7800             LDRB     R0,[R0, #+0]
   \   000001CE   0x2800             CMP      R0,#+0
   \   000001D0   0xD10F             BNE.N    ??BoxToAntProcess_11
   2560              ucData[0]=SUBTYPE_ERR_CARDCOUNT_ZERO;
   \   000001D2   0x2063             MOVS     R0,#+99
   \   000001D4   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2561              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000001D8   0x0028             MOVS     R0,R5
   \   000001DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DC   0x9001             STR      R0,[SP, #+4]
   \   000001DE   0x2001             MOVS     R0,#+1
   \   000001E0   0x9000             STR      R0,[SP, #+0]
   \   000001E2   0xAB03             ADD      R3,SP,#+12
   \   000001E4   0x78A2             LDRB     R2,[R4, #+2]
   \   000001E6   0x7861             LDRB     R1,[R4, #+1]
   \   000001E8   0x205E             MOVS     R0,#+94
   \   000001EA   0x.... 0x....      BL       Uart0Pack
   2562              return FALSE;
   \   000001EE   0x2000             MOVS     R0,#+0
   \   000001F0   0xE053             B.N      ??BoxToAntProcess_5
   2563            }
   2564            
   2565            m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=0;
   \                     ??BoxToAntProcess_11: (+1)
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000001F6   0x7B80             LDRB     R0,[R0, #+14]
   \   000001F8   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000200   0x7388             STRB     R0,[R1, #+14]
   2566            ucRetrys=0;
   \   00000202   0x2000             MOVS     R0,#+0
   \   00000204   0x4681             MOV      R9,R0
   2567            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??BoxToAntProcess_12: (+1)
   \   00000206   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000020A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000020E   0xF1B9 0x0F04      CMP      R9,#+4
   \   00000212   0xDA1B             BGE.N    ??BoxToAntProcess_13
   2568              ulTmp=GetKeyOutput();
   \   00000214   0x.... 0x....      BL       GetKeyOutput
   \   00000218   0x0006             MOVS     R6,R0
   2569              if(!CheckBit(ulTmp,ucBoxLoad1Bit)){
   \   0000021A   0x0030             MOVS     R0,R6
   \   0000021C   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000220   0x07C0             LSLS     R0,R0,#+31
   \   00000222   0xD40F             BMI.N    ??BoxToAntProcess_14
   2570                ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   00000224   0x2044             MOVS     R0,#+68
   \   00000226   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2571                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000022A   0x0028             MOVS     R0,R5
   \   0000022C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000022E   0x9001             STR      R0,[SP, #+4]
   \   00000230   0x2001             MOVS     R0,#+1
   \   00000232   0x9000             STR      R0,[SP, #+0]
   \   00000234   0xAB03             ADD      R3,SP,#+12
   \   00000236   0x78A2             LDRB     R2,[R4, #+2]
   \   00000238   0x7861             LDRB     R1,[R4, #+1]
   \   0000023A   0x205E             MOVS     R0,#+94
   \   0000023C   0x.... 0x....      BL       Uart0Pack
   2572                return FALSE;
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0xE02A             B.N      ??BoxToAntProcess_5
   2573              }
   2574              if(BoxToAnt()){
   \                     ??BoxToAntProcess_14: (+1)
   \   00000244   0x.... 0x....      BL       BoxToAnt
   \   00000248   0x2800             CMP      R0,#+0
   \   0000024A   0xD0DC             BEQ.N    ??BoxToAntProcess_12
   2575                break;
   2576              }
   2577            }
   2578            
   2579            if(ucRetrys>MOTO_RETRYS){
   \                     ??BoxToAntProcess_13: (+1)
   \   0000024C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000250   0xF1B9 0x0F04      CMP      R9,#+4
   \   00000254   0xDB15             BLT.N    ??BoxToAntProcess_15
   2580              ucData[0]=SUBTYPE_ERR_BOX2ANT_FAIL;
   \   00000256   0x2053             MOVS     R0,#+83
   \   00000258   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2581              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000025C   0x0028             MOVS     R0,R5
   \   0000025E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000260   0x9001             STR      R0,[SP, #+4]
   \   00000262   0x2001             MOVS     R0,#+1
   \   00000264   0x9000             STR      R0,[SP, #+0]
   \   00000266   0xAB03             ADD      R3,SP,#+12
   \   00000268   0x78A2             LDRB     R2,[R4, #+2]
   \   0000026A   0x7861             LDRB     R1,[R4, #+1]
   \   0000026C   0x205E             MOVS     R0,#+94
   \   0000026E   0x.... 0x....      BL       Uart0Pack
   2582              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000272   0x2313             MOVS     R3,#+19
   \   00000274   0x2219             MOVS     R2,#+25
   \   00000276   0x2132             MOVS     R1,#+50
   \   00000278   0x2004             MOVS     R0,#+4
   \   0000027A   0x.... 0x....      BL       BuzzSet
   2583              return FALSE;
   \   0000027E   0x2000             MOVS     R0,#+0
   \   00000280   0xE00B             B.N      ??BoxToAntProcess_5
   2584            }else{
   2585              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \                     ??BoxToAntProcess_15: (+1)
   \   00000282   0x0028             MOVS     R0,R5
   \   00000284   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000286   0x9001             STR      R0,[SP, #+4]
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x9000             STR      R0,[SP, #+0]
   \   0000028C   0x2300             MOVS     R3,#+0
   \   0000028E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000290   0x7861             LDRB     R1,[R4, #+1]
   \   00000292   0x205F             MOVS     R0,#+95
   \   00000294   0x.... 0x....      BL       Uart0Pack
   2586            }
   2587            return TRUE;
   \   00000298   0x2001             MOVS     R0,#+1
   \                     ??BoxToAntProcess_5: (+1)
   \   0000029A   0xB00B             ADD      SP,SP,#+44
   \   0000029C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2588          }
   2589          
   2590          /*******************************************************************************************************
   2591          ** oˉêy??3?: AntToOut
   2592          ** 1|?ü?èê?: 
   2593          ** ê? ?? è?:
   2594          **
   2595          ** ê???  3?:
   2596          **
   2597          ** è???±?á?:
   2598          ** μ÷ó??￡?é:
   2599          **
   2600          ** ×÷??  ??: John Tonny
   2601          ** è???  ?ú: 2009?ê11??01è?
   2602          **------------------------------------------------------------------------------------------------------
   2603          ** DT ?? è?:
   2604          ** è???  ?ú:
   2605          **------------------------------------------------------------------------------------------------------
   2606          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2607          INT8U AntToOut(void)
   2608          {
   \                     AntToOut: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   2609            OS_ERR os_err;
   2610            
   2611            INT8U ucRet;
   2612            INT32U ulTmp;
   2613            INT8U ucTmp;
   2614            INT8U ucLeaveC=0;	
   \   00000006   0x2600             MOVS     R6,#+0
   2615            INT16U uiSteps=160;
   \   00000008   0x27A0             MOVS     R7,#+160
   2616            INT8U ucSSelected=SMOTO_FIRST;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   2617            
   2618            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000012   0x7E00             LDRB     R0,[R0, #+24]
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
   2619            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000001C   0xF890 0x901A      LDRB     R9,[R0, #+26]
   2620            
   2621            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable26_2
   \   00000024   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000028   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   2622            INT8U ucTimes;
   2623            
   2624            CPU_SR_ALLOC();
   \   00000030   0xF05F 0x0B00      MOVS     R11,#+0
   2625            
   2626            if(EepromReadVerifyBytes(AUTOOUT_MODE_ADDR,&ucTmp,1)){
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x.... 0x....      BL       EepromReadVerifyBytes
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD006             BEQ.N    ??AntToOut_0
   2627              if(!ucTmp){
   \   00000044   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD102             BNE.N    ??AntToOut_0
   2628                uiSteps=500;
   \   0000004C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000050   0x0007             MOVS     R7,R0
   2629              }
   2630            }
   2631            
   2632            ucTimes=(((INT32U)uiSteps)*ucSMotoFreq)/1000+2;
   \                     ??AntToOut_0: (+1)
   \   00000052   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000005C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000060   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000064   0x1C80             ADDS     R0,R0,#+2
   \   00000066   0x4682             MOV      R10,R0
   2633            SMotoStart(ucSMotoFreq,uiSteps,MOTO_BACKWARD_MODE,ucSSelected);
   \   00000068   0x4643             MOV      R3,R8
   \   0000006A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0x0039             MOVS     R1,R7
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0x.... 0x....      BL       SMotoStart
   2634            ucRet=0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x0004             MOVS     R4,R0
   2635            while(!ucRet){
   \                     ??AntToOut_1: (+1)
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x2C00             CMP      R4,#+0
   \   00000082   0xD136             BNE.N    ??AntToOut_2
   2636              ulTmp=GetKeyOutput();    
   \   00000084   0x.... 0x....      BL       GetKeyOutput
   \   00000088   0x0005             MOVS     R5,R0
   2637              if(!CheckBit(ulTmp,ucCardPosCBit)){
   \   0000008A   0x0028             MOVS     R0,R5
   \   0000008C   0xFA30 0xF009      LSRS     R0,R0,R9
   \   00000090   0x07C0             LSLS     R0,R0,#+31
   \   00000092   0xD401             BMI.N    ??AntToOut_3
   2638                //à??a?ú2??a1?????
   2639                ucLeaveC=1;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x0006             MOVS     R6,R0
   2640              }    
   2641              OS_ENTER_CRITICAL();
   \                     ??AntToOut_3: (+1)
   \   00000098   0x.... 0x....      BL       CPU_SR_Save
   \   0000009C   0x4683             MOV      R11,R0
   \   0000009E   0x.... 0x....      BL       CPU_IntDisMeasStart
   2642              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable30
   \   000000A6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000AA   0x210A             MOVS     R1,#+10
   \   000000AC   0xFB01 0xF108      MUL      R1,R1,R8
   \   000000B0   0x4408             ADD      R0,R0,R1
   \   000000B2   0x8840             LDRH     R0,[R0, #+2]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD107             BNE.N    ??AntToOut_4
   2643                if(ucLeaveC){
   \   000000B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000BA   0x2E00             CMP      R6,#+0
   \   000000BC   0xD002             BEQ.N    ??AntToOut_5
   2644                  ucRet=1;
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0x0004             MOVS     R4,R0
   \   000000C2   0xE001             B.N      ??AntToOut_4
   2645                }else{      
   2646                  ucRet=2;
   \                     ??AntToOut_5: (+1)
   \   000000C4   0x2002             MOVS     R0,#+2
   \   000000C6   0x0004             MOVS     R4,R0
   2647                }
   2648              }
   2649              OS_EXIT_CRITICAL();
   \                     ??AntToOut_4: (+1)
   \   000000C8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000CC   0x4658             MOV      R0,R11
   \   000000CE   0x.... 0x....      BL       CPU_SR_Restore
   2650              if(ucTimes>0){
   \   000000D2   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000D6   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000DA   0xD002             BEQ.N    ??AntToOut_6
   2651                ucTimes--;
   \   000000DC   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000E0   0xE001             B.N      ??AntToOut_7
   2652              }else{
   2653                ucRet=4;
   \                     ??AntToOut_6: (+1)
   \   000000E2   0x2004             MOVS     R0,#+4
   \   000000E4   0x0004             MOVS     R4,R0
   2654              }
   2655              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??AntToOut_7: (+1)
   \   000000E6   0xAA01             ADD      R2,SP,#+4
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x200A             MOVS     R0,#+10
   \   000000EC   0x.... 0x....      BL       OSTimeDly
   \   000000F0   0xE7C5             B.N      ??AntToOut_1
   2656            }
   2657            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??AntToOut_2: (+1)
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F8   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2658          	
   2659            if(ucRet>=2){
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x2C02             CMP      R4,#+2
   \   00000100   0xDB17             BLT.N    ??AntToOut_8
   2660              ulTmp=GetKeyOutput();    
   \   00000102   0x.... 0x....      BL       GetKeyOutput
   \   00000106   0x0005             MOVS     R5,R0
   2661              if(CheckBit(ulTmp,ucCardPosABit) && !CheckBit(ulTmp,ucCardPosCBit)){
   \   00000108   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000010C   0x0029             MOVS     R1,R5
   \   0000010E   0x40C1             LSRS     R1,R1,R0
   \   00000110   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD009             BEQ.N    ??AntToOut_9
   \   0000011A   0x0028             MOVS     R0,R5
   \   0000011C   0xFA30 0xF009      LSRS     R0,R0,R9
   \   00000120   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD101             BNE.N    ??AntToOut_9
   2662                return TRUE;
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0xE002             B.N      ??AntToOut_10
   2663              }
   2664              return FALSE;
   \                     ??AntToOut_9: (+1)
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0xE000             B.N      ??AntToOut_10
   2665            }
   2666            return TRUE;
   \                     ??AntToOut_8: (+1)
   \   00000132   0x2001             MOVS     R0,#+1
   \                     ??AntToOut_10: (+1)
   \   00000134   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   2667          }
   2668          
   2669          /*******************************************************************************************************
   2670          ** oˉêy??3?: AntToOutProcess
   2671          ** 1|?ü?èê?: 
   2672          ** ê? ?? è?:
   2673          **
   2674          ** ê???  3?:
   2675          **
   2676          ** è???±?á?:
   2677          ** μ÷ó??￡?é:
   2678          **
   2679          ** ×÷??  ??: John Tonny
   2680          ** è???  ?ú: 2009?ê11??01è?
   2681          **------------------------------------------------------------------------------------------------------
   2682          ** DT ?? è?:
   2683          ** è???  ?ú:
   2684          **------------------------------------------------------------------------------------------------------
   2685          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2686          INT8U AntToOutProcess(CardMachineRxData *pcommRx1Data)
   2687          {
   \                     AntToOutProcess: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   2688            INT8U ucRetrys=0;
   \   00000006   0x2500             MOVS     R5,#+0
   2689            INT8U ucData[16];
   2690            INT8U ucMode;
   2691            INT32U ulTmp;
   2692            
   2693            ucMode=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   2694            if(!pcommRx1Data){
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD101             BNE.N    ??AntToOutProcess_0
   2695              ucMode=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0006             MOVS     R6,R0
   2696            }
   2697            
   2698            ulTmp=GetKeyOutput();
   \                     ??AntToOutProcess_0: (+1)
   \   00000014   0x.... 0x....      BL       GetKeyOutput
   \   00000018   0x0007             MOVS     R7,R0
   2699            if(!AntToOutPreProcess(ulTmp)){
   \   0000001A   0x0038             MOVS     R0,R7
   \   0000001C   0x.... 0x....      BL       AntToOutPreProcess
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD10F             BNE.N    ??AntToOutProcess_1
   2700              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   00000024   0x2042             MOVS     R0,#+66
   \   00000026   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2701              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xAB02             ADD      R3,SP,#+8
   \   00000036   0x78A2             LDRB     R2,[R4, #+2]
   \   00000038   0x7861             LDRB     R1,[R4, #+1]
   \   0000003A   0x205E             MOVS     R0,#+94
   \   0000003C   0x.... 0x....      BL       Uart0Pack
   2702              return FALSE;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xE02C             B.N      ??AntToOutProcess_2
   2703            }
   2704            
   2705            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??AntToOutProcess_1: (+1)
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D04             CMP      R5,#+4
   \   0000004A   0xDA03             BGE.N    ??AntToOutProcess_3
   2706              if(AntToOut()){
   \   0000004C   0x.... 0x....      BL       AntToOut
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0F7             BEQ.N    ??AntToOutProcess_1
   2707                break;
   2708              }
   2709            }
   2710            
   2711            if(ucRetrys<=MOTO_RETRYS){
   \                     ??AntToOutProcess_3: (+1)
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x2D04             CMP      R5,#+4
   \   00000058   0xDA0C             BGE.N    ??AntToOutProcess_4
   2712              //???ˉ?¨ê±?′°?3?±¨?ˉ  
   2713              //TakeoutOvertimeRead();    
   2714              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0x2300             MOVS     R3,#+0
   \   00000066   0x78A2             LDRB     R2,[R4, #+2]
   \   00000068   0x7861             LDRB     R1,[R4, #+1]
   \   0000006A   0x205F             MOVS     R0,#+95
   \   0000006C   0x.... 0x....      BL       Uart0Pack
   2715              return TRUE;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE014             B.N      ??AntToOutProcess_2
   2716            }else{
   2717              ucData[0]=SUBTYPE_ERR_ANT2EXIT_FAIL;
   \                     ??AntToOutProcess_4: (+1)
   \   00000074   0x2054             MOVS     R0,#+84
   \   00000076   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2718              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000007A   0x0030             MOVS     R0,R6
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0xAB02             ADD      R3,SP,#+8
   \   00000086   0x78A2             LDRB     R2,[R4, #+2]
   \   00000088   0x7861             LDRB     R1,[R4, #+1]
   \   0000008A   0x205E             MOVS     R0,#+94
   \   0000008C   0x.... 0x....      BL       Uart0Pack
   2719              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000090   0x2313             MOVS     R3,#+19
   \   00000092   0x2219             MOVS     R2,#+25
   \   00000094   0x2132             MOVS     R1,#+50
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x.... 0x....      BL       BuzzSet
   2720              return FALSE;
   \   0000009C   0x2000             MOVS     R0,#+0
   \                     ??AntToOutProcess_2: (+1)
   \   0000009E   0xB007             ADD      SP,SP,#+28
   \   000000A0   0xBDF0             POP      {R4-R7,PC}       ;; return
   2721            }  
   2722          }
   2723          
   2724          /*******************************************************************************************************
   2725          ** oˉêy??3?: InToAnt
   2726          ** 1|?ü?èê?: 
   2727          ** ê? ?? è?:
   2728          **
   2729          ** ê???  3?:
   2730          **
   2731          ** è???±?á?:
   2732          ** μ÷ó??￡?é:
   2733          **
   2734          ** ×÷??  ??: John Tonny
   2735          ** è???  ?ú: 2009?ê11??01è?
   2736          **------------------------------------------------------------------------------------------------------
   2737          ** DT ?? è?:
   2738          ** è???  ?ú:
   2739          **------------------------------------------------------------------------------------------------------
   2740          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2741          INT8U InToAnt(void)
   2742          {
   \                     InToAnt: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   2743            OS_ERR os_err;
   2744            
   2745            INT8U ucRet;
   2746            INT32U ulTmp;
   2747            INT8U ucLeaveC=0;
   \   00000004   0x2600             MOVS     R6,#+0
   2748            INT8U ucEnterC=0;
   \   00000006   0x2700             MOVS     R7,#+0
   2749            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable26_1
   \   0000000C   0xF890 0x8000      LDRB     R8,[R0, #+0]
   2750            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable26_2
   \   00000014   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000018   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   2751                    
   2752            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000024   0x7E00             LDRB     R0,[R0, #+24]
   \   00000026   0xF88D 0x0001      STRB     R0,[SP, #+1]
   2753            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000002E   0xF890 0x901A      LDRB     R9,[R0, #+26]
   2754            
   2755            INT8U ucTimes;
   2756            
   2757            CPU_SR_ALLOC();
   \   00000032   0xF05F 0x0B00      MOVS     R11,#+0
   2758            
   2759            ulTmp=GetKeyOutput();    
   \   00000036   0x.... 0x....      BL       GetKeyOutput
   \   0000003A   0x0005             MOVS     R5,R0
   2760            if(CheckBit(ulTmp,ucCardPosCBit)){
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xFA30 0xF009      LSRS     R0,R0,R9
   \   00000042   0x07C0             LSLS     R0,R0,#+31
   \   00000044   0xD560             BPL.N    ??InToAnt_0
   2761              //反转
   2762              ucTimes=(((INT32U)SMOTO_COUNT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF44F 0x6196      MOV      R1,#+1200
   \   0000004E   0x4348             MULS     R0,R1,R0
   \   00000050   0xF44F 0x71FA      MOV      R1,#+500
   \   00000054   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000058   0x1C80             ADDS     R0,R0,#+2
   \   0000005A   0x4682             MOV      R10,R0
   2763              SMotoStart(ucSMotoFreq,SMOTO_COUNT_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);
   \   0000005C   0x4643             MOV      R3,R8
   \   0000005E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0xF44F 0x6196      MOV      R1,#+1200
   \   00000066   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006A   0x.... 0x....      BL       SMotoStart
   2764              ucRet=0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x0004             MOVS     R4,R0
   2765              while(!ucRet){
   \                     ??InToAnt_1: (+1)
   \   00000072   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000074   0x2C00             CMP      R4,#+0
   \   00000076   0xD142             BNE.N    ??InToAnt_2
   2766                ulTmp=GetKeyOutput();    
   \   00000078   0x.... 0x....      BL       GetKeyOutput
   \   0000007C   0x0005             MOVS     R5,R0
   2767                if(!CheckBit(ulTmp,ucCardPosCBit)){
   \   0000007E   0x0028             MOVS     R0,R5
   \   00000080   0xFA30 0xF009      LSRS     R0,R0,R9
   \   00000084   0x07C0             LSLS     R0,R0,#+31
   \   00000086   0xD40C             BMI.N    ??InToAnt_3
   2768                  //离开
   2769                  OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000088   0xF10D 0x0202      ADD      R2,SP,#+2
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x2014             MOVS     R0,#+20
   \   00000090   0x.... 0x....      BL       OSTimeDly
   2770                  MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x4640             MOV      R0,R8
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2771                  ucLeaveC=1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x0006             MOVS     R6,R0
   2772                }
   2773                
   2774                
   2775                OS_ENTER_CRITICAL();
   \                     ??InToAnt_3: (+1)
   \   000000A2   0x.... 0x....      BL       CPU_SR_Save
   \   000000A6   0x4683             MOV      R11,R0
   \   000000A8   0x.... 0x....      BL       CPU_IntDisMeasStart
   2776                if(ucLeaveC){
   \   000000AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000AE   0x2E00             CMP      R6,#+0
   \   000000B0   0xD002             BEQ.N    ??InToAnt_4
   2777                  ucRet=1;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0xE00C             B.N      ??InToAnt_5
   2778                }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??InToAnt_4: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable30
   \   000000BC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C0   0x210A             MOVS     R1,#+10
   \   000000C2   0xFB01 0xF108      MUL      R1,R1,R8
   \   000000C6   0x4408             ADD      R0,R0,R1
   \   000000C8   0x8840             LDRH     R0,[R0, #+2]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD101             BNE.N    ??InToAnt_5
   2779                  ucRet=2;
   \   000000CE   0x2002             MOVS     R0,#+2
   \   000000D0   0x0004             MOVS     R4,R0
   2780                }
   2781                OS_EXIT_CRITICAL();
   \                     ??InToAnt_5: (+1)
   \   000000D2   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000D6   0x4658             MOV      R0,R11
   \   000000D8   0x.... 0x....      BL       CPU_SR_Restore
   2782                
   2783                if(ucTimes>0){
   \   000000DC   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000E0   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000E4   0xD002             BEQ.N    ??InToAnt_6
   2784                  ucTimes--;
   \   000000E6   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000EA   0xE001             B.N      ??InToAnt_7
   2785                }else{
   2786                  ucRet=4;
   \                     ??InToAnt_6: (+1)
   \   000000EC   0x2004             MOVS     R0,#+4
   \   000000EE   0x0004             MOVS     R4,R0
   2787                }
   2788                OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??InToAnt_7: (+1)
   \   000000F0   0xF10D 0x0202      ADD      R2,SP,#+2
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x.... 0x....      BL       OSTimeDly
   \   000000FC   0xE7B9             B.N      ??InToAnt_1
   2789              }
   2790              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??InToAnt_2: (+1)
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x4640             MOV      R0,R8
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2791            }
   2792            
   2793            if(ucRet>=2){
   \                     ??InToAnt_0: (+1)
   \   00000108   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000010A   0x2C02             CMP      R4,#+2
   \   0000010C   0xDB01             BLT.N    ??InToAnt_8
   2794              return FALSE;
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0xE060             B.N      ??InToAnt_9
   2795            }
   2796            
   2797            ucTimes=(((INT32U)SMOTO_COUNT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \                     ??InToAnt_8: (+1)
   \   00000112   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000116   0xF44F 0x6196      MOV      R1,#+1200
   \   0000011A   0x4348             MULS     R0,R1,R0
   \   0000011C   0xF44F 0x71FA      MOV      R1,#+500
   \   00000120   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000124   0x1C80             ADDS     R0,R0,#+2
   \   00000126   0x4682             MOV      R10,R0
   2798            SMotoStart(ucSMotoFreq,SMOTO_COUNT_DEFAULT,MOTO_BACKWARD_MODE,ucSSelected);
   \   00000128   0x4643             MOV      R3,R8
   \   0000012A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000012C   0x2201             MOVS     R2,#+1
   \   0000012E   0xF44F 0x6196      MOV      R1,#+1200
   \   00000132   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000136   0x.... 0x....      BL       SMotoStart
   2799            ucRet=0;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x0004             MOVS     R4,R0
   2800            while(!ucRet){
   \                     ??InToAnt_10: (+1)
   \   0000013E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000140   0x2C00             CMP      R4,#+0
   \   00000142   0xD13C             BNE.N    ??InToAnt_11
   2801              ulTmp=GetKeyOutput();    
   \   00000144   0x.... 0x....      BL       GetKeyOutput
   \   00000148   0x0005             MOVS     R5,R0
   2802              if(CheckBit(ulTmp,ucCardPosCBit)){
   \   0000014A   0x0028             MOVS     R0,R5
   \   0000014C   0xFA30 0xF009      LSRS     R0,R0,R9
   \   00000150   0x07C0             LSLS     R0,R0,#+31
   \   00000152   0xD506             BPL.N    ??InToAnt_12
   2803                //
   2804                //OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   2805                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000154   0x2100             MOVS     R1,#+0
   \   00000156   0x4640             MOV      R0,R8
   \   00000158   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2806                ucEnterC=1;
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x0007             MOVS     R7,R0
   2807              }
   2808              
   2809              OS_ENTER_CRITICAL();
   \                     ??InToAnt_12: (+1)
   \   00000162   0x.... 0x....      BL       CPU_SR_Save
   \   00000166   0x4683             MOV      R11,R0
   \   00000168   0x.... 0x....      BL       CPU_IntDisMeasStart
   2810              if(ucEnterC){
   \   0000016C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000016E   0x2F00             CMP      R7,#+0
   \   00000170   0xD002             BEQ.N    ??InToAnt_13
   2811                ucRet=1;
   \   00000172   0x2001             MOVS     R0,#+1
   \   00000174   0x0004             MOVS     R4,R0
   \   00000176   0xE00C             B.N      ??InToAnt_14
   2812              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??InToAnt_13: (+1)
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable30
   \   0000017C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000180   0x210A             MOVS     R1,#+10
   \   00000182   0xFB01 0xF108      MUL      R1,R1,R8
   \   00000186   0x4408             ADD      R0,R0,R1
   \   00000188   0x8840             LDRH     R0,[R0, #+2]
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xD101             BNE.N    ??InToAnt_14
   2813                ucRet=2;
   \   0000018E   0x2002             MOVS     R0,#+2
   \   00000190   0x0004             MOVS     R4,R0
   2814              }
   2815              OS_EXIT_CRITICAL();
   \                     ??InToAnt_14: (+1)
   \   00000192   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000196   0x4658             MOV      R0,R11
   \   00000198   0x.... 0x....      BL       CPU_SR_Restore
   2816              
   2817              if(ucTimes>0){
   \   0000019C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001A0   0xF1BA 0x0F00      CMP      R10,#+0
   \   000001A4   0xD002             BEQ.N    ??InToAnt_15
   2818                ucTimes--;
   \   000001A6   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000001AA   0xE001             B.N      ??InToAnt_16
   2819              }else{
   2820                ucRet=4;
   \                     ??InToAnt_15: (+1)
   \   000001AC   0x2004             MOVS     R0,#+4
   \   000001AE   0x0004             MOVS     R4,R0
   2821              }
   2822              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??InToAnt_16: (+1)
   \   000001B0   0xF10D 0x0202      ADD      R2,SP,#+2
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0x2005             MOVS     R0,#+5
   \   000001B8   0x.... 0x....      BL       OSTimeDly
   \   000001BC   0xE7BF             B.N      ??InToAnt_10
   2823            }
   2824            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??InToAnt_11: (+1)
   \   000001BE   0x2100             MOVS     R1,#+0
   \   000001C0   0x4640             MOV      R0,R8
   \   000001C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C4   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2825            	
   2826            if(ucRet>=2){
   \   000001C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CA   0x2C02             CMP      R4,#+2
   \   000001CC   0xDB01             BLT.N    ??InToAnt_17
   2827              return FALSE;
   \   000001CE   0x2000             MOVS     R0,#+0
   \   000001D0   0xE000             B.N      ??InToAnt_9
   2828            }
   2829            return TRUE;
   \                     ??InToAnt_17: (+1)
   \   000001D2   0x2001             MOVS     R0,#+1
   \                     ??InToAnt_9: (+1)
   \   000001D4   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   2830          }
   2831          
   2832          /*******************************************************************************************************
   2833          ** oˉêy??3?: InToAntProcess
   2834          ** 1|?ü?èê?: 
   2835          ** ê? ?? è?:
   2836          **
   2837          ** ê???  3?:
   2838          **
   2839          ** è???±?á?:
   2840          ** μ÷ó??￡?é:
   2841          **
   2842          ** ×÷??  ??: John Tonny
   2843          ** è???  ?ú: 2009?ê11??01è?
   2844          **------------------------------------------------------------------------------------------------------
   2845          ** DT ?? è?:
   2846          ** è???  ?ú:
   2847          **------------------------------------------------------------------------------------------------------
   2848          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2849          INT8U InToAntProcess(CardMachineRxData *pcommRx1Data)
   2850          {
   \                     InToAntProcess: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
   2851            INT8U ucRetrys=0;
   \   00000008   0x2500             MOVS     R5,#+0
   2852            INT8U ucData[8+8];
   2853            INT8U ucMode;
   2854            INT32U ulTmp;
   2855            
   2856            INT8U ucType=DEV_TYPE();
   \   0000000A   0x.... 0x....      BL       DEV_TYPE
   \   0000000E   0x4680             MOV      R8,R0
   2857          
   2858            CPU_SR_ALLOC();
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   2859            
   2860            MotoReset(NOWAIT_MODE,DMOTO_SECOND);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       MotoReset
   2861            
   2862            if(ucType==SMALL_THICK_IN_TYPE){
   \   0000001C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000020   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000024   0xD109             BNE.N    ??InToAntProcess_0
   2863              ulTmp=GetKeyOutput();
   \   00000026   0x.... 0x....      BL       GetKeyOutput
   \   0000002A   0x0007             MOVS     R7,R0
   2864              if(InToAntPreProcess(ulTmp)){
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0x.... 0x....      BL       InToAntPreProcess
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD001             BEQ.N    ??InToAntProcess_0
   2865                return 2;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xE03C             B.N      ??InToAntProcess_1
   2866              }
   2867            }
   2868            
   2869            ucMode=0;
   \                     ??InToAntProcess_0: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x0006             MOVS     R6,R0
   2870            if(!pcommRx1Data){
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD101             BNE.N    ??InToAntProcess_2
   2871              ucMode=1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x0006             MOVS     R6,R0
   2872            }
   2873            
   2874            OS_ENTER_CRITICAL();
   \                     ??InToAntProcess_2: (+1)
   \   00000046   0x.... 0x....      BL       CPU_SR_Save
   \   0000004A   0x4681             MOV      R9,R0
   \   0000004C   0x.... 0x....      BL       CPU_IntDisMeasStart
   2875            g_usrMotoFlags.uiFlag=0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable33
   \   00000056   0x8008             STRH     R0,[R1, #+0]
   2876            OS_EXIT_CRITICAL();
   \   00000058   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005C   0x4648             MOV      R0,R9
   \   0000005E   0x.... 0x....      BL       CPU_SR_Restore
   2877            
   2878            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??InToAntProcess_3: (+1)
   \   00000062   0x1C6D             ADDS     R5,R5,#+1
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D04             CMP      R5,#+4
   \   00000068   0xDA03             BGE.N    ??InToAntProcess_4
   2879              if(InToAnt()){
   \   0000006A   0x.... 0x....      BL       InToAnt
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD0F7             BEQ.N    ??InToAntProcess_3
   2880                break;
   2881              }
   2882            }
   2883            
   2884            KeyChange();
   \                     ??InToAntProcess_4: (+1)
   \   00000072   0x.... 0x....      BL       KeyChange
   2885            if(ucRetrys<=MOTO_RETRYS){
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2D04             CMP      R5,#+4
   \   0000007A   0xDA0C             BGE.N    ??InToAntProcess_5
   2886              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x9001             STR      R0,[SP, #+4]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x2300             MOVS     R3,#+0
   \   00000088   0x78A2             LDRB     R2,[R4, #+2]
   \   0000008A   0x7861             LDRB     R1,[R4, #+1]
   \   0000008C   0x205F             MOVS     R0,#+95
   \   0000008E   0x.... 0x....      BL       Uart0Pack
   2887              return TRUE;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE00E             B.N      ??InToAntProcess_1
   2888            }else{
   2889              ucData[0]=SUBTYPE_ERR_EXIT2ANT_FAIL;
   \                     ??InToAntProcess_5: (+1)
   \   00000096   0x2051             MOVS     R0,#+81
   \   00000098   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2890              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000009C   0x0030             MOVS     R0,R6
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0x9001             STR      R0,[SP, #+4]
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0xAB02             ADD      R3,SP,#+8
   \   000000A8   0x78A2             LDRB     R2,[R4, #+2]
   \   000000AA   0x7861             LDRB     R1,[R4, #+1]
   \   000000AC   0x205E             MOVS     R0,#+94
   \   000000AE   0x.... 0x....      BL       Uart0Pack
   2891              //BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   2892              return FALSE;
   \   000000B2   0x2000             MOVS     R0,#+0
   \                     ??InToAntProcess_1: (+1)
   \   000000B4   0xB007             ADD      SP,SP,#+28
   \   000000B6   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2893            }
   2894          }
   2895          
   2896          /*******************************************************************************************************
   2897          ** oˉêy??3?: AntToBox
   2898          ** 1|?ü?èê?: 
   2899          ** ê? ?? è?:
   2900          **
   2901          ** ê???  3?:
   2902          **
   2903          ** è???±?á?:
   2904          ** μ÷ó??￡?é:
   2905          **
   2906          ** ×÷??  ??: John Tonny
   2907          ** è???  ?ú: 2009?ê11??01è?
   2908          **------------------------------------------------------------------------------------------------------
   2909          ** DT ?? è?:
   2910          ** è???  ?ú:
   2911          **------------------------------------------------------------------------------------------------------
   2912          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2913          INT8U AntToBox(void)
   2914          {
   \                     AntToBox: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   2915            OS_ERR os_err;
   2916            
   2917            INT8U ucRet;
   2918            INT32U ulTmp;
   2919            INT8U ucEnterD=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x000D      STRB     R0,[SP, #+13]
   2920            INT8U ucLeaveC=0;
   \   0000000C   0x2500             MOVS     R5,#+0
   2921            INT8U ucCardPos=0;
   \   0000000E   0x2600             MOVS     R6,#+0
   2922            INT8U ucDSelected=m_ucDMotoBit[DMOTO_FIRST];
   \   00000010   0x....             LDR.N    R0,??DataTable26
   \   00000012   0x7807             LDRB     R7,[R0, #+0]
   2923            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000014   0x....             LDR.N    R0,??DataTable26_1
   \   00000016   0xF890 0x8000      LDRB     R8,[R0, #+0]
   2924            
   2925            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   0000001A   0x....             LDR.N    R0,??DataTable26_2
   \   0000001C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000020   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   00000024   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2926            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable33_1
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0xF830 0x0017      LDRH     R0,[R0, R7, LSL #+1]
   \   00000032   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   2927            INT16U uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable33_2  ;; 0x27100
   \   0000003A   0xF8BD 0x1012      LDRH     R1,[SP, #+18]
   \   0000003E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000042   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   2928            
   2929            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000004A   0x7E80             LDRB     R0,[R0, #+26]
   \   0000004C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   2930            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000054   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000056   0xF88D 0x0006      STRB     R0,[SP, #+6]
   2931            INT8U ucDMoto1PosBBit=m_ucKeyBit[DMOTO1_POSB_BIT];
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2932            INT8U ucCardBox1PosBit=m_ucKeyBit[CARDBOX1_POS_BIT];
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000068   0x7980             LDRB     R0,[R0, #+6]
   \   0000006A   0xF88D 0x0007      STRB     R0,[SP, #+7]
   2933          
   2934            INT8U ucTimes;
   2935            INT8U ucDelays;
   2936            
   2937            CPU_SR_ALLOC();
   \   0000006E   0xF05F 0x0900      MOVS     R9,#+0
   2938            
   2939            ucTimes=(((INT32U)SMOTO_COUNT_ANTTOBOX_DEFAULT)*ucSMotoFreq)/1000+2;
   \   00000072   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000076   0xF44F 0x71C8      MOV      R1,#+400
   \   0000007A   0x4348             MULS     R0,R1,R0
   \   0000007C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000080   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000084   0x1C80             ADDS     R0,R0,#+2
   \   00000086   0x4682             MOV      R10,R0
   2940            SMotoStart(ucSMotoFreq,SMOTO_COUNT_ANTTOBOX_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);
   \   00000088   0x4643             MOV      R3,R8
   \   0000008A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0xF44F 0x71C8      MOV      R1,#+400
   \   00000092   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000096   0x.... 0x....      BL       SMotoStart
   2941            
   2942            ucRet=0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x0004             MOVS     R4,R0
   2943            while(!ucRet){    
   \                     ??AntToBox_0: (+1)
   \   0000009E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A0   0x2C00             CMP      R4,#+0
   \   000000A2   0xD17D             BNE.N    ??AntToBox_1
   2944              ulTmp=GetKeyOutput();    
   \   000000A4   0x.... 0x....      BL       GetKeyOutput
   \   000000A8   0x9002             STR      R0,[SP, #+8]
   2945              if(CheckBit(ulTmp,ucCardPosDBit)){
   \   000000AA   0x9802             LDR      R0,[SP, #+8]
   \   000000AC   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   000000B0   0x40C8             LSRS     R0,R0,R1
   \   000000B2   0x07C0             LSLS     R0,R0,#+31
   \   000000B4   0xD502             BPL.N    ??AntToBox_2
   2946                //μ?′??¨?ú?a1?????
   2947                ucEnterD=1;
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0xF88D 0x000D      STRB     R0,[SP, #+13]
   2948              }
   2949              
   2950              if(!CheckBit(ulTmp,ucCardPosCBit)){
   \                     ??AntToBox_2: (+1)
   \   000000BC   0x9802             LDR      R0,[SP, #+8]
   \   000000BE   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000C2   0x40C8             LSRS     R0,R0,R1
   \   000000C4   0x07C0             LSLS     R0,R0,#+31
   \   000000C6   0xD401             BMI.N    ??AntToBox_3
   2951                //à??a?ú2??a1?????
   2952                ucLeaveC=1;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x0005             MOVS     R5,R0
   2953              }   
   2954              
   2955              if(AntToBoxPreProcess(ulTmp)>1){
   \                     ??AntToBox_3: (+1)
   \   000000CC   0x9802             LDR      R0,[SP, #+8]
   \   000000CE   0x.... 0x....      BL       AntToBoxPreProcess
   \   000000D2   0x2802             CMP      R0,#+2
   \   000000D4   0xDB1D             BLT.N    ??AntToBox_4
   2956                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x4640             MOV      R0,R8
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2957                if(PlugInClear(150)){
   \   000000E0   0x2096             MOVS     R0,#+150
   \   000000E2   0x.... 0x....      BL       PlugInClear
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD15A             BNE.N    ??AntToBox_1
   2958                  break;
   2959                }else{
   2960                  SMotoStart(ucSMotoFreq,SMOTO_COUNT_ANTTOBOX_DEFAULT+150,MOTO_FORWARD_MODE,ucSSelected);
   \                     ??AntToBox_5: (+1)
   \   000000EA   0x4643             MOV      R3,R8
   \   000000EC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000EE   0x2200             MOVS     R2,#+0
   \   000000F0   0xF240 0x2126      MOVW     R1,#+550
   \   000000F4   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000000F8   0x.... 0x....      BL       SMotoStart
   2961                  ucTimes=(((INT32U)SMOTO_COUNT_ANTTOBOX_DEFAULT+150)*ucSMotoFreq)/1000+2;
   \   000000FC   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000100   0xF240 0x2126      MOVW     R1,#+550
   \   00000104   0x4348             MULS     R0,R1,R0
   \   00000106   0xF44F 0x717A      MOV      R1,#+1000
   \   0000010A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000010E   0x1C80             ADDS     R0,R0,#+2
   \   00000110   0x4682             MOV      R10,R0
   2962                }
   2963              }
   2964              
   2965              if(!(CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosDBit))){//?T?¨
   \                     ??AntToBox_4: (+1)
   \   00000112   0x9802             LDR      R0,[SP, #+8]
   \   00000114   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000118   0x40C8             LSRS     R0,R0,R1
   \   0000011A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD10F             BNE.N    ??AntToBox_6
   \   00000124   0x9802             LDR      R0,[SP, #+8]
   \   00000126   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   0000012A   0x40C8             LSRS     R0,R0,R1
   \   0000012C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000130   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD106             BNE.N    ??AntToBox_6
   2966                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \   00000136   0x2100             MOVS     R1,#+0
   \   00000138   0x4640             MOV      R0,R8
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2967                ucRet=3;
   \   00000140   0x2003             MOVS     R0,#+3
   \   00000142   0x0004             MOVS     R4,R0
   2968              }
   2969              
   2970              OS_ENTER_CRITICAL();
   \                     ??AntToBox_6: (+1)
   \   00000144   0x.... 0x....      BL       CPU_SR_Save
   \   00000148   0x4681             MOV      R9,R0
   \   0000014A   0x.... 0x....      BL       CPU_IntDisMeasStart
   2971              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable30
   \   00000152   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000156   0x210A             MOVS     R1,#+10
   \   00000158   0xFB01 0xF108      MUL      R1,R1,R8
   \   0000015C   0x4408             ADD      R0,R0,R1
   \   0000015E   0x8840             LDRH     R0,[R0, #+2]
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xD107             BNE.N    ??AntToBox_7
   2972                if(ucLeaveC){
   \   00000164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000166   0x2D00             CMP      R5,#+0
   \   00000168   0xD002             BEQ.N    ??AntToBox_8
   2973                  ucRet=1;
   \   0000016A   0x2001             MOVS     R0,#+1
   \   0000016C   0x0004             MOVS     R4,R0
   \   0000016E   0xE001             B.N      ??AntToBox_7
   2974                }else{      
   2975                  ucRet=2;
   \                     ??AntToBox_8: (+1)
   \   00000170   0x2002             MOVS     R0,#+2
   \   00000172   0x0004             MOVS     R4,R0
   2976                }
   2977              }
   2978              OS_EXIT_CRITICAL();
   \                     ??AntToBox_7: (+1)
   \   00000174   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000178   0x4648             MOV      R0,R9
   \   0000017A   0x.... 0x....      BL       CPU_SR_Restore
   2979              if(ucTimes>0){
   \   0000017E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000182   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000186   0xD002             BEQ.N    ??AntToBox_9
   2980                ucTimes--;
   \   00000188   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   0000018C   0xE001             B.N      ??AntToBox_10
   2981              }else{
   2982                ucRet=4;
   \                     ??AntToBox_9: (+1)
   \   0000018E   0x2004             MOVS     R0,#+4
   \   00000190   0x0004             MOVS     R4,R0
   2983              }
   2984              
   2985              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??AntToBox_10: (+1)
   \   00000192   0xF10D 0x020E      ADD      R2,SP,#+14
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x200A             MOVS     R0,#+10
   \   0000019A   0x.... 0x....      BL       OSTimeDly
   \   0000019E   0xE77E             B.N      ??AntToBox_0
   2986            }
   2987            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \                     ??AntToBox_1: (+1)
   \   000001A0   0x2100             MOVS     R1,#+0
   \   000001A2   0x4640             MOV      R0,R8
   \   000001A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A6   0x.... 0x....      BL       MOTO_STEP_DISABLED
   2988            
   2989            if(CheckBit(ulTmp,ucCardPosCBit) /*|| CheckBit(ulTmp,ucCardPosDBit)*/){								//óD?¨￡?′ò??￡?・μ????ê?
   \   000001AA   0x9802             LDR      R0,[SP, #+8]
   \   000001AC   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000001B0   0x40C8             LSRS     R0,R0,R1
   \   000001B2   0x07C0             LSLS     R0,R0,#+31
   \   000001B4   0xD501             BPL.N    ??AntToBox_11
   2990              return 0;
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0xE0BB             B.N      ??AntToBox_12
   2991            }
   2992                    
   2993            ucDelays=MOTO_INTERFER_TIME_DEFAULT/10;
   \                     ??AntToBox_11: (+1)
   \   000001BA   0x200A             MOVS     R0,#+10
   \   000001BC   0x4683             MOV      R11,R0
   2994            ucTimes=uiDMotoTime;
   \   000001BE   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   000001C2   0x4682             MOV      R10,R0
   2995            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,uiDMotoTime,ucDSelected);
   \   000001C4   0x0038             MOVS     R0,R7
   \   000001C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C8   0x9000             STR      R0,[SP, #+0]
   \   000001CA   0xF8BD 0x3010      LDRH     R3,[SP, #+16]
   \   000001CE   0x2200             MOVS     R2,#+0
   \   000001D0   0xF8BD 0x1012      LDRH     R1,[SP, #+18]
   \   000001D4   0xF44F 0x60FA      MOV      R0,#+2000
   \   000001D8   0x.... 0x....      BL       DMotoStart
   2996            ucRet=0;
   \   000001DC   0x2000             MOVS     R0,#+0
   \   000001DE   0x0004             MOVS     R4,R0
   2997            while(!ucRet){
   \                     ??AntToBox_13: (+1)
   \   000001E0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E2   0x2C00             CMP      R4,#+0
   \   000001E4   0xD136             BNE.N    ??AntToBox_14
   2998              if(ucDelays>0){
   \   000001E6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001EA   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001EE   0xD002             BEQ.N    ??AntToBox_15
   2999                ucDelays--;
   \   000001F0   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   000001F4   0xE027             B.N      ??AntToBox_16
   3000              }else{
   3001                ulTmp=GetKeyOutput();    
   \                     ??AntToBox_15: (+1)
   \   000001F6   0x.... 0x....      BL       GetKeyOutput
   \   000001FA   0x9002             STR      R0,[SP, #+8]
   3002                if(CheckBit(ulTmp,ucDMoto1PosBBit)){
   \   000001FC   0x9802             LDR      R0,[SP, #+8]
   \   000001FE   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000202   0x40C8             LSRS     R0,R0,R1
   \   00000204   0x07C0             LSLS     R0,R0,#+31
   \   00000206   0xD50C             BPL.N    ??AntToBox_17
   3003                  OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000208   0xF10D 0x020E      ADD      R2,SP,#+14
   \   0000020C   0x2100             MOVS     R1,#+0
   \   0000020E   0x2014             MOVS     R0,#+20
   \   00000210   0x.... 0x....      BL       OSTimeDly
   3004                  MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \   00000214   0x2100             MOVS     R1,#+0
   \   00000216   0x0038             MOVS     R0,R7
   \   00000218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021A   0x.... 0x....      BL       MOTO_DC_DISABLED
   3005                  ucRet=1;
   \   0000021E   0x2001             MOVS     R0,#+1
   \   00000220   0x0004             MOVS     R4,R0
   3006                }
   3007          
   3008                if(CheckBit(ulTmp,ucCardBox1PosBit)){
   \                     ??AntToBox_17: (+1)
   \   00000222   0x9802             LDR      R0,[SP, #+8]
   \   00000224   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000228   0x40C8             LSRS     R0,R0,R1
   \   0000022A   0x07C0             LSLS     R0,R0,#+31
   \   0000022C   0xD501             BPL.N    ??AntToBox_18
   3009                  ucCardPos=1;																																		//?¨??μ????a1??′μ???
   \   0000022E   0x2001             MOVS     R0,#+1
   \   00000230   0x0006             MOVS     R6,R0
   3010                }
   3011                
   3012                if(ucTimes>0){
   \                     ??AntToBox_18: (+1)
   \   00000232   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000236   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000023A   0xD002             BEQ.N    ??AntToBox_19
   3013                  ucTimes--;
   \   0000023C   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   00000240   0xE001             B.N      ??AntToBox_16
   3014                }else{
   3015                  ucRet=2;
   \                     ??AntToBox_19: (+1)
   \   00000242   0x2002             MOVS     R0,#+2
   \   00000244   0x0004             MOVS     R4,R0
   3016                }
   3017              }
   3018              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??AntToBox_16: (+1)
   \   00000246   0xF10D 0x020E      ADD      R2,SP,#+14
   \   0000024A   0x2100             MOVS     R1,#+0
   \   0000024C   0x200A             MOVS     R0,#+10
   \   0000024E   0x.... 0x....      BL       OSTimeDly
   \   00000252   0xE7C5             B.N      ??AntToBox_13
   3019            }
   3020            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   \                     ??AntToBox_14: (+1)
   \   00000254   0x2100             MOVS     R1,#+0
   \   00000256   0x0038             MOVS     R0,R7
   \   00000258   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000025A   0x.... 0x....      BL       MOTO_DC_DISABLED
   3021            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000025E   0xF10D 0x020E      ADD      R2,SP,#+14
   \   00000262   0x2100             MOVS     R1,#+0
   \   00000264   0x200A             MOVS     R0,#+10
   \   00000266   0x.... 0x....      BL       OSTimeDly
   3022          
   3023            ucRet=0;
   \   0000026A   0x2000             MOVS     R0,#+0
   \   0000026C   0x0004             MOVS     R4,R0
   3024            ulTmp=GetKey();    	
   \   0000026E   0x.... 0x....      BL       GetKey
   \   00000272   0x9002             STR      R0,[SP, #+8]
   3025            DebugInfoA(0x66,(INT8U *)&ulTmp,4);
   \   00000274   0xA802             ADD      R0,SP,#+8
   3026            if(!(CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosDBit))){//?T?¨
   \   00000276   0x9802             LDR      R0,[SP, #+8]
   \   00000278   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000027C   0x40C8             LSRS     R0,R0,R1
   \   0000027E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000282   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD14E             BNE.N    ??AntToBox_20
   \   00000288   0x9802             LDR      R0,[SP, #+8]
   \   0000028A   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   0000028E   0x40C8             LSRS     R0,R0,R1
   \   00000290   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000294   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000296   0x2800             CMP      R0,#+0
   \   00000298   0xD145             BNE.N    ??AntToBox_20
   3027              DebugInfoA(0x77,(INT8U *)&ulTmp,4);
   \   0000029A   0xA802             ADD      R0,SP,#+8
   3028              ucRet=1;
   \   0000029C   0x2001             MOVS     R0,#+1
   \   0000029E   0x0004             MOVS     R4,R0
   3029                      
   3030              if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited){
   \   000002A0   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000002A4   0x7B80             LDRB     R0,[R0, #+14]
   \   000002A6   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000002AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002AC   0x2800             CMP      R0,#+0
   \   000002AE   0xD13A             BNE.N    ??AntToBox_20
   3031                m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=1;
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000002B4   0x7B80             LDRB     R0,[R0, #+14]
   \   000002B6   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable29
   \   000002BE   0x7388             STRB     R0,[R1, #+14]
   3032                
   3033                //μ??ú???μ
   3034                if(ucCardPos){																																									//???°°ù???¨ê??¨ê±??290??
   \   000002C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002C2   0x2E00             CMP      R6,#+0
   \   000002C4   0xD00F             BEQ.N    ??AntToBox_21
   3035                  if(m_usrBoxInfo[BOX_FIRST].ucCounts<=95){
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000002CA   0x7800             LDRB     R0,[R0, #+0]
   \   000002CC   0x2860             CMP      R0,#+96
   \   000002CE   0xDA05             BGE.N    ??AntToBox_22
   3036                    BoxMotoMoveDown(BOXMOTO_FREQUENCE_PER_CARD*5,BOX_FIRST);																		//×°?¨1y3ì?D,è?1?3???μ????a1?2?μ???,?ò?μ5???¨??
   \   000002D0   0x2100             MOVS     R1,#+0
   \   000002D2   0xF243 0x7046      MOVW     R0,#+14150
   \   000002D6   0x.... 0x....      BL       BoxMotoMoveDown
   \   000002DA   0xE009             B.N      ??AntToBox_23
   3037                  }else{
   3038                    CardBoxBasicInfoSend(0x80,BOX_FIRST);																												//?-à′・?ê?Dèòa315??
   \                     ??AntToBox_22: (+1)
   \   000002DC   0x2100             MOVS     R1,#+0
   \   000002DE   0x2080             MOVS     R0,#+128
   \   000002E0   0x.... 0x....      BL       CardBoxBasicInfoSend
   \   000002E4   0xE004             B.N      ??AntToBox_23
   3039                  }
   3040                }else{
   3041                  BoxMotoMoveDown(BOXMOTO_FREQUENCE_PER_CARD,BOX_FIRST);																			
   \                     ??AntToBox_21: (+1)
   \   000002E6   0x2100             MOVS     R1,#+0
   \   000002E8   0xF640 0x300E      MOVW     R0,#+2830
   \   000002EC   0x.... 0x....      BL       BoxMotoMoveDown
   3042                }
   3043                
   3044                //???ó?¨êy
   3045                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ulMachineId=m_usrBoxInfo[BOX_FIRST].ulMachineId;
   \                     ??AntToBox_23: (+1)
   \   000002F0   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000002F4   0x6840             LDR      R0,[R0, #+4]
   \   000002F6   0x.... 0x....      LDR.W    R1,??DataTable29
   \   000002FA   0x6148             STR      R0,[R1, #+20]
   3046                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucCurrentCount=m_usrBoxInfo[BOX_FIRST].ucCounts;
   \   000002FC   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000300   0x7800             LDRB     R0,[R0, #+0]
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000306   0x7608             STRB     R0,[R1, #+24]
   3047                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucNewCount=m_usrBoxInfo[BOX_FIRST].ucCounts+1;
   \   00000308   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000030C   0x7800             LDRB     R0,[R0, #+0]
   \   0000030E   0x1C40             ADDS     R0,R0,#+1
   \   00000310   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000314   0x7648             STRB     R0,[R1, #+25]
   3048                m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucRetrys=8;
   \   00000316   0x2008             MOVS     R0,#+8
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable29
   \   0000031C   0x7688             STRB     R0,[R1, #+26]
   3049                CardCountUpdateSend(0,BOX_FIRST);
   \   0000031E   0x2100             MOVS     R1,#+0
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x.... 0x....      BL       CardCountUpdateSend
   3050              #if MOTO_INTERFER_TIME_EN==1
   3051                OSTimeDly(BOX_COUNT_WRITE_TIME/10,OS_OPT_TIME_DLY, &os_err) ;         
   3052              #endif
   3053              }
   3054            }
   3055            
   3056            MotoReset(WAIT_MODE,DMOTO_SECOND);
   \                     ??AntToBox_20: (+1)
   \   00000326   0x2101             MOVS     R1,#+1
   \   00000328   0x2001             MOVS     R0,#+1
   \   0000032A   0x.... 0x....      BL       MotoReset
   3057            
   3058            return ucRet; 
   \   0000032E   0x0020             MOVS     R0,R4
   \   00000330   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??AntToBox_12: (+1)
   \   00000332   0xB005             ADD      SP,SP,#+20
   \   00000334   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3059          }
   3060          
   3061          /*******************************************************************************************************
   3062          ** oˉêy??3?: AntToBoxProcess
   3063          ** 1|?ü?èê?: 
   3064          ** ê? ?? è?:
   3065          **
   3066          ** ê???  3?:
   3067          **
   3068          ** è???±?á?:
   3069          ** μ÷ó??￡?é:
   3070          **
   3071          ** ×÷??  ??: John Tonny
   3072          ** è???  ?ú: 2009?ê11??01è?
   3073          **------------------------------------------------------------------------------------------------------
   3074          ** DT ?? è?:
   3075          ** è???  ?ú:
   3076          **------------------------------------------------------------------------------------------------------
   3077          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3078          INT8U AntToBoxProcess(CardMachineRxData *pcommRx1Data)
   3079          {
   \                     AntToBoxProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
   3080            OS_ERR os_err;
   3081            
   3082            INT8U ucRetrys=0;
   \   00000008   0xF05F 0x0B00      MOVS     R11,#+0
   3083            INT8U ucData[8+8];
   3084            INT8U ucMode;
   3085            INT32U ulTmp;
   3086          
   3087            INT8U ucBoxLoad1Bit=m_ucKeyBit[BOXLOAD1_BIT];
   \   0000000C   0x....             LDR.N    R0,??DataTable27
   \   0000000E   0x78C6             LDRB     R6,[R0, #+3]
   3088            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000010   0x....             LDR.N    R0,??DataTable27
   \   00000012   0x7E87             LDRB     R7,[R0, #+26]
   3089            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000014   0x....             LDR.N    R0,??DataTable27
   \   00000016   0xF890 0x801B      LDRB     R8,[R0, #+27]
   3090          
   3091            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_FIRST];
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable34
   \   0000001E   0xF890 0x9000      LDRB     R9,[R0, #+0]
   3092            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   00000026   0xF890 0xA000      LDRB     R10,[R0, #+0]
   3093          
   3094            ucMode=0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0005             MOVS     R5,R0
   3095            if(!pcommRx1Data){
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD101             BNE.N    ??AntToBoxProcess_0
   3096              ucMode=1;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x0005             MOVS     R5,R0
   3097            }
   3098          
   3099            if(!MotoReset(WAIT_MODE,DMOTO_SECOND)){
   \                     ??AntToBoxProcess_0: (+1)
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       MotoReset
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD10F             BNE.N    ??AntToBoxProcess_1
   3100              ucData[0]=SUBTYPE_ERR_HEAD1STATUSERR;
   \   00000042   0x2060             MOVS     R0,#+96
   \   00000044   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3101              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0xAB04             ADD      R3,SP,#+16
   \   00000054   0x78A2             LDRB     R2,[R4, #+2]
   \   00000056   0x7861             LDRB     R1,[R4, #+1]
   \   00000058   0x205E             MOVS     R0,#+94
   \   0000005A   0x.... 0x....      BL       Uart0Pack
   3102              return FALSE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xE105             B.N      ??AntToBoxProcess_2
   3103            }
   3104          
   3105            ulTmp=GetKeyOutput();
   \                     ??AntToBoxProcess_1: (+1)
   \   00000062   0x.... 0x....      BL       GetKeyOutput
   \   00000066   0x9002             STR      R0,[SP, #+8]
   3106            if(!CheckBit(ulTmp,ucBoxLoad1Bit)){
   \   00000068   0x9802             LDR      R0,[SP, #+8]
   \   0000006A   0x40F0             LSRS     R0,R0,R6
   \   0000006C   0x07C0             LSLS     R0,R0,#+31
   \   0000006E   0xD40F             BMI.N    ??AntToBoxProcess_3
   3107              ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   00000070   0x2044             MOVS     R0,#+68
   \   00000072   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3108              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000076   0x0028             MOVS     R0,R5
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0xAB04             ADD      R3,SP,#+16
   \   00000082   0x78A2             LDRB     R2,[R4, #+2]
   \   00000084   0x7861             LDRB     R1,[R4, #+1]
   \   00000086   0x205E             MOVS     R0,#+94
   \   00000088   0x.... 0x....      BL       Uart0Pack
   3109              return FALSE;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xE0EE             B.N      ??AntToBoxProcess_2
   3110            }
   3111          
   3112            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \                     ??AntToBoxProcess_3: (+1)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000094   0x7B80             LDRB     R0,[R0, #+14]
   \   00000096   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD10F             BNE.N    ??AntToBoxProcess_4
   3113              ucData[0]=SUBTYPE_ERR_BOX_NOCONNECT;
   \   000000A0   0x2064             MOVS     R0,#+100
   \   000000A2   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3114              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9000             STR      R0,[SP, #+0]
   \   000000B0   0xAB04             ADD      R3,SP,#+16
   \   000000B2   0x78A2             LDRB     R2,[R4, #+2]
   \   000000B4   0x7861             LDRB     R1,[R4, #+1]
   \   000000B6   0x205E             MOVS     R0,#+94
   \   000000B8   0x.... 0x....      BL       Uart0Pack
   3115              return FALSE;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xE0D6             B.N      ??AntToBoxProcess_2
   3116            }
   3117          
   3118            if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \                     ??AntToBoxProcess_4: (+1)
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000000C4   0x7C00             LDRB     R0,[R0, #+16]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD00F             BEQ.N    ??AntToBoxProcess_5
   3119              ucData[0]=SUBTYPE_ERR_DEVICE_BUSY;
   \   000000CA   0x203B             MOVS     R0,#+59
   \   000000CC   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3120              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000D0   0x0028             MOVS     R0,R5
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0x9001             STR      R0,[SP, #+4]
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x9000             STR      R0,[SP, #+0]
   \   000000DA   0xAB04             ADD      R3,SP,#+16
   \   000000DC   0x78A2             LDRB     R2,[R4, #+2]
   \   000000DE   0x7861             LDRB     R1,[R4, #+1]
   \   000000E0   0x205E             MOVS     R0,#+94
   \   000000E2   0x.... 0x....      BL       Uart0Pack
   3121              return FALSE;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xE0C1             B.N      ??AntToBoxProcess_2
   3122            }
   3123          
   3124            if(m_usrBoxInfo[BOX_FIRST].ucCounts>=m_usrBoxInfo[BOX_FIRST].ucMaxCounts){
   \                     ??AntToBoxProcess_5: (+1)
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable29
   \   000000F4   0x7849             LDRB     R1,[R1, #+1]
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xD30F             BCC.N    ??AntToBoxProcess_6
   3125              ucData[0]=SUBTYPE_ERR_CARDCOUNT_OVER;
   \   000000FA   0x2036             MOVS     R0,#+54
   \   000000FC   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3126              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000100   0x0028             MOVS     R0,R5
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0x9001             STR      R0,[SP, #+4]
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0x9000             STR      R0,[SP, #+0]
   \   0000010A   0xAB04             ADD      R3,SP,#+16
   \   0000010C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000010E   0x7861             LDRB     R1,[R4, #+1]
   \   00000110   0x205E             MOVS     R0,#+94
   \   00000112   0x.... 0x....      BL       Uart0Pack
   3127              return FALSE;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0xE0A9             B.N      ??AntToBoxProcess_2
   3128            }
   3129          
   3130            if(!AntToBoxPreProcess(ulTmp)){
   \                     ??AntToBoxProcess_6: (+1)
   \   0000011A   0x9802             LDR      R0,[SP, #+8]
   \   0000011C   0x.... 0x....      BL       AntToBoxPreProcess
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD10F             BNE.N    ??AntToBoxProcess_7
   3131              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   00000124   0x2042             MOVS     R0,#+66
   \   00000126   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3132              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000012A   0x0028             MOVS     R0,R5
   \   0000012C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012E   0x9001             STR      R0,[SP, #+4]
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0xAB04             ADD      R3,SP,#+16
   \   00000136   0x78A2             LDRB     R2,[R4, #+2]
   \   00000138   0x7861             LDRB     R1,[R4, #+1]
   \   0000013A   0x205E             MOVS     R0,#+94
   \   0000013C   0x.... 0x....      BL       Uart0Pack
   3133              return FALSE;
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0xE094             B.N      ??AntToBoxProcess_2
   3134            }
   3135            
   3136            ucRetrys=0;
   \                     ??AntToBoxProcess_7: (+1)
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x4683             MOV      R11,R0
   3137            m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCountWrited=0;
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000014C   0x7B80             LDRB     R0,[R0, #+14]
   \   0000014E   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000156   0x7388             STRB     R0,[R1, #+14]
   3138            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??AntToBoxProcess_8: (+1)
   \   00000158   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000015C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000160   0xF1BB 0x0F04      CMP      R11,#+4
   \   00000164   0xDA3A             BGE.N    ??AntToBoxProcess_9
   3139              if(AntToBox()){
   \   00000166   0x.... 0x....      BL       AntToBox
   \   0000016A   0x2800             CMP      R0,#+0
   \   0000016C   0xD022             BEQ.N    ??AntToBoxProcess_10
   3140                ulTmp=GetKeyOutput();    
   \   0000016E   0x.... 0x....      BL       GetKeyOutput
   \   00000172   0x9002             STR      R0,[SP, #+8]
   3141                DebugInfoA(0x88,(INT8U *)&ulTmp,4);
   \   00000174   0xA802             ADD      R0,SP,#+8
   3142                if((CheckBit(ulTmp,ucCardPosCBit) || CheckBit(ulTmp,ucCardPosDBit))){
   \   00000176   0x9802             LDR      R0,[SP, #+8]
   \   00000178   0x40F8             LSRS     R0,R0,R7
   \   0000017A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000017E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xD107             BNE.N    ??AntToBoxProcess_11
   \   00000184   0x9802             LDR      R0,[SP, #+8]
   \   00000186   0xFA30 0xF008      LSRS     R0,R0,R8
   \   0000018A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000018E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD00E             BEQ.N    ??AntToBoxProcess_12
   3143                  DebugInfoA(0x99,(INT8U *)&ulTmp,4);
   \                     ??AntToBoxProcess_11: (+1)
   \   00000194   0xA802             ADD      R0,SP,#+8
   3144                  while(1){
   3145                    BSP_LED_Toggle(1);
   \                     ??AntToBoxProcess_13: (+1)
   \   00000196   0x2001             MOVS     R0,#+1
   \   00000198   0x.... 0x....      BL       BSP_LED_Toggle
   3146                    OSTimeDly(1000,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000019C   0xAA03             ADD      R2,SP,#+12
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0xF44F 0x707A      MOV      R0,#+1000
   \   000001A4   0x.... 0x....      BL       OSTimeDly
   3147                    ulTmp=GetKeyOutput();    
   \   000001A8   0x.... 0x....      BL       GetKeyOutput
   \   000001AC   0x9002             STR      R0,[SP, #+8]
   3148                    DebugInfoA(0xAA,(INT8U *)&ulTmp,4);
   \   000001AE   0xA802             ADD      R0,SP,#+8
   \   000001B0   0xE7F1             B.N      ??AntToBoxProcess_13
   3149                  }
   3150                }else{
   3151                  break;
   \                     ??AntToBoxProcess_12: (+1)
   \   000001B2   0xE013             B.N      ??AntToBoxProcess_9
   3152                }
   3153              }
   3154          
   3155              BoxMotoMoveDown(BOXMOTO_FREQUENCE_PER_CARD*5,BOX_FIRST);		
   \                     ??AntToBoxProcess_10: (+1)
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0xF243 0x7046      MOVW     R0,#+14150
   \   000001BA   0x.... 0x....      BL       BoxMotoMoveDown
   3156              SMotoStart(ucSMotoFreq,20,MOTO_BACKWARD_MODE,ucSSelected);
   \   000001BE   0x4653             MOV      R3,R10
   \   000001C0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001C2   0x2201             MOVS     R2,#+1
   \   000001C4   0x2114             MOVS     R1,#+20
   \   000001C6   0x4648             MOV      R0,R9
   \   000001C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CA   0x.... 0x....      BL       SMotoStart
   3157              OSTimeDly(2000,OS_OPT_TIME_DLY, &os_err) ;         
   \   000001CE   0xAA03             ADD      R2,SP,#+12
   \   000001D0   0x2100             MOVS     R1,#+0
   \   000001D2   0xF44F 0x60FA      MOV      R0,#+2000
   \   000001D6   0x.... 0x....      BL       OSTimeDly
   \   000001DA   0xE7BD             B.N      ??AntToBoxProcess_8
   3158            }
   3159          
   3160            if(ucRetrys<=MOTO_RETRYS){
   \                     ??AntToBoxProcess_9: (+1)
   \   000001DC   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001E0   0xF1BB 0x0F04      CMP      R11,#+4
   \   000001E4   0xDA2E             BGE.N    ??AntToBoxProcess_14
   3161              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   000001E6   0x0028             MOVS     R0,R5
   \   000001E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EA   0x9001             STR      R0,[SP, #+4]
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0x9000             STR      R0,[SP, #+0]
   \   000001F0   0x2300             MOVS     R3,#+0
   \   000001F2   0x78A2             LDRB     R2,[R4, #+2]
   \   000001F4   0x7861             LDRB     R1,[R4, #+1]
   \   000001F6   0x205F             MOVS     R0,#+95
   \   000001F8   0x.... 0x....      BL       Uart0Pack
   3162              m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos=0;
   \   000001FC   0x....             LDR.N    R0,??DataTable29
   \   000001FE   0x7B80             LDRB     R0,[R0, #+14]
   \   00000200   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000204   0x....             LDR.N    R1,??DataTable29
   \   00000206   0x7388             STRB     R0,[R1, #+14]
   3163              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bBuzzEn){
   \   00000208   0x....             LDR.N    R0,??DataTable29
   \   0000020A   0x7B80             LDRB     R0,[R0, #+14]
   \   0000020C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020E   0x09C0             LSRS     R0,R0,#+7
   \   00000210   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000212   0x2800             CMP      R0,#+0
   \   00000214   0xD014             BEQ.N    ??AntToBoxProcess_15
   3164                if(m_usrBoxInfo[BOX_FIRST].ucBuzzMode>3){
   \   00000216   0x....             LDR.N    R0,??DataTable29
   \   00000218   0x7AC0             LDRB     R0,[R0, #+11]
   \   0000021A   0x2804             CMP      R0,#+4
   \   0000021C   0xDB02             BLT.N    ??AntToBoxProcess_16
   3165                  m_usrBoxInfo[BOX_FIRST].ucBuzzMode=0;
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0x....             LDR.N    R1,??DataTable29
   \   00000222   0x72C8             STRB     R0,[R1, #+11]
   3166                }
   3167                BuzzSet(2,BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],0);
   \                     ??AntToBoxProcess_16: (+1)
   \   00000224   0x2300             MOVS     R3,#+0
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable35
   \   0000022A   0x....             LDR.N    R1,??DataTable29
   \   0000022C   0x7AC9             LDRB     R1,[R1, #+11]
   \   0000022E   0x5C42             LDRB     R2,[R0, R1]
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable35
   \   00000234   0x....             LDR.N    R1,??DataTable29
   \   00000236   0x7AC9             LDRB     R1,[R1, #+11]
   \   00000238   0x5C41             LDRB     R1,[R0, R1]
   \   0000023A   0x2002             MOVS     R0,#+2
   \   0000023C   0x.... 0x....      BL       BuzzSet
   3168              }
   3169              return TRUE;
   \                     ??AntToBoxProcess_15: (+1)
   \   00000240   0x2001             MOVS     R0,#+1
   \   00000242   0xE014             B.N      ??AntToBoxProcess_2
   3170            }else{
   3171              ucData[0]=SUBTYPE_ERR_ANT2BOX_FAIL;
   \                     ??AntToBoxProcess_14: (+1)
   \   00000244   0x2052             MOVS     R0,#+82
   \   00000246   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3172              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000024A   0x0028             MOVS     R0,R5
   \   0000024C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024E   0x9001             STR      R0,[SP, #+4]
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0x9000             STR      R0,[SP, #+0]
   \   00000254   0xAB04             ADD      R3,SP,#+16
   \   00000256   0x78A2             LDRB     R2,[R4, #+2]
   \   00000258   0x7861             LDRB     R1,[R4, #+1]
   \   0000025A   0x205E             MOVS     R0,#+94
   \   0000025C   0x.... 0x....      BL       Uart0Pack
   3173              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000260   0x2313             MOVS     R3,#+19
   \   00000262   0x2219             MOVS     R2,#+25
   \   00000264   0x2132             MOVS     R1,#+50
   \   00000266   0x2004             MOVS     R0,#+4
   \   00000268   0x.... 0x....      BL       BuzzSet
   3174            }
   3175            return FALSE; 
   \   0000026C   0x2000             MOVS     R0,#+0
   \                     ??AntToBoxProcess_2: (+1)
   \   0000026E   0xB009             ADD      SP,SP,#+36
   \   00000270   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3176          }
   3177          
   3178          /*******************************************************************************************************
   3179          ** oˉêy??3?: ZInToAnt
   3180          ** 1|?ü?èê?: 
   3181          ** ê? ?? è?:
   3182          **
   3183          ** ê???  3?:
   3184          **
   3185          ** è???±?á?:
   3186          ** μ÷ó??￡?é:
   3187          **
   3188          ** ×÷??  ??: John Tonny
   3189          ** è???  ?ú: 2009?ê11??01è?
   3190          **------------------------------------------------------------------------------------------------------
   3191          ** DT ?? è?:
   3192          ** è???  ?ú:
   3193          **------------------------------------------------------------------------------------------------------
   3194          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3195          INT8U ZInToAnt(void)
   3196          {
   \                     ZInToAnt: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   3197            OS_ERR os_err;
   3198            
   3199            INT8U ucRet;
   3200            INT32U ulTmp;
   3201            INT8U ucLeaveC=0;
   \   00000006   0x2600             MOVS     R6,#+0
   3202            INT8U ucEnterC=0;
   \   00000008   0x2700             MOVS     R7,#+0
   3203            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   0000000E   0xF890 0x8000      LDRB     R8,[R0, #+0]
   3204            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable34
   \   00000016   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   3205                    
   3206            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000026   0x7E00             LDRB     R0,[R0, #+24]
   \   00000028   0xF88D 0x0003      STRB     R0,[SP, #+3]
   3207            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000030   0x7E80             LDRB     R0,[R0, #+26]
   \   00000032   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3208            
   3209            INT8U ucFDir=MOTO_FORWARD_MODE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF88D 0x0002      STRB     R0,[SP, #+2]
   3210            INT8U ucBDir=MOTO_BACKWARD_MODE;
   \   0000003C   0xF05F 0x0901      MOVS     R9,#+1
   3211            
   3212            INT8U ucTimes;
   3213            
   3214            CPU_SR_ALLOC();
   \   00000040   0xF05F 0x0B00      MOVS     R11,#+0
   3215            
   3216            ulTmp=GetKeyOutput();    
   \   00000044   0x.... 0x....      BL       GetKeyOutput
   \   00000048   0x0005             MOVS     R5,R0
   3217            if(CheckBit(ulTmp,ucCardPosCBit)){
   \   0000004A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x40C1             LSRS     R1,R1,R0
   \   00000052   0x07C8             LSLS     R0,R1,#+31
   \   00000054   0xD560             BPL.N    ??ZInToAnt_0
   3218              //反转
   3219              ucTimes=(((INT32U)SMOTO_COUNT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0xF44F 0x6196      MOV      R1,#+1200
   \   0000005E   0x4348             MULS     R0,R1,R0
   \   00000060   0xF44F 0x71FA      MOV      R1,#+500
   \   00000064   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000068   0x1C80             ADDS     R0,R0,#+2
   \   0000006A   0x4682             MOV      R10,R0
   3220              SMotoStart(ucSMotoFreq,SMOTO_COUNT_DEFAULT,ucBDir,ucSSelected);
   \   0000006C   0x4643             MOV      R3,R8
   \   0000006E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000070   0x464A             MOV      R2,R9
   \   00000072   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000074   0xF44F 0x6196      MOV      R1,#+1200
   \   00000078   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007C   0x.... 0x....      BL       SMotoStart
   3221              ucRet=0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x0004             MOVS     R4,R0
   3222              while(!ucRet){
   \                     ??ZInToAnt_1: (+1)
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x2C00             CMP      R4,#+0
   \   00000088   0xD141             BNE.N    ??ZInToAnt_2
   3223                ulTmp=GetKeyOutput();    
   \   0000008A   0x.... 0x....      BL       GetKeyOutput
   \   0000008E   0x0005             MOVS     R5,R0
   3224                if(!CheckBit(ulTmp,ucCardPosCBit)){
   \   00000090   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000094   0x0029             MOVS     R1,R5
   \   00000096   0x40C1             LSRS     R1,R1,R0
   \   00000098   0x07C8             LSLS     R0,R1,#+31
   \   0000009A   0xD40B             BMI.N    ??ZInToAnt_3
   3225                  //离开
   3226                  OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000009C   0xAA01             ADD      R2,SP,#+4
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x2014             MOVS     R0,#+20
   \   000000A2   0x.... 0x....      BL       OSTimeDly
   3227                  MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3228                  ucLeaveC=1;
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x0006             MOVS     R6,R0
   3229                }
   3230                
   3231                
   3232                OS_ENTER_CRITICAL();
   \                     ??ZInToAnt_3: (+1)
   \   000000B4   0x.... 0x....      BL       CPU_SR_Save
   \   000000B8   0x4683             MOV      R11,R0
   \   000000BA   0x.... 0x....      BL       CPU_IntDisMeasStart
   3233                if(ucLeaveC){
   \   000000BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C0   0x2E00             CMP      R6,#+0
   \   000000C2   0xD002             BEQ.N    ??ZInToAnt_4
   3234                  ucRet=1;
   \   000000C4   0x2001             MOVS     R0,#+1
   \   000000C6   0x0004             MOVS     R4,R0
   \   000000C8   0xE00C             B.N      ??ZInToAnt_5
   3235                }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??ZInToAnt_4: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable33_3
   \   000000CE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D2   0x210A             MOVS     R1,#+10
   \   000000D4   0xFB01 0xF108      MUL      R1,R1,R8
   \   000000D8   0x4408             ADD      R0,R0,R1
   \   000000DA   0x8840             LDRH     R0,[R0, #+2]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD101             BNE.N    ??ZInToAnt_5
   3236                  ucRet=2;
   \   000000E0   0x2002             MOVS     R0,#+2
   \   000000E2   0x0004             MOVS     R4,R0
   3237                }
   3238                OS_EXIT_CRITICAL();
   \                     ??ZInToAnt_5: (+1)
   \   000000E4   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000E8   0x4658             MOV      R0,R11
   \   000000EA   0x.... 0x....      BL       CPU_SR_Restore
   3239                
   3240                if(ucTimes>0){
   \   000000EE   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000F2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000F6   0xD002             BEQ.N    ??ZInToAnt_6
   3241                  ucTimes--;
   \   000000F8   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000FC   0xE001             B.N      ??ZInToAnt_7
   3242                }else{
   3243                  ucRet=4;
   \                     ??ZInToAnt_6: (+1)
   \   000000FE   0x2004             MOVS     R0,#+4
   \   00000100   0x0004             MOVS     R4,R0
   3244                }
   3245                OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??ZInToAnt_7: (+1)
   \   00000102   0xAA01             ADD      R2,SP,#+4
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0x2005             MOVS     R0,#+5
   \   00000108   0x.... 0x....      BL       OSTimeDly
   \   0000010C   0xE7BA             B.N      ??ZInToAnt_1
   3246              }
   3247              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??ZInToAnt_2: (+1)
   \   0000010E   0x2100             MOVS     R1,#+0
   \   00000110   0x4640             MOV      R0,R8
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3248            }
   3249            
   3250            if(ucRet>=2){
   \                     ??ZInToAnt_0: (+1)
   \   00000118   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011A   0x2C02             CMP      R4,#+2
   \   0000011C   0xDB01             BLT.N    ??ZInToAnt_8
   3251              return FALSE;
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xE061             B.N      ??ZInToAnt_9
   3252            }
   3253            
   3254            ucTimes=(((INT32U)SMOTO_COUNT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \                     ??ZInToAnt_8: (+1)
   \   00000122   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000126   0xF44F 0x6196      MOV      R1,#+1200
   \   0000012A   0x4348             MULS     R0,R1,R0
   \   0000012C   0xF44F 0x71FA      MOV      R1,#+500
   \   00000130   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000134   0x1C80             ADDS     R0,R0,#+2
   \   00000136   0x4682             MOV      R10,R0
   3255            SMotoStart(ucSMotoFreq,SMOTO_COUNT_DEFAULT,ucFDir,ucSSelected);
   \   00000138   0x4643             MOV      R3,R8
   \   0000013A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000013C   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   00000140   0xF44F 0x6196      MOV      R1,#+1200
   \   00000144   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000148   0x.... 0x....      BL       SMotoStart
   3256            ucRet=0;
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x0004             MOVS     R4,R0
   3257            while(!ucRet){
   \                     ??ZInToAnt_10: (+1)
   \   00000150   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000152   0x2C00             CMP      R4,#+0
   \   00000154   0xD13C             BNE.N    ??ZInToAnt_11
   3258              ulTmp=GetKeyOutput();    
   \   00000156   0x.... 0x....      BL       GetKeyOutput
   \   0000015A   0x0005             MOVS     R5,R0
   3259              //if(CheckBit(ulTmp,ucCardPosCBit)){
   3260              if(!CheckBit(ulTmp,ucCardPosABit)){
   \   0000015C   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000160   0x0029             MOVS     R1,R5
   \   00000162   0x40C1             LSRS     R1,R1,R0
   \   00000164   0x07C8             LSLS     R0,R1,#+31
   \   00000166   0xD406             BMI.N    ??ZInToAnt_12
   3261                //
   3262                //OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   3263                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x4640             MOV      R0,R8
   \   0000016C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016E   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3264                ucEnterC=1;
   \   00000172   0x2001             MOVS     R0,#+1
   \   00000174   0x0007             MOVS     R7,R0
   3265              }
   3266              
   3267              OS_ENTER_CRITICAL();
   \                     ??ZInToAnt_12: (+1)
   \   00000176   0x.... 0x....      BL       CPU_SR_Save
   \   0000017A   0x4683             MOV      R11,R0
   \   0000017C   0x.... 0x....      BL       CPU_IntDisMeasStart
   3268              if(ucEnterC){
   \   00000180   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000182   0x2F00             CMP      R7,#+0
   \   00000184   0xD002             BEQ.N    ??ZInToAnt_13
   3269                ucRet=1;
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0x0004             MOVS     R4,R0
   \   0000018A   0xE00C             B.N      ??ZInToAnt_14
   3270              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??ZInToAnt_13: (+1)
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable33_3
   \   00000190   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000194   0x210A             MOVS     R1,#+10
   \   00000196   0xFB01 0xF108      MUL      R1,R1,R8
   \   0000019A   0x4408             ADD      R0,R0,R1
   \   0000019C   0x8840             LDRH     R0,[R0, #+2]
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD101             BNE.N    ??ZInToAnt_14
   3271                ucRet=2;
   \   000001A2   0x2002             MOVS     R0,#+2
   \   000001A4   0x0004             MOVS     R4,R0
   3272              }
   3273              OS_EXIT_CRITICAL();
   \                     ??ZInToAnt_14: (+1)
   \   000001A6   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001AA   0x4658             MOV      R0,R11
   \   000001AC   0x.... 0x....      BL       CPU_SR_Restore
   3274              
   3275              if(ucTimes>0){
   \   000001B0   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001B4   0xF1BA 0x0F00      CMP      R10,#+0
   \   000001B8   0xD002             BEQ.N    ??ZInToAnt_15
   3276                ucTimes--;
   \   000001BA   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000001BE   0xE001             B.N      ??ZInToAnt_16
   3277              }else{
   3278                ucRet=4;
   \                     ??ZInToAnt_15: (+1)
   \   000001C0   0x2004             MOVS     R0,#+4
   \   000001C2   0x0004             MOVS     R4,R0
   3279              }
   3280              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??ZInToAnt_16: (+1)
   \   000001C4   0xAA01             ADD      R2,SP,#+4
   \   000001C6   0x2100             MOVS     R1,#+0
   \   000001C8   0x2005             MOVS     R0,#+5
   \   000001CA   0x.... 0x....      BL       OSTimeDly
   \   000001CE   0xE7BF             B.N      ??ZInToAnt_10
   3281            }
   3282            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??ZInToAnt_11: (+1)
   \   000001D0   0x2100             MOVS     R1,#+0
   \   000001D2   0x4640             MOV      R0,R8
   \   000001D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D6   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3283            	
   3284            if(ucRet>=2){
   \   000001DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001DC   0x2C02             CMP      R4,#+2
   \   000001DE   0xDB01             BLT.N    ??ZInToAnt_17
   3285              return FALSE;
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0xE000             B.N      ??ZInToAnt_9
   3286            }
   3287            return TRUE;
   \                     ??ZInToAnt_17: (+1)
   \   000001E4   0x2001             MOVS     R0,#+1
   \                     ??ZInToAnt_9: (+1)
   \   000001E6   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   3288          }
   3289          
   3290          /*******************************************************************************************************
   3291          ** oˉêy??3?: ZInToAntProcess
   3292          ** 1|?ü?èê?: 
   3293          ** ê? ?? è?:
   3294          **
   3295          ** ê???  3?:
   3296          **
   3297          ** è???±?á?:
   3298          ** μ÷ó??￡?é:
   3299          **
   3300          ** ×÷??  ??: John Tonny
   3301          ** è???  ?ú: 2009?ê11??01è?
   3302          **------------------------------------------------------------------------------------------------------
   3303          ** DT ?? è?:
   3304          ** è???  ?ú:
   3305          **------------------------------------------------------------------------------------------------------
   3306          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3307          INT8U ZInToAntProcess(CardMachineRxData *pcommRx1Data)
   3308          {
   \                     ZInToAntProcess: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   3309            OS_ERR os_err;
   3310            
   3311            INT8U ucRetrys=0;
   \   00000008   0x2500             MOVS     R5,#+0
   3312            INT8U ucData[8+8];
   3313            INT8U ucMode;
   3314            
   3315            INT8U ucType=DEV_TYPE();
   \   0000000A   0x.... 0x....      BL       DEV_TYPE
   \   0000000E   0x0007             MOVS     R7,R0
   3316          
   3317            CPU_SR_ALLOC();
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   3318          
   3319          #if SCAN_EN==1 && SCAN_AUTO_EN==1
   3320            CloseScan();
   3321            
   3322            OS_ENTER_CRITICAL();
   3323            g_usrScan.bEnabled=1;
   3324            g_usrScan.bMode=SCAN_CLOSE_MODE;
   3325            g_usrScan.b14Times=g_ucScanCloseTime;
   3326            OS_EXIT_CRITICAL();
   3327          #endif
   3328            
   3329          #if DOOR_OPEN_EN==1
   3330            //关门
   3331            MotoReset(WAIT_MODE,DMOTO_SECOND);
   3332          #endif
   3333              
   3334            ucMode=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   3335            if(!pcommRx1Data){
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD101             BNE.N    ??ZInToAntProcess_0
   3336              ucMode=1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x0006             MOVS     R6,R0
   3337            }
   3338            
   3339            OS_ENTER_CRITICAL();
   \                     ??ZInToAntProcess_0: (+1)
   \   00000020   0x.... 0x....      BL       CPU_SR_Save
   \   00000024   0x4680             MOV      R8,R0
   \   00000026   0x.... 0x....      BL       CPU_IntDisMeasStart
   3340            g_usrMotoFlags.uiFlag=0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable33
   \   00000030   0x8008             STRH     R0,[R1, #+0]
   3341            OS_EXIT_CRITICAL();
   \   00000032   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       CPU_SR_Restore
   3342            
   3343            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??ZInToAntProcess_1: (+1)
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D04             CMP      R5,#+4
   \   00000042   0xDA03             BGE.N    ??ZInToAntProcess_2
   3344              if(ZInToAnt()){
   \   00000044   0x.... 0x....      BL       ZInToAnt
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD0F7             BEQ.N    ??ZInToAntProcess_1
   3345                break;
   3346              }
   3347            }
   3348            
   3349            KeyChange();
   \                     ??ZInToAntProcess_2: (+1)
   \   0000004C   0x.... 0x....      BL       KeyChange
   3350            if(ucRetrys<=MOTO_RETRYS){
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D04             CMP      R5,#+4
   \   00000054   0xDA10             BGE.N    ??ZInToAntProcess_3
   3351              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   00000056   0x0030             MOVS     R0,R6
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0x78A2             LDRB     R2,[R4, #+2]
   \   00000064   0x7861             LDRB     R1,[R4, #+1]
   \   00000066   0x205F             MOVS     R0,#+95
   \   00000068   0x.... 0x....      BL       Uart0Pack
   3352              g_ucLedMode=LEDOUT_OFF_MODE;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable36
   \   00000072   0x7008             STRB     R0,[R1, #+0]
   3353              return TRUE;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE014             B.N      ??ZInToAntProcess_4
   3354            }else{
   3355              ucData[0]=SUBTYPE_ERR_EXIT2ANT_FAIL;
   \                     ??ZInToAntProcess_3: (+1)
   \   00000078   0x2051             MOVS     R0,#+81
   \   0000007A   0xF88D 0x0008      STRB     R0,[SP, #+8]
   3356              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000007E   0x0030             MOVS     R0,R6
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x9001             STR      R0,[SP, #+4]
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x9000             STR      R0,[SP, #+0]
   \   00000088   0xAB02             ADD      R3,SP,#+8
   \   0000008A   0x78A2             LDRB     R2,[R4, #+2]
   \   0000008C   0x7861             LDRB     R1,[R4, #+1]
   \   0000008E   0x205E             MOVS     R0,#+94
   \   00000090   0x.... 0x....      BL       Uart0Pack
   3357              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000094   0x2313             MOVS     R3,#+19
   \   00000096   0x2219             MOVS     R2,#+25
   \   00000098   0x2132             MOVS     R1,#+50
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x.... 0x....      BL       BuzzSet
   3358              return FALSE;
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??ZInToAntProcess_4: (+1)
   \   000000A2   0xB006             ADD      SP,SP,#+24
   \   000000A4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3359            }
   3360          }
   3361          
   3362          /*******************************************************************************************************
   3363          ** oˉêy??3?: ZAntToBox
   3364          ** 1|?ü?èê?: 
   3365          ** ê? ?? è?:
   3366          **
   3367          ** ê???  3?:
   3368          **
   3369          ** è???±?á?:
   3370          ** μ÷ó??￡?é:
   3371          **
   3372          ** ×÷??  ??: John Tonny
   3373          ** è???  ?ú: 2009?ê11??01è?
   3374          **------------------------------------------------------------------------------------------------------
   3375          ** DT ?? è?:
   3376          ** è???  ?ú:
   3377          **------------------------------------------------------------------------------------------------------
   3378          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3379          INT8U ZAntToBox(void)
   3380          {
   \                     ZAntToBox: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   3381            OS_ERR os_err;
   3382            
   3383            INT8U ucRet;
   3384            INT32U ulTmp;
   3385            INT8U ucEnterD=0;
   \   00000006   0x2500             MOVS     R5,#+0
   3386            INT8U ucLeaveC=0;
   \   00000008   0x2600             MOVS     R6,#+0
   3387            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];  
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   0000000E   0x7807             LDRB     R7,[R0, #+0]
   3388            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable34
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x5DC0             LDRB     R0,[R0, R7]
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3389              
   3390            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000020   0x7E80             LDRB     R0,[R0, #+26]
   \   00000022   0xF88D 0x0000      STRB     R0,[SP, #+0]
   3391            //INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   3392          
   3393            INT8U ucFDir=MOTO_FORWARD_MODE;
   \   00000026   0xF05F 0x0800      MOVS     R8,#+0
   3394            INT8U ucBDir=MOTO_BACKWARD_MODE;
   \   0000002A   0xF05F 0x0901      MOVS     R9,#+1
   3395            
   3396            INT8U ucTimes;
   3397            INT8U ucDelays;
   3398            
   3399            CPU_SR_ALLOC();
   \   0000002E   0xF05F 0x0B00      MOVS     R11,#+0
   3400            
   3401            ucTimes=(((INT32U)SMOTO_COUNT_ANTTOBOX_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \   00000032   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000036   0xF44F 0x71C8      MOV      R1,#+400
   \   0000003A   0x4348             MULS     R0,R1,R0
   \   0000003C   0xF44F 0x71FA      MOV      R1,#+500
   \   00000040   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000044   0x1C80             ADDS     R0,R0,#+2
   \   00000046   0x4682             MOV      R10,R0
   3402            SMotoStart(ucSMotoFreq,SMOTO_COUNT_ANTTOBOX_DEFAULT,ucFDir,ucSSelected);
   \   00000048   0x003B             MOVS     R3,R7
   \   0000004A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000004C   0x4642             MOV      R2,R8
   \   0000004E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000050   0xF44F 0x71C8      MOV      R1,#+400
   \   00000054   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000058   0x.... 0x....      BL       SMotoStart
   3403            ucRet=0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x0004             MOVS     R4,R0
   3404            while(!ucRet){    
   \                     ??ZAntToBox_0: (+1)
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x2C00             CMP      R4,#+0
   \   00000064   0xD137             BNE.N    ??ZAntToBox_1
   3405              ulTmp=GetKeyOutput();    
   \   00000066   0x.... 0x....      BL       GetKeyOutput
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   3406              /*if(CheckBit(ulTmp,ucCardPosDBit)){
   3407                //μ?′??¨?ú?a1?????
   3408                ucEnterD=1;
   3409              }*/
   3410              
   3411              if(!CheckBit(ulTmp,ucCardPosCBit)){
   \   0000006C   0x9801             LDR      R0,[SP, #+4]
   \   0000006E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000072   0x40C8             LSRS     R0,R0,R1
   \   00000074   0x07C0             LSLS     R0,R0,#+31
   \   00000076   0xD401             BMI.N    ??ZAntToBox_2
   3412                //à??a?ú2??a1?????
   3413                ucLeaveC=1;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x0006             MOVS     R6,R0
   3414              }   
   3415              
   3416              /*if(AntToBoxPreProcess(ulTmp)>1){
   3417                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   3418                if(PlugInClear(150)){
   3419                  break;
   3420                }else{
   3421                  SMotoStart(ucSMotoFreq,SMOTO_COUNT_ANTTOBOX_DEFAULT+150,MOTO_FORWARD_MODE,ucSSelected);
   3422                  ucTimes=(((INT32U)SMOTO_COUNT_ANTTOBOX_DEFAULT+150)*ucSMotoFreq)/1000+2;
   3423                }
   3424              }*/
   3425              
   3426              OS_ENTER_CRITICAL();
   \                     ??ZAntToBox_2: (+1)
   \   0000007C   0x.... 0x....      BL       CPU_SR_Save
   \   00000080   0x4683             MOV      R11,R0
   \   00000082   0x.... 0x....      BL       CPU_IntDisMeasStart
   3427              if(!g_usrSMoto[ucSSelected].uiCounts){
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable33_3
   \   0000008A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008C   0x210A             MOVS     R1,#+10
   \   0000008E   0xFB01 0xF107      MUL      R1,R1,R7
   \   00000092   0x4408             ADD      R0,R0,R1
   \   00000094   0x8840             LDRH     R0,[R0, #+2]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD107             BNE.N    ??ZAntToBox_3
   3428                if(ucLeaveC){
   \   0000009A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009C   0x2E00             CMP      R6,#+0
   \   0000009E   0xD002             BEQ.N    ??ZAntToBox_4
   3429                  ucRet=1;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x0004             MOVS     R4,R0
   \   000000A4   0xE001             B.N      ??ZAntToBox_3
   3430                }else{      
   3431                  ucRet=2;
   \                     ??ZAntToBox_4: (+1)
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x0004             MOVS     R4,R0
   3432                }
   3433              }
   3434              OS_EXIT_CRITICAL();
   \                     ??ZAntToBox_3: (+1)
   \   000000AA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000AE   0x4658             MOV      R0,R11
   \   000000B0   0x.... 0x....      BL       CPU_SR_Restore
   3435              if(ucTimes>0){
   \   000000B4   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000B8   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000BC   0xD002             BEQ.N    ??ZAntToBox_5
   3436                ucTimes--;
   \   000000BE   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000C2   0xE001             B.N      ??ZAntToBox_6
   3437              }else{
   3438                ucRet=4;
   \                     ??ZAntToBox_5: (+1)
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0x0004             MOVS     R4,R0
   3439              }
   3440              
   3441              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??ZAntToBox_6: (+1)
   \   000000C8   0xF10D 0x0202      ADD      R2,SP,#+2
   \   000000CC   0x2100             MOVS     R1,#+0
   \   000000CE   0x2005             MOVS     R0,#+5
   \   000000D0   0x.... 0x....      BL       OSTimeDly
   \   000000D4   0xE7C4             B.N      ??ZAntToBox_0
   3442            }
   3443            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \                     ??ZAntToBox_1: (+1)
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x0038             MOVS     R0,R7
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3444            
   3445            if(CheckBit(ulTmp,ucCardPosCBit) /*|| CheckBit(ulTmp,ucCardPosDBit)*/){								//óD?¨￡?′ò??￡?・μ????ê?
   \   000000E0   0x9801             LDR      R0,[SP, #+4]
   \   000000E2   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000E6   0x40C8             LSRS     R0,R0,R1
   \   000000E8   0x07C0             LSLS     R0,R0,#+31
   \   000000EA   0xD501             BPL.N    ??ZAntToBox_7
   3446              return 0;
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0xE001             B.N      ??ZAntToBox_8
   3447            }
   3448                    
   3449            return ucRet; 
   \                     ??ZAntToBox_7: (+1)
   \   000000F0   0x0020             MOVS     R0,R4
   \   000000F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??ZAntToBox_8: (+1)
   \   000000F4   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   3450          }
   3451          
   3452          /*******************************************************************************************************
   3453          ** oˉêy??3?: ZAntToBoxProcess
   3454          ** 1|?ü?èê?: 
   3455          ** ê? ?? è?:
   3456          **
   3457          ** ê???  3?:
   3458          **
   3459          ** è???±?á?:
   3460          ** μ÷ó??￡?é:
   3461          **
   3462          ** ×÷??  ??: John Tonny
   3463          ** è???  ?ú: 2009?ê11??01è?
   3464          **------------------------------------------------------------------------------------------------------
   3465          ** DT ?? è?:
   3466          ** è???  ?ú:
   3467          **------------------------------------------------------------------------------------------------------
   3468          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3469          INT8U ZAntToBoxProcess(CardMachineRxData *pcommRx1Data)
   3470          {
   \                     ZAntToBoxProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
   3471            OS_ERR os_err;
   3472            
   3473            INT8U ucRetrys=0;
   \   00000008   0xF05F 0x0B00      MOVS     R11,#+0
   3474            INT8U ucData[8+8];
   3475            INT8U ucMode;
   3476            INT32U ulTmp;
   3477          
   3478            INT8U ucBoxLoad1Bit=m_ucKeyBit[BOXLOAD1_BIT];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000010   0x78C7             LDRB     R7,[R0, #+3]
   3479            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000016   0x7E80             LDRB     R0,[R0, #+26]
   \   00000018   0xF88D 0x0009      STRB     R0,[SP, #+9]
   3480            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000020   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000022   0xF88D 0x0008      STRB     R0,[SP, #+8]
   3481          
   3482            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_FIRST];
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable34
   \   0000002A   0xF890 0x8000      LDRB     R8,[R0, #+0]
   3483            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   00000032   0xF890 0x9000      LDRB     R9,[R0, #+0]
   3484          
   3485            static INT8U ucTest=0;
   3486            
   3487            CPU_SR_ALLOC();
   \   00000036   0xF05F 0x0A00      MOVS     R10,#+0
   3488            
   3489          #if SCAN_EN==1  
   3490            CloseScan();
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       CSP_GPIO_BitSet
   3491            
   3492            OS_ENTER_CRITICAL();
   \   00000042   0x.... 0x....      BL       CPU_SR_Save
   \   00000046   0x4682             MOV      R10,R0
   \   00000048   0x.... 0x....      BL       CPU_IntDisMeasStart
   3493            g_usrScan.bEnabled=0;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable37
   \   00000050   0x8800             LDRH     R0,[R0, #+0]
   \   00000052   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000054   0x0C40             LSRS     R0,R0,#+17
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable37
   \   0000005A   0x8008             STRH     R0,[R1, #+0]
   3494            OS_EXIT_CRITICAL();
   \   0000005C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000060   0x4650             MOV      R0,R10
   \   00000062   0x.... 0x....      BL       CPU_SR_Restore
   3495          #endif
   3496          
   3497            ucMode=0;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x0005             MOVS     R5,R0
   3498            if(!pcommRx1Data){
   \   0000006A   0x2C00             CMP      R4,#+0
   \   0000006C   0xD101             BNE.N    ??ZAntToBoxProcess_0
   3499              ucMode=1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x0005             MOVS     R5,R0
   3500            }
   3501          
   3502            ulTmp=GetKeyOutput();
   \                     ??ZAntToBoxProcess_0: (+1)
   \   00000072   0x.... 0x....      BL       GetKeyOutput
   \   00000076   0x0006             MOVS     R6,R0
   3503            if(!CheckBit(ulTmp,ucBoxLoad1Bit)){
   \   00000078   0x0030             MOVS     R0,R6
   \   0000007A   0x40F8             LSRS     R0,R0,R7
   \   0000007C   0x07C0             LSLS     R0,R0,#+31
   \   0000007E   0xD40F             BMI.N    ??ZAntToBoxProcess_1
   3504              ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   00000080   0x2044             MOVS     R0,#+68
   \   00000082   0xF88D 0x000C      STRB     R0,[SP, #+12]
   3505              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0xAB03             ADD      R3,SP,#+12
   \   00000092   0x78A2             LDRB     R2,[R4, #+2]
   \   00000094   0x7861             LDRB     R1,[R4, #+1]
   \   00000096   0x205E             MOVS     R0,#+94
   \   00000098   0x.... 0x....      BL       Uart0Pack
   3506              return FALSE;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0xE072             B.N      ??ZAntToBoxProcess_2
   3507            }
   3508          
   3509            if(!AntToBoxPreProcess(ulTmp)){
   \                     ??ZAntToBoxProcess_1: (+1)
   \   000000A0   0x0030             MOVS     R0,R6
   \   000000A2   0x.... 0x....      BL       AntToBoxPreProcess
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD10F             BNE.N    ??ZAntToBoxProcess_3
   3510              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   000000AA   0x2042             MOVS     R0,#+66
   \   000000AC   0xF88D 0x000C      STRB     R0,[SP, #+12]
   3511              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000B0   0x0028             MOVS     R0,R5
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x9001             STR      R0,[SP, #+4]
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0xAB03             ADD      R3,SP,#+12
   \   000000BC   0x78A2             LDRB     R2,[R4, #+2]
   \   000000BE   0x7861             LDRB     R1,[R4, #+1]
   \   000000C0   0x205E             MOVS     R0,#+94
   \   000000C2   0x.... 0x....      BL       Uart0Pack
   3512              return FALSE;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0xE05D             B.N      ??ZAntToBoxProcess_2
   3513            }
   3514            
   3515            ucRetrys=0;
   \                     ??ZAntToBoxProcess_3: (+1)
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x4683             MOV      R11,R0
   3516            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??ZAntToBoxProcess_4: (+1)
   \   000000CE   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000D2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000D6   0xF1BB 0x0F04      CMP      R11,#+4
   \   000000DA   0xDA08             BGE.N    ??ZAntToBoxProcess_5
   3517              if(ZAntToBox()==1){
   \   000000DC   0x.... 0x....      BL       ZAntToBox
   \   000000E0   0x2801             CMP      R0,#+1
   \   000000E2   0xD004             BEQ.N    ??ZAntToBoxProcess_5
   3518                break;
   3519              }else{
   3520                ucTest=1;
   \                     ??ZAntToBoxProcess_6: (+1)
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable37_1
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
   \   000000EC   0xE7EF             B.N      ??ZAntToBoxProcess_4
   3521              }
   3522            }
   3523          
   3524            if(ucRetrys<=MOTO_RETRYS){
   \                     ??ZAntToBoxProcess_5: (+1)
   \   000000EE   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000F2   0xF1BB 0x0F04      CMP      R11,#+4
   \   000000F6   0xDA31             BGE.N    ??ZAntToBoxProcess_7
   3525              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   000000F8   0x0028             MOVS     R0,R5
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x9001             STR      R0,[SP, #+4]
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x9000             STR      R0,[SP, #+0]
   \   00000102   0x2300             MOVS     R3,#+0
   \   00000104   0x78A2             LDRB     R2,[R4, #+2]
   \   00000106   0x7861             LDRB     R1,[R4, #+1]
   \   00000108   0x205F             MOVS     R0,#+95
   \   0000010A   0x.... 0x....      BL       Uart0Pack
   3526              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bBuzzEn){
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   00000112   0x7B80             LDRB     R0,[R0, #+14]
   \   00000114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000116   0x09C0             LSRS     R0,R0,#+7
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD018             BEQ.N    ??ZAntToBoxProcess_8
   3527                if(m_usrBoxInfo[BOX_FIRST].ucBuzzMode>3){
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   00000122   0x7AC0             LDRB     R0,[R0, #+11]
   \   00000124   0x2804             CMP      R0,#+4
   \   00000126   0xDB03             BLT.N    ??ZAntToBoxProcess_9
   3528                  m_usrBoxInfo[BOX_FIRST].ucBuzzMode=0;
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   0000012E   0x72C8             STRB     R0,[R1, #+11]
   3529                }
   3530                BuzzSet(2,BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],BUZZ_SK_MODE[m_usrBoxInfo[BOX_FIRST].ucBuzzMode],0);
   \                     ??ZAntToBoxProcess_9: (+1)
   \   00000130   0x2300             MOVS     R3,#+0
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable35
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   0000013A   0x7AC9             LDRB     R1,[R1, #+11]
   \   0000013C   0x5C42             LDRB     R2,[R0, R1]
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable35
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   00000146   0x7AC9             LDRB     R1,[R1, #+11]
   \   00000148   0x5C41             LDRB     R1,[R0, R1]
   \   0000014A   0x2002             MOVS     R0,#+2
   \   0000014C   0x.... 0x....      BL       BuzzSet
   3531              }
   3532              g_ucLedMode=LEDOUT_ON_MODE;
   \                     ??ZAntToBoxProcess_8: (+1)
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable36
   \   00000156   0x7008             STRB     R0,[R1, #+0]
   3533              return TRUE;
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0xE014             B.N      ??ZAntToBoxProcess_2
   3534            }else{
   3535              ucData[0]=SUBTYPE_ERR_ANT2BOX_FAIL;
   \                     ??ZAntToBoxProcess_7: (+1)
   \   0000015C   0x2052             MOVS     R0,#+82
   \   0000015E   0xF88D 0x000C      STRB     R0,[SP, #+12]
   3536              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000162   0x0028             MOVS     R0,R5
   \   00000164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000166   0x9001             STR      R0,[SP, #+4]
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x9000             STR      R0,[SP, #+0]
   \   0000016C   0xAB03             ADD      R3,SP,#+12
   \   0000016E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000170   0x7861             LDRB     R1,[R4, #+1]
   \   00000172   0x205E             MOVS     R0,#+94
   \   00000174   0x.... 0x....      BL       Uart0Pack
   3537              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000178   0x2313             MOVS     R3,#+19
   \   0000017A   0x2219             MOVS     R2,#+25
   \   0000017C   0x2132             MOVS     R1,#+50
   \   0000017E   0x2004             MOVS     R0,#+4
   \   00000180   0x.... 0x....      BL       BuzzSet
   3538            }
   3539            return FALSE; 
   \   00000184   0x2000             MOVS     R0,#+0
   \                     ??ZAntToBoxProcess_2: (+1)
   \   00000186   0xB007             ADD      SP,SP,#+28
   \   00000188   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3540          }

   \                                 In section .bss, align 1
   \                     `ZAntToBoxProcess::ucTest`:
   \   00000000                      DS8 1
   3541          
   3542          
   3543          /*******************************************************************************************************
   3544          ** oˉêy??3?: ZAntToOut
   3545          ** 1|?ü?èê?: 
   3546          ** ê? ?? è?:
   3547          **
   3548          ** ê???  3?:
   3549          **
   3550          ** è???±?á?:
   3551          ** μ÷ó??￡?é:
   3552          **
   3553          ** ×÷??  ??: John Tonny
   3554          ** è???  ?ú: 2009?ê11??01è?
   3555          **------------------------------------------------------------------------------------------------------
   3556          ** DT ?? è?:
   3557          ** è???  ?ú:
   3558          **------------------------------------------------------------------------------------------------------
   3559          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3560          INT8U ZAntToOut(void)
   3561          {
   \                     ZAntToOut: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   3562            OS_ERR os_err;
   3563            
   3564            INT8U ucRet;
   3565            INT32U ulTmp;
   3566            INT8U ucTmp;
   3567            INT8U ucLeaveB=0;	
   \   00000004   0x2500             MOVS     R5,#+0
   3568            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   0000000A   0x7806             LDRB     R6,[R0, #+0]
   3569            
   3570            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000010   0x7E00             LDRB     R0,[R0, #+24]
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
   3571            INT8U ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   0000001A   0x7E40             LDRB     R0,[R0, #+25]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   3572            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000024   0x7E80             LDRB     R0,[R0, #+26]
   \   00000026   0xF88D 0x0002      STRB     R0,[SP, #+2]
   3573            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   0000002E   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000030   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3574            
   3575            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable34
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0x5D87             LDRB     R7,[R0, R6]
   3576            INT8U ucTimes;
   3577            
   3578            INT8U ucFDir=MOTO_FORWARD_MODE;
   \   0000003C   0xF05F 0x0900      MOVS     R9,#+0
   3579            INT8U ucBDir=MOTO_BACKWARD_MODE;
   \   00000040   0xF05F 0x0A01      MOVS     R10,#+1
   3580            
   3581            CPU_SR_ALLOC();
   \   00000044   0xF05F 0x0B00      MOVS     R11,#+0
   3582            
   3583            ucTimes=(((INT32U)SMOTO_COUNT_ZIN_ANTTOOUT_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0xF44F 0x7048      MOV      R0,#+800
   \   0000004E   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000052   0xF44F 0x71FA      MOV      R1,#+500
   \   00000056   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000005A   0x1C80             ADDS     R0,R0,#+2
   \   0000005C   0x4680             MOV      R8,R0
   3584            SMotoStart(ucSMotoFreq,SMOTO_COUNT_ZIN_ANTTOOUT_DEFAULT,ucBDir,ucSSelected);
   \   0000005E   0x0033             MOVS     R3,R6
   \   00000060   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000062   0x4652             MOV      R2,R10
   \   00000064   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000066   0xF44F 0x7148      MOV      R1,#+800
   \   0000006A   0x0038             MOVS     R0,R7
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x.... 0x....      BL       SMotoStart
   3585            ucRet=0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x0004             MOVS     R4,R0
   3586            while(!ucRet){
   \                     ??ZAntToOut_0: (+1)
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD13A             BNE.N    ??ZAntToOut_1
   3587              ulTmp=GetKeyOutput();    
   \   0000007C   0x.... 0x....      BL       GetKeyOutput
   \   00000080   0x9001             STR      R0,[SP, #+4]
   3588              if(!CheckBit(ulTmp,ucCardPosBBit)){
   \   00000082   0x9801             LDR      R0,[SP, #+4]
   \   00000084   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000088   0x40C8             LSRS     R0,R0,R1
   \   0000008A   0x07C0             LSLS     R0,R0,#+31
   \   0000008C   0xD406             BMI.N    ??ZAntToOut_2
   3589                //à??a?ú2??a1?????
   3590                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x0030             MOVS     R0,R6
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3591                ucLeaveB=1;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x0005             MOVS     R5,R0
   3592              }    
   3593              OS_ENTER_CRITICAL();
   \                     ??ZAntToOut_2: (+1)
   \   0000009C   0x.... 0x....      BL       CPU_SR_Save
   \   000000A0   0x4683             MOV      R11,R0
   \   000000A2   0x.... 0x....      BL       CPU_IntDisMeasStart
   3594              if(ucLeaveB){
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD002             BEQ.N    ??ZAntToOut_3
   3595                ucRet=1;
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x0004             MOVS     R4,R0
   \   000000B0   0xE00A             B.N      ??ZAntToOut_4
   3596              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??ZAntToOut_3: (+1)
   \   000000B2   0x....             LDR.N    R0,??DataTable33_3
   \   000000B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B6   0x210A             MOVS     R1,#+10
   \   000000B8   0xFB01 0xF106      MUL      R1,R1,R6
   \   000000BC   0x4408             ADD      R0,R0,R1
   \   000000BE   0x8840             LDRH     R0,[R0, #+2]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD101             BNE.N    ??ZAntToOut_4
   3597                ucRet=2;
   \   000000C4   0x2002             MOVS     R0,#+2
   \   000000C6   0x0004             MOVS     R4,R0
   3598              }
   3599              OS_EXIT_CRITICAL();
   \                     ??ZAntToOut_4: (+1)
   \   000000C8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000CC   0x4658             MOV      R0,R11
   \   000000CE   0x.... 0x....      BL       CPU_SR_Restore
   3600              if(ucTimes>0){
   \   000000D2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D6   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000DA   0xD002             BEQ.N    ??ZAntToOut_5
   3601                ucTimes--;
   \   000000DC   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   000000E0   0xE001             B.N      ??ZAntToOut_6
   3602              }else{
   3603                ucRet=4;
   \                     ??ZAntToOut_5: (+1)
   \   000000E2   0x2004             MOVS     R0,#+4
   \   000000E4   0x0004             MOVS     R4,R0
   3604              }
   3605              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??ZAntToOut_6: (+1)
   \   000000E6   0xAA02             ADD      R2,SP,#+8
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x2005             MOVS     R0,#+5
   \   000000EC   0x.... 0x....      BL       OSTimeDly
   \   000000F0   0xE7C1             B.N      ??ZAntToOut_0
   3606            }
   3607            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??ZAntToOut_1: (+1)
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x0030             MOVS     R0,R6
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F8   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3608          	
   3609            if(ucRet>=2){
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x2C02             CMP      R4,#+2
   \   00000100   0xDB01             BLT.N    ??ZAntToOut_7
   3610              return FALSE;
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0xE000             B.N      ??ZAntToOut_8
   3611            }
   3612            return TRUE;
   \                     ??ZAntToOut_7: (+1)
   \   00000106   0x2001             MOVS     R0,#+1
   \                     ??ZAntToOut_8: (+1)
   \   00000108   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   3613          }
   3614          
   3615          /*******************************************************************************************************
   3616          ** oˉêy??3?: ZAntToOutProcess
   3617          ** 1|?ü?èê?: 
   3618          ** ê? ?? è?:
   3619          **
   3620          ** ê???  3?:
   3621          **
   3622          ** è???±?á?:
   3623          ** μ÷ó??￡?é:
   3624          **
   3625          ** ×÷??  ??: John Tonny
   3626          ** è???  ?ú: 2009?ê11??01è?
   3627          **------------------------------------------------------------------------------------------------------
   3628          ** DT ?? è?:
   3629          ** è???  ?ú:
   3630          **------------------------------------------------------------------------------------------------------
   3631          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3632          INT8U ZAntToOutProcess(CardMachineRxData *pcommRx1Data)
   3633          {
   \                     ZAntToOutProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
   3634            INT8U ucRetrys=0;
   \   00000008   0xF05F 0x0B00      MOVS     R11,#+0
   3635            INT8U ucData[16];
   3636            INT8U ucMode;
   3637            INT32U ulTmp;
   3638            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000010   0x7E00             LDRB     R0,[R0, #+24]
   \   00000012   0xF88D 0x0008      STRB     R0,[SP, #+8]
   3639            INT8U ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   0000001A   0x7E47             LDRB     R7,[R0, #+25]
   3640            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000020   0xF890 0x801A      LDRB     R8,[R0, #+26]
   3641            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \   00000028   0xF890 0x901B      LDRB     R9,[R0, #+27]
   3642            
   3643            CPU_SR_ALLOC();
   \   0000002C   0xF05F 0x0A00      MOVS     R10,#+0
   3644            
   3645          #if SCAN_EN==1 
   3646            CloseScan();
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x.... 0x....      BL       CSP_GPIO_BitSet
   3647          
   3648            OS_ENTER_CRITICAL();
   \   00000038   0x.... 0x....      BL       CPU_SR_Save
   \   0000003C   0x4682             MOV      R10,R0
   \   0000003E   0x.... 0x....      BL       CPU_IntDisMeasStart
   3649            g_usrScan.bEnabled=0;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable37
   \   00000046   0x8800             LDRH     R0,[R0, #+0]
   \   00000048   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   0000004A   0x0C40             LSRS     R0,R0,#+17
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable37
   \   00000050   0x8008             STRH     R0,[R1, #+0]
   3650            OS_EXIT_CRITICAL();
   \   00000052   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000056   0x4650             MOV      R0,R10
   \   00000058   0x.... 0x....      BL       CPU_SR_Restore
   3651          #endif
   3652          
   3653            ucMode=0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x0005             MOVS     R5,R0
   3654            if(!pcommRx1Data){
   \   00000060   0x2C00             CMP      R4,#+0
   \   00000062   0xD101             BNE.N    ??ZAntToOutProcess_0
   3655              ucMode=1;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x0005             MOVS     R5,R0
   3656            }
   3657            
   3658            ulTmp=GetKeyOutput();
   \                     ??ZAntToOutProcess_0: (+1)
   \   00000068   0x.... 0x....      BL       GetKeyOutput
   \   0000006C   0x0006             MOVS     R6,R0
   3659            if(!(CheckBit(ulTmp,ucCardPosCBit) ||  CheckBit(ulTmp,ucCardPosBBit))){
   \   0000006E   0x0030             MOVS     R0,R6
   \   00000070   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000074   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD116             BNE.N    ??ZAntToOutProcess_1
   \   0000007E   0x0030             MOVS     R0,R6
   \   00000080   0x40F8             LSRS     R0,R0,R7
   \   00000082   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD10F             BNE.N    ??ZAntToOutProcess_1
   3660              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   0000008C   0x2042             MOVS     R0,#+66
   \   0000008E   0xF88D 0x000C      STRB     R0,[SP, #+12]
   3661              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0xAB03             ADD      R3,SP,#+12
   \   0000009E   0x78A2             LDRB     R2,[R4, #+2]
   \   000000A0   0x7861             LDRB     R1,[R4, #+1]
   \   000000A2   0x205E             MOVS     R0,#+94
   \   000000A4   0x.... 0x....      BL       Uart0Pack
   3662              return FALSE;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xE03D             B.N      ??ZAntToOutProcess_2
   3663            }
   3664            
   3665            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??ZAntToOutProcess_1: (+1)
   \   000000AC   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000B0   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000B4   0xF1BB 0x0F04      CMP      R11,#+4
   \   000000B8   0xDA03             BGE.N    ??ZAntToOutProcess_3
   3666              if(ZAntToOut()){
   \   000000BA   0x.... 0x....      BL       ZAntToOut
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD0F4             BEQ.N    ??ZAntToOutProcess_1
   3667                break;
   3668              }
   3669            }
   3670            
   3671            if(ucRetrys<=MOTO_RETRYS){
   \                     ??ZAntToOutProcess_3: (+1)
   \   000000C2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000C6   0xF1BB 0x0F04      CMP      R11,#+4
   \   000000CA   0xDA18             BGE.N    ??ZAntToOutProcess_4
   3672              //???ˉ?¨ê±?′°?3?±¨?ˉ  
   3673              //TakeoutOvertimeRead();    
   3674              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   000000CC   0x0028             MOVS     R0,R5
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x9001             STR      R0,[SP, #+4]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x2300             MOVS     R3,#+0
   \   000000D8   0x78A2             LDRB     R2,[R4, #+2]
   \   000000DA   0x7861             LDRB     R1,[R4, #+1]
   \   000000DC   0x205F             MOVS     R0,#+95
   \   000000DE   0x.... 0x....      BL       Uart0Pack
   3675              g_ucLedMode=LEDOUT_TOGGLE_MODE;
   \   000000E2   0x2002             MOVS     R0,#+2
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable36
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
   3676              m_usrGlobalFlag.usrBit.bWaitTakeOut=1;
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable40
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable40
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
   3677              return TRUE;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0xE014             B.N      ??ZAntToOutProcess_2
   3678            }else{
   3679              ucData[0]=SUBTYPE_ERR_ANT2EXIT_FAIL;
   \                     ??ZAntToOutProcess_4: (+1)
   \   000000FE   0x2054             MOVS     R0,#+84
   \   00000100   0xF88D 0x000C      STRB     R0,[SP, #+12]
   3680              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000104   0x0028             MOVS     R0,R5
   \   00000106   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000108   0x9001             STR      R0,[SP, #+4]
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x9000             STR      R0,[SP, #+0]
   \   0000010E   0xAB03             ADD      R3,SP,#+12
   \   00000110   0x78A2             LDRB     R2,[R4, #+2]
   \   00000112   0x7861             LDRB     R1,[R4, #+1]
   \   00000114   0x205E             MOVS     R0,#+94
   \   00000116   0x.... 0x....      BL       Uart0Pack
   3681              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   0000011A   0x2313             MOVS     R3,#+19
   \   0000011C   0x2219             MOVS     R2,#+25
   \   0000011E   0x2132             MOVS     R1,#+50
   \   00000120   0x2004             MOVS     R0,#+4
   \   00000122   0x.... 0x....      BL       BuzzSet
   3682              return FALSE;
   \   00000126   0x2000             MOVS     R0,#+0
   \                     ??ZAntToOutProcess_2: (+1)
   \   00000128   0xB007             ADD      SP,SP,#+28
   \   0000012A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3683            }  
   3684          }
   3685          
   3686          /*******************************************************************************************************
   3687          ** oˉêy??3?: ZDoorOpen
   3688          ** 1|?ü?èê?: 
   3689          ** ê? ?? è?:
   3690          **
   3691          ** ê???  3?:
   3692          **
   3693          ** è???±?á?:
   3694          ** μ÷ó??￡?é:
   3695          **
   3696          ** ×÷??  ??: John Tonny
   3697          ** è???  ?ú: 2009?ê11??01è?
   3698          **------------------------------------------------------------------------------------------------------
   3699          ** DT ?? è?:
   3700          ** è???  ?ú:
   3701          **------------------------------------------------------------------------------------------------------
   3702          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3703          INT8U ZDoorOpen(INT8U ucState)
   3704          {
   \                     ZDoorOpen: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   3705          #if DOOR_OPEN_EN==1  
   3706            OS_ERR os_err;
   3707            
   3708            INT8U ucRet;
   3709            INT32U ulTmp;
   3710            INT8U ucTmp;
   3711            INT8U ucDSelected=m_ucDMotoBit[DMOTO_SECOND];
   3712            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];	                                                        
   3713            INT16U uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   3714                
   3715            INT8U ucDMoto1PosABit=m_ucKeyBit[DMOTO1_POSA_BIT];
   3716            INT8U ucDMoto1PosBBit=m_ucKeyBit[DMOTO1_POSB_BIT];
   3717            
   3718            
   3719            INT8U ucDelays;
   3720            INT8U ucTimes;
   3721            
   3722            INT8U ucFDir=MOTO_FORWARD_MODE;
   3723            INT8U ucBDir=MOTO_BACKWARD_MODE;
   3724            
   3725            CPU_SR_ALLOC();
   3726            
   3727            
   3728            ulTmp=GetKeyOutput();    
   3729            if(CheckBit(ulTmp,ucDMoto1PosBBit) && !CheckBit(ulTmp,ucDMoto1PosABit)){
   3730              //开门
   3731              OSTimeDly(1000,OS_OPT_TIME_DLY, &os_err) ;  
   3732              
   3733              //关门
   3734              if(MotoReset(WAIT_MODE,DMOTO_SECOND)){
   3735                return TRUE;
   3736              }else{
   3737                return FALSE;
   3738              }
   3739            }
   3740                 
   3741            ucDelays=MOTO_INTERFER_TIME_DEFAULT/10;
   3742            ucTimes=uiDMotoTime;
   3743            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,ucFDir,uiDMotoTime,ucDSelected);
   3744            ucRet=0;
   3745            while(!ucRet){
   3746              if(ucDelays>0){
   3747                ucDelays--;
   3748              }else{
   3749                ulTmp=GetKeyOutput();    
   3750                if(CheckBit(ulTmp,ucDMoto1PosBBit)){
   3751                  OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   3752                  MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   3753                  ucRet=1;
   3754                }
   3755          
   3756                if(ucTimes>0){
   3757                  ucTimes--;
   3758                }else{
   3759                  ucRet=2;
   3760                }
   3761              }
   3762              OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   3763            }
   3764            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   3765            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   3766          	    
   3767            if(ucRet>=2){
   3768              return FALSE;
   3769            }
   3770            
   3771            if(ucState==DOOR_CLOSE_MODE){
   3772              OSTimeDly(300,OS_OPT_TIME_DLY, &os_err) ;         
   3773              if(MotoReset(WAIT_MODE,DMOTO_SECOND)){
   3774                return TRUE;
   3775              }else{
   3776                return FALSE;
   3777              }
   3778            }
   3779          #endif
   3780            return TRUE;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
   3781          }
   3782          
   3783          /*******************************************************************************************************
   3784          ** oˉêy??3?: ZDoorOpenProcess
   3785          ** 1|?ü?èê?: 
   3786          ** ê? ?? è?:
   3787          **
   3788          ** ê???  3?:
   3789          **
   3790          ** è???±?á?:
   3791          ** μ÷ó??￡?é:
   3792          **
   3793          ** ×÷??  ??: John Tonny
   3794          ** è???  ?ú: 2009?ê11??01è?
   3795          **------------------------------------------------------------------------------------------------------
   3796          ** DT ?? è?:
   3797          ** è???  ?ú:
   3798          **------------------------------------------------------------------------------------------------------
   3799          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3800          INT8U ZDoorOpenProcess(CardMachineRxData *pcommRx1Data,INT8U ucState)
   3801          {
   \                     ZDoorOpenProcess: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   3802            INT8U ucRetrys=0;
   \   00000008   0x2700             MOVS     R7,#+0
   3803            INT8U ucData[16];
   3804            INT8U ucMode;
   3805              
   3806            ucMode=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0006             MOVS     R6,R0
   3807            if(!pcommRx1Data){
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD101             BNE.N    ??ZDoorOpenProcess_0
   3808              ucMode=1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0006             MOVS     R6,R0
   3809            }
   3810            
   3811            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??ZDoorOpenProcess_0: (+1)
   \   00000016   0x1C7F             ADDS     R7,R7,#+1
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x2F04             CMP      R7,#+4
   \   0000001C   0xDA05             BGE.N    ??ZDoorOpenProcess_1
   3812              if(ZDoorOpen(ucState)){
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       ZDoorOpen
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD0F5             BEQ.N    ??ZDoorOpenProcess_0
   3813                break;
   3814              }
   3815            }
   3816            
   3817            if(ucRetrys<=MOTO_RETRYS){
   \                     ??ZDoorOpenProcess_1: (+1)
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0x2F04             CMP      R7,#+4
   \   0000002E   0xDA0C             BGE.N    ??ZDoorOpenProcess_2
   3818              //???ˉ?¨ê±?′°?3?±¨?ˉ  
   3819              //TakeoutOvertimeRead();    
   3820              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000003E   0x7861             LDRB     R1,[R4, #+1]
   \   00000040   0x205F             MOVS     R0,#+95
   \   00000042   0x.... 0x....      BL       Uart0Pack
   3821              return TRUE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE014             B.N      ??ZDoorOpenProcess_3
   3822            }else{
   3823              ucData[0]=SUBTYPE_ERR_DOOROPEN_FAIL;
   \                     ??ZDoorOpenProcess_2: (+1)
   \   0000004A   0x2066             MOVS     R0,#+102
   \   0000004C   0xF88D 0x0008      STRB     R0,[SP, #+8]
   3824              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0xAB02             ADD      R3,SP,#+8
   \   0000005C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000005E   0x7861             LDRB     R1,[R4, #+1]
   \   00000060   0x205E             MOVS     R0,#+94
   \   00000062   0x.... 0x....      BL       Uart0Pack
   3825              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000066   0x2313             MOVS     R3,#+19
   \   00000068   0x2219             MOVS     R2,#+25
   \   0000006A   0x2132             MOVS     R1,#+50
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0x.... 0x....      BL       BuzzSet
   3826              return FALSE;
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??ZDoorOpenProcess_3: (+1)
   \   00000074   0xB007             ADD      SP,SP,#+28
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
   3827            }  
   3828          }
   3829          
   3830          
   3831          /*******************************************************************************************************
   3832          ** oˉêy??3?: ZPrintOpen
   3833          ** 1|?ü?èê?: 
   3834          ** ê? ?? è?:
   3835          **
   3836          ** ê???  3?:
   3837          **
   3838          ** è???±?á?:
   3839          ** μ÷ó??￡?é:
   3840          **
   3841          ** ×÷??  ??: John Tonny
   3842          ** è???  ?ú: 2009?ê11??01è?
   3843          **------------------------------------------------------------------------------------------------------
   3844          ** DT ?? è?:
   3845          ** è???  ?ú:
   3846          **------------------------------------------------------------------------------------------------------
   3847          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3848          INT8U ZPrintOpen(INT8U ucState)
   3849          {
   \                     ZPrintOpen: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   3850          #if PAPER_RECYCLE_EN==0    
   3851            OS_ERR os_err;
   3852            
   3853            INT8U ucRet;
   3854            INT32U ulTmp;
   3855            INT8U ucTmp;
   3856            INT8U ucDSelected=m_ucDMotoBit[DMOTO_FIRST];
   3857            INT16U uiDMotoPwm=m_uiDMotoPwm[ucDSelected];	                                                        
   3858            INT16U uiDMotoTime=((INT32U)DMOTO_FREQ_DEFAULT)*DMOTO_TIME_SK_DEFAULT/uiDMotoPwm;
   3859                
   3860            INT8U ucDMoto2PosABit=m_ucKeyBit[DMOTO2_POSA_BIT];
   3861            
   3862            
   3863            INT8U ucDelays;
   3864            INT8U ucTimes;
   3865            
   3866            INT8U ucFDir=MOTO_FORWARD_MODE;
   3867            INT8U ucBDir=MOTO_BACKWARD_MODE;
   3868            
   3869            CPU_SR_ALLOC();
   3870            
   3871            
   3872            ulTmp=GetKeyOutput();    
   3873                 
   3874            ucDelays=MOTO_INTERFER_TIME_DEFAULT*2/5;
   3875            ucTimes=uiDMotoTime;
   3876            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,uiDMotoTime,ucDSelected);
   3877            /*if(!CheckBit(ulTmp,ucDMoto2PosABit)){
   3878              OSTimeDly(200,OS_OPT_TIME_DLY, &os_err) ;  
   3879            }*/
   3880            ucRet=0;
   3881            while(!ucRet){
   3882              if(ucDelays>0){
   3883                ucDelays--;
   3884              }else{
   3885                ulTmp=GetKeyOutput();    
   3886                if(CheckBit(ulTmp,ucDMoto2PosABit)){
   3887                  //OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   3888                  MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   3889                  ucRet=1;
   3890                }
   3891          
   3892                if(ucTimes>0){
   3893                  ucTimes--;
   3894                }else{
   3895                  ucRet=2;
   3896                }
   3897              }
   3898              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   3899            }
   3900            MOTO_DC_DISABLED(ucDSelected,NORMAL_MODE);
   3901            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   3902          	    
   3903            if(ucRet>=2){
   3904              return FALSE;
   3905            }
   3906            return TRUE;
   3907          #else  
   3908            OS_ERR os_err;
   3909            
   3910            INT8U ucRet;
   3911            INT32U ulTmp;
   3912            
   3913            INT8U ucSSelected=m_ucSMotoBit[SMOTO_SECOND];
   \   00000006   0x....             LDR.N    R0,??DataTable34_1
   \   00000008   0x7847             LDRB     R7,[R0, #+1]
   3914            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   0000000A   0x....             LDR.N    R0,??DataTable34
   \   0000000C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000E   0x5DC0             LDRB     R0,[R0, R7]
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
   3915                    
   3916            INT8U ucDMoto1PosABit=m_ucKeyBit[DMOTO1_POSA_BIT];
   \   00000014   0x....             LDR.N    R0,??DataTable35_1
   \   00000016   0xF890 0x8000      LDRB     R8,[R0, #+0]
   3917            INT8U ucDMoto1PosBBit=m_ucKeyBit[DMOTO1_POSB_BIT];
   \   0000001A   0x....             LDR.N    R0,??DataTable35_1
   \   0000001C   0x7840             LDRB     R0,[R0, #+1]
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3918           
   3919            INT8U ucEnterB=0;
   \   00000022   0xF05F 0x0900      MOVS     R9,#+0
   3920            
   3921            INT8U ucTimes;
   3922            
   3923            CPU_SR_ALLOC();
   \   00000026   0xF05F 0x0B00      MOVS     R11,#+0
   3924              
   3925            ulTmp=GetKeyOutput();    
   \   0000002A   0x.... 0x....      BL       GetKeyOutput
   \   0000002E   0x0006             MOVS     R6,R0
   3926            if(!CheckBit(ulTmp,ucDMoto1PosBBit) && !CheckBit(ulTmp,ucDMoto1PosABit)){
   \   00000030   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000034   0x0031             MOVS     R1,R6
   \   00000036   0x40C1             LSRS     R1,R1,R0
   \   00000038   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD11F             BNE.N    ??ZPrintOpen_0
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0xFA30 0xF008      LSRS     R0,R0,R8
   \   00000048   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD117             BNE.N    ??ZPrintOpen_0
   3927              //中间位置
   3928              SMotoStart(ucSMotoFreq,SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);    
   \   00000052   0x003B             MOVS     R3,R7
   \   00000054   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0xF44F 0x7148      MOV      R1,#+800
   \   0000005C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000060   0x.... 0x....      BL       SMotoStart
   3929              ucRet=DMotoPosBWaitEnter(SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT-10,0);//ucSSelected);
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xF240 0x3016      MOVW     R0,#+790
   \   0000006A   0x.... 0x....      BL       DMotoPosBWaitEnter
   \   0000006E   0x0005             MOVS     R5,R0
   3930              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x0038             MOVS     R0,R7
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3931              //
   3932              SMotoReset(WAIT_MODE,SMOTO_SECOND);
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x.... 0x....      BL       SMotoReset
   3933            }
   3934                 
   3935            ucTimes=(((INT32U)SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT)*ucSMotoFreq)/(100*ACTION_DELAY_TIME_DEFAULT)+10/ACTION_DELAY_TIME_DEFAULT;
   \                     ??ZPrintOpen_0: (+1)
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0xF44F 0x7148      MOV      R1,#+800
   \   0000008A   0x4348             MULS     R0,R1,R0
   \   0000008C   0xF44F 0x71FA      MOV      R1,#+500
   \   00000090   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000094   0x1C80             ADDS     R0,R0,#+2
   \   00000096   0x4682             MOV      R10,R0
   3936            SMotoStart(ucSMotoFreq,SMOTO_COUNT_ZIN_PAPER_RECYCLE_DEFAULT,MOTO_FORWARD_MODE,ucSSelected);
   \   00000098   0x003B             MOVS     R3,R7
   \   0000009A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0xF44F 0x7148      MOV      R1,#+800
   \   000000A2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A6   0x.... 0x....      BL       SMotoStart
   3937            ucRet=0;
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x0005             MOVS     R5,R0
   3938            while(!ucRet){
   \                     ??ZPrintOpen_1: (+1)
   \   000000AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B0   0x2D00             CMP      R5,#+0
   \   000000B2   0xD13E             BNE.N    ??ZPrintOpen_2
   3939              ulTmp=GetKeyOutput();    
   \   000000B4   0x.... 0x....      BL       GetKeyOutput
   \   000000B8   0x0006             MOVS     R6,R0
   3940              if(CheckBit(ulTmp,ucDMoto1PosBBit)){
   \   000000BA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000BE   0x0031             MOVS     R1,R6
   \   000000C0   0x40C1             LSRS     R1,R1,R0
   \   000000C2   0x07C8             LSLS     R0,R1,#+31
   \   000000C4   0xD506             BPL.N    ??ZPrintOpen_3
   3941                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x0038             MOVS     R0,R7
   \   000000CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3942                ucEnterB=1;
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x4681             MOV      R9,R0
   3943              }
   3944              
   3945              OS_ENTER_CRITICAL();
   \                     ??ZPrintOpen_3: (+1)
   \   000000D4   0x.... 0x....      BL       CPU_SR_Save
   \   000000D8   0x4683             MOV      R11,R0
   \   000000DA   0x.... 0x....      BL       CPU_IntDisMeasStart
   3946              if(ucEnterB){
   \   000000DE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000E2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000E6   0xD002             BEQ.N    ??ZPrintOpen_4
   3947                ucRet=1;
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0x0005             MOVS     R5,R0
   \   000000EC   0xE00B             B.N      ??ZPrintOpen_5
   3948              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??ZPrintOpen_4: (+1)
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable43
   \   000000F2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F4   0x210A             MOVS     R1,#+10
   \   000000F6   0xFB01 0xF107      MUL      R1,R1,R7
   \   000000FA   0x4408             ADD      R0,R0,R1
   \   000000FC   0x8840             LDRH     R0,[R0, #+2]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD101             BNE.N    ??ZPrintOpen_5
   3949                ucRet=2;
   \   00000102   0x2002             MOVS     R0,#+2
   \   00000104   0x0005             MOVS     R5,R0
   3950              }
   3951              OS_EXIT_CRITICAL();
   \                     ??ZPrintOpen_5: (+1)
   \   00000106   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000010A   0x4658             MOV      R0,R11
   \   0000010C   0x.... 0x....      BL       CPU_SR_Restore
   3952              
   3953              if(ucTimes>0){
   \   00000110   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000114   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000118   0xD002             BEQ.N    ??ZPrintOpen_6
   3954                ucTimes--;
   \   0000011A   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   0000011E   0xE001             B.N      ??ZPrintOpen_7
   3955              }else{
   3956                ucRet=4;
   \                     ??ZPrintOpen_6: (+1)
   \   00000120   0x2004             MOVS     R0,#+4
   \   00000122   0x0005             MOVS     R5,R0
   3957              }
   3958              OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??ZPrintOpen_7: (+1)
   \   00000124   0xF10D 0x0202      ADD      R2,SP,#+2
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0x2005             MOVS     R0,#+5
   \   0000012C   0x.... 0x....      BL       OSTimeDly
   \   00000130   0xE7BD             B.N      ??ZPrintOpen_1
   3959            }
   3960            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??ZPrintOpen_2: (+1)
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x0038             MOVS     R0,R7
   \   00000136   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000138   0x.... 0x....      BL       MOTO_STEP_DISABLED
   3961            	
   3962            if(ucRet>=2){
   \   0000013C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000013E   0x2D02             CMP      R5,#+2
   \   00000140   0xDB01             BLT.N    ??ZPrintOpen_8
   3963              return FALSE;
   \   00000142   0x2000             MOVS     R0,#+0
   \   00000144   0xE00D             B.N      ??ZPrintOpen_9
   3964            }
   3965            
   3966            if(ucState==DOOR_CLOSE_MODE){
   \                     ??ZPrintOpen_8: (+1)
   \   00000146   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000148   0x2C00             CMP      R4,#+0
   \   0000014A   0xD109             BNE.N    ??ZPrintOpen_10
   3967              if(SMotoReset(WAIT_MODE,SMOTO_SECOND)){
   \   0000014C   0x2101             MOVS     R1,#+1
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x.... 0x....      BL       SMotoReset
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD001             BEQ.N    ??ZPrintOpen_11
   3968                return TRUE;
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0xE002             B.N      ??ZPrintOpen_9
   3969              }else{
   3970                return FALSE;
   \                     ??ZPrintOpen_11: (+1)
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0xE000             B.N      ??ZPrintOpen_9
   3971              }
   3972            }
   3973            return TRUE;
   \                     ??ZPrintOpen_10: (+1)
   \   00000160   0x2001             MOVS     R0,#+1
   \                     ??ZPrintOpen_9: (+1)
   \   00000162   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   3974          #endif  
   3975          }
   3976          
   3977          /*******************************************************************************************************
   3978          ** oˉêy??3?: ZPrintOpenProcess
   3979          ** 1|?ü?èê?: 
   3980          ** ê? ?? è?:
   3981          **
   3982          ** ê???  3?:
   3983          **
   3984          ** è???±?á?:
   3985          ** μ÷ó??￡?é:
   3986          **
   3987          ** ×÷??  ??: John Tonny
   3988          ** è???  ?ú: 2009?ê11??01è?
   3989          **------------------------------------------------------------------------------------------------------
   3990          ** DT ?? è?:
   3991          ** è???  ?ú:
   3992          **------------------------------------------------------------------------------------------------------
   3993          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3994          INT8U ZPrintOpenProcess(CardMachineRxData *pcommRx1Data,INT8U ucState)
   3995          {
   \                     ZPrintOpenProcess: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   3996            INT8U ucRetrys=0;
   \   00000008   0x2700             MOVS     R7,#+0
   3997            INT8U ucData[16];
   3998            INT8U ucMode;
   3999              
   4000            ucMode=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0006             MOVS     R6,R0
   4001            if(!pcommRx1Data){
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD101             BNE.N    ??ZPrintOpenProcess_0
   4002              ucMode=1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0006             MOVS     R6,R0
   4003            }
   4004            
   4005            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??ZPrintOpenProcess_0: (+1)
   \   00000016   0x1C7F             ADDS     R7,R7,#+1
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x2F04             CMP      R7,#+4
   \   0000001C   0xDA05             BGE.N    ??ZPrintOpenProcess_1
   4006              if(ZPrintOpen(ucState)){
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       ZPrintOpen
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD0F5             BEQ.N    ??ZPrintOpenProcess_0
   4007                break;
   4008              }
   4009            }
   4010            
   4011            if(ucRetrys<=MOTO_RETRYS){
   \                     ??ZPrintOpenProcess_1: (+1)
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0x2F04             CMP      R7,#+4
   \   0000002E   0xDA0C             BGE.N    ??ZPrintOpenProcess_2
   4012              //???ˉ?¨ê±?′°?3?±¨?ˉ  
   4013              //TakeoutOvertimeRead();    
   4014              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000003E   0x7861             LDRB     R1,[R4, #+1]
   \   00000040   0x205F             MOVS     R0,#+95
   \   00000042   0x.... 0x....      BL       Uart0Pack
   4015              return TRUE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE014             B.N      ??ZPrintOpenProcess_3
   4016            }else{
   4017              ucData[0]=SUBTYPE_ERR_PRINTOPEN_FAIL;
   \                     ??ZPrintOpenProcess_2: (+1)
   \   0000004A   0x2067             MOVS     R0,#+103
   \   0000004C   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4018              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0xAB02             ADD      R3,SP,#+8
   \   0000005C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000005E   0x7861             LDRB     R1,[R4, #+1]
   \   00000060   0x205E             MOVS     R0,#+94
   \   00000062   0x.... 0x....      BL       Uart0Pack
   4019              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   00000066   0x2313             MOVS     R3,#+19
   \   00000068   0x2219             MOVS     R2,#+25
   \   0000006A   0x2132             MOVS     R1,#+50
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0x.... 0x....      BL       BuzzSet
   4020              return FALSE;
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??ZPrintOpenProcess_3: (+1)
   \   00000074   0xB007             ADD      SP,SP,#+28
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
   4021            }  
   4022          }
   4023          
   4024          
   4025          /*******************************************************************************************************
   4026          ** oˉêy??3?: LChannelToAnt
   4027          ** 1|?ü?èê?: 
   4028          ** ê? ?? è?:
   4029          **
   4030          ** ê???  3?:
   4031          **
   4032          ** è???±?á?:
   4033          ** μ÷ó??￡?é:
   4034          **
   4035          ** ×÷??  ??: John Tonny
   4036          ** è???  ?ú: 2009?ê11??01è?
   4037          **------------------------------------------------------------------------------------------------------
   4038          ** DT ?? è?:
   4039          ** è???  ?ú:
   4040          **------------------------------------------------------------------------------------------------------
   4041          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4042          INT8U LChannelToAnt(void)
   4043          {
   \                     LChannelToAnt: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   4044            OS_ERR os_err;
   4045            
   4046            INT8U ucRet;
   4047            INT32U ulTmp;
   4048            INT8U ucEnterC=0;
   \   00000006   0x2600             MOVS     R6,#+0
   4049            INT8U ucLeaveC=0;	
   \   00000008   0x2700             MOVS     R7,#+0
   4050            INT8U ucEnterA=0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   4051            INT16U uiSteps=SMOTO_COUNT_DEFAULT;
   \   0000000E   0xF44F 0x6996      MOV      R9,#+1200
   4052            INT8U ucSSelected=SMOTO_FIRST;
   \   00000012   0xF05F 0x0A00      MOVS     R10,#+0
   4053            INT8U ucSSelected1=SMOTO_SECOND;
   \   00000016   0xF05F 0x0B01      MOVS     R11,#+1
   4054            
   4055            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000001A   0x....             LDR.N    R0,??DataTable35_1
   \   0000001C   0x7E00             LDRB     R0,[R0, #+24]
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   4056            INT8U ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   00000022   0x....             LDR.N    R0,??DataTable35_1
   \   00000024   0x7E40             LDRB     R0,[R0, #+25]
   \   00000026   0xF88D 0x0003      STRB     R0,[SP, #+3]
   4057            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   0000002A   0x....             LDR.N    R0,??DataTable35_1
   \   0000002C   0x7E80             LDRB     R0,[R0, #+26]
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   4058            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000032   0x....             LDR.N    R0,??DataTable35_1
   \   00000034   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000036   0xF88D 0x0002      STRB     R0,[SP, #+2]
   4059            
   4060            
   4061            CPU_SR_ALLOC();
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   4062            
   4063            SMotoStart(m_ucSMotoFreq[ucSSelected],uiSteps,MOTO_FORWARD_MODE,ucSSelected);
   \   0000003E   0x4653             MOV      R3,R10
   \   00000040   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0x4649             MOV      R1,R9
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable43_1
   \   0000004C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000050   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   00000054   0x.... 0x....      BL       SMotoStart
   4064            SMotoStart(m_ucSMotoFreq[ucSSelected1],uiSteps,MOTO_FORWARD_MODE,ucSSelected1);
   \   00000058   0x465B             MOV      R3,R11
   \   0000005A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x4649             MOV      R1,R9
   \   00000060   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable43_1
   \   00000066   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000006A   0xF810 0x000B      LDRB     R0,[R0, R11]
   \   0000006E   0x.... 0x....      BL       SMotoStart
   4065            ucRet=0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x0004             MOVS     R4,R0
   4066            while(!ucRet){
   \                     ??LChannelToAnt_0: (+1)
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD16B             BNE.N    ??LChannelToAnt_1
   4067              ulTmp=GetKeyOutput();    
   \   0000007C   0x.... 0x....      BL       GetKeyOutput
   \   00000080   0x0005             MOVS     R5,R0
   4068              if(CheckBit(ulTmp,ucCardPosDBit)){
   \   00000082   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000086   0x0029             MOVS     R1,R5
   \   00000088   0x40C1             LSRS     R1,R1,R0
   \   0000008A   0x07C8             LSLS     R0,R1,#+31
   \   0000008C   0xD504             BPL.N    ??LChannelToAnt_2
   4069                //??è??a1?????
   4070                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x4650             MOV      R0,R10
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4071              }    
   4072          		
   4073              if(CheckBit(ulTmp,ucCardPosCBit)){
   \                     ??LChannelToAnt_2: (+1)
   \   00000098   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009C   0x0029             MOVS     R1,R5
   \   0000009E   0x40C1             LSRS     R1,R1,R0
   \   000000A0   0x07C8             LSLS     R0,R1,#+31
   \   000000A2   0xD506             BPL.N    ??LChannelToAnt_3
   4074                //??è??a1?????
   4075                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0x4650             MOV      R0,R10
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4076                ucEnterC=1;
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x0006             MOVS     R6,R0
   4077              }    
   4078              if(!CheckBit(ulTmp,ucCardPosCBit) && ucEnterC){
   \                     ??LChannelToAnt_3: (+1)
   \   000000B2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B6   0x0029             MOVS     R1,R5
   \   000000B8   0x40C1             LSRS     R1,R1,R0
   \   000000BA   0x07C8             LSLS     R0,R1,#+31
   \   000000BC   0xD409             BMI.N    ??LChannelToAnt_4
   \   000000BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C0   0x2E00             CMP      R6,#+0
   \   000000C2   0xD006             BEQ.N    ??LChannelToAnt_4
   4079                //à??a?a1?????
   4080                MOTO_STEP_DISABLED(ucSSelected1,NORMAL_MODE);
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0x4658             MOV      R0,R11
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4081                ucLeaveC=1;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x0007             MOVS     R7,R0
   4082              }    
   4083          		
   4084              if(CheckBit(ulTmp,m_ucKeyBit[CARD_POSB_BIT])){
   \                     ??LChannelToAnt_4: (+1)
   \   000000D2   0x....             LDR.N    R0,??DataTable35_1
   \   000000D4   0x7E40             LDRB     R0,[R0, #+25]
   \   000000D6   0x0029             MOVS     R1,R5
   \   000000D8   0x40C1             LSRS     R1,R1,R0
   \   000000DA   0x07C8             LSLS     R0,R1,#+31
   \   000000DC   0xD504             BPL.N    ??LChannelToAnt_5
   4085                //??è??a1?????
   4086                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0x4650             MOV      R0,R10
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4087              }    
   4088          				
   4089              if(CheckBit(ulTmp,ucCardPosABit)){
   \                     ??LChannelToAnt_5: (+1)
   \   000000E8   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000EC   0x0029             MOVS     R1,R5
   \   000000EE   0x40C1             LSRS     R1,R1,R0
   \   000000F0   0x07C8             LSLS     R0,R1,#+31
   \   000000F2   0xD50B             BPL.N    ??LChannelToAnt_6
   4090                //??è??a1?????
   4091                MOTO_STEP_DISABLED(ucSSelected1,NORMAL_MODE);
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x4658             MOV      R0,R11
   \   000000F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FA   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4092                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x4650             MOV      R0,R10
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4093                ucEnterA=1;
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0x4680             MOV      R8,R0
   4094              }    
   4095          		
   4096              if(ucLeaveC || ucEnterA){
   \                     ??LChannelToAnt_6: (+1)
   \   0000010C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000010E   0x2F00             CMP      R7,#+0
   \   00000110   0xD104             BNE.N    ??LChannelToAnt_7
   \   00000112   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000116   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000011A   0xD002             BEQ.N    ??LChannelToAnt_8
   4097                ucRet=1;
   \                     ??LChannelToAnt_7: (+1)
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x0004             MOVS     R4,R0
   \   00000120   0xE7A9             B.N      ??LChannelToAnt_0
   4098              }else if(!g_usrSMoto[ucSSelected].uiCounts || !g_usrSMoto[ucSSelected1].uiCounts){
   \                     ??LChannelToAnt_8: (+1)
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000126   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000012A   0x210A             MOVS     R1,#+10
   \   0000012C   0xFB01 0xF10A      MUL      R1,R1,R10
   \   00000130   0x4408             ADD      R0,R0,R1
   \   00000132   0x8840             LDRH     R0,[R0, #+2]
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD00A             BEQ.N    ??LChannelToAnt_9
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable43
   \   0000013C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000140   0x210A             MOVS     R1,#+10
   \   00000142   0xFB01 0xF10B      MUL      R1,R1,R11
   \   00000146   0x4408             ADD      R0,R0,R1
   \   00000148   0x8840             LDRH     R0,[R0, #+2]
   \   0000014A   0x2800             CMP      R0,#+0
   \   0000014C   0xD193             BNE.N    ??LChannelToAnt_0
   4099                ucRet=2;
   \                     ??LChannelToAnt_9: (+1)
   \   0000014E   0x2002             MOVS     R0,#+2
   \   00000150   0x0004             MOVS     R4,R0
   \   00000152   0xE790             B.N      ??LChannelToAnt_0
   4100              }
   4101            }
   4102            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??LChannelToAnt_1: (+1)
   \   00000154   0x2100             MOVS     R1,#+0
   \   00000156   0x4650             MOV      R0,R10
   \   00000158   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4103            MOTO_STEP_DISABLED(ucSSelected1,NORMAL_MODE);
   \   0000015E   0x2100             MOVS     R1,#+0
   \   00000160   0x4658             MOV      R0,R11
   \   00000162   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000164   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4104          	
   4105            if(ucRet>=2){
   \   00000168   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016A   0x2C02             CMP      R4,#+2
   \   0000016C   0xDB18             BLT.N    ??LChannelToAnt_10
   4106              ulTmp=GetKeyOutput();    
   \   0000016E   0x.... 0x....      BL       GetKeyOutput
   \   00000172   0x0005             MOVS     R5,R0
   4107              if(CheckBit(ulTmp,ucCardPosABit) && CheckBit(ulTmp,ucCardPosCBit)){
   \   00000174   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000178   0x0029             MOVS     R1,R5
   \   0000017A   0x40C1             LSRS     R1,R1,R0
   \   0000017C   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD00A             BEQ.N    ??LChannelToAnt_11
   \   00000186   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000018A   0x0029             MOVS     R1,R5
   \   0000018C   0x40C1             LSRS     R1,R1,R0
   \   0000018E   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000192   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000194   0x2800             CMP      R0,#+0
   \   00000196   0xD001             BEQ.N    ??LChannelToAnt_11
   4108                return TRUE;
   \   00000198   0x2001             MOVS     R0,#+1
   \   0000019A   0xE002             B.N      ??LChannelToAnt_12
   4109              }
   4110              return FALSE;
   \                     ??LChannelToAnt_11: (+1)
   \   0000019C   0x2000             MOVS     R0,#+0
   \   0000019E   0xE000             B.N      ??LChannelToAnt_12
   4111            }
   4112            return TRUE;
   \                     ??LChannelToAnt_10: (+1)
   \   000001A0   0x2001             MOVS     R0,#+1
   \                     ??LChannelToAnt_12: (+1)
   \   000001A2   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   4113          }
   4114          
   4115          /*******************************************************************************************************
   4116          ** oˉêy??3?: LBoxToChannel
   4117          ** 1|?ü?èê?: 
   4118          ** ê? ?? è?:
   4119          **
   4120          ** ê???  3?:
   4121          **
   4122          ** è???±?á?:
   4123          ** μ÷ó??￡?é:
   4124          **
   4125          ** ×÷??  ??: John Tonny
   4126          ** è???  ?ú: 2009?ê11??01è?
   4127          **------------------------------------------------------------------------------------------------------
   4128          ** DT ?? è?:
   4129          ** è???  ?ú:
   4130          **------------------------------------------------------------------------------------------------------
   4131          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4132          INT8U LBoxToChannel(INT8U ucSelected)
   4133          {
   \                     LBoxToChannel: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   4134            OS_ERR os_err;
   4135            
   4136            INT8U ucRet;
   4137            INT32U ulTmp;
   4138            INT8U ucEnterE=0;
   \   00000008   0x2700             MOVS     R7,#+0
   4139            INT8U ucLeaveE=0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   4140            INT8U ucPos=0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   4141            INT16U uiTmp=20;
   \   00000012   0x2014             MOVS     R0,#+20
   \   00000014   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   4142          
   4143            INT8U ucDMotoBitB=m_ucKeyBit[DMOTO1_POSB_BIT+ucSelected*8];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   00000022   0x7840             LDRB     R0,[R0, #+1]
   \   00000024   0xF88D 0x0006      STRB     R0,[SP, #+6]
   4144            INT8U ucCardEBit=m_ucKeyBit[CARD_POSE1_BIT+ucSelected*8];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   00000032   0xF890 0xA002      LDRB     R10,[R0, #+2]
   4145          
   4146            INT16U uiDMotoPwm=m_uiDMotoPwm[ucSelected];
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable45_1
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000040   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   4147            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_SECOND];
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable43_1
   \   00000048   0x7840             LDRB     R0,[R0, #+1]
   \   0000004A   0xF88D 0x0004      STRB     R0,[SP, #+4]
   4148            INT8U ucSSelected=m_ucSMotoBit[SMOTO_SECOND];
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable45_2
   \   00000052   0x7840             LDRB     R0,[R0, #+1]
   \   00000054   0xF88D 0x0005      STRB     R0,[SP, #+5]
   4149            
   4150            INT8U ucDelays;
   4151            INT8U ucTimes;
   4152          
   4153            CPU_SR_ALLOC();
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   4154            
   4155            if(ucSelected>=CARDMACHINE_DMOTO_NUMS){
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0x2C04             CMP      R4,#+4
   \   00000060   0xDB01             BLT.N    ??LBoxToChannel_0
   4156              return FALSE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xE0F3             B.N      ??LBoxToChannel_1
   4157            }
   4158              
   4159            ucDelays=MOTO_INTERFER_TIME_DEFAULT/5;
   \                     ??LBoxToChannel_0: (+1)
   \   00000066   0x2014             MOVS     R0,#+20
   \   00000068   0x4683             MOV      R11,R0
   4160          
   4161            ulTmp=GetKeyOutput();    
   \   0000006A   0x.... 0x....      BL       GetKeyOutput
   \   0000006E   0x0006             MOVS     R6,R0
   4162            if(CheckBit(ulTmp,ucCardEBit)){
   \   00000070   0x0030             MOVS     R0,R6
   \   00000072   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   00000076   0x07C0             LSLS     R0,R0,#+31
   \   00000078   0xD501             BPL.N    ??LBoxToChannel_2
   4163              ucEnterE=1;
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x0007             MOVS     R7,R0
   4164            }
   4165          
   4166            ucTimes=(((INT32U)1000)*ucSMotoFreq)/1000+2;
   \                     ??LBoxToChannel_2: (+1)
   \   0000007E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000082   0xF44F 0x717A      MOV      R1,#+1000
   \   00000086   0x4348             MULS     R0,R1,R0
   \   00000088   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000090   0x1C80             ADDS     R0,R0,#+2
   \   00000092   0xF88D 0x0007      STRB     R0,[SP, #+7]
   4167            ucDelays=DMOTO_TIME_DEFAULT;
   \   00000096   0x2096             MOVS     R0,#+150
   \   00000098   0x4683             MOV      R11,R0
   4168            DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,DMOTO_TIME_DEFAULT,ucSelected);
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x2396             MOVS     R3,#+150
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   000000A8   0xF44F 0x60FA      MOV      R0,#+2000
   \   000000AC   0x.... 0x....      BL       DMotoStart
   4169            SMotoStart(ucSMotoFreq,1000,MOTO_FORWARD_MODE,ucSSelected);
   \   000000B0   0xF89D 0x3005      LDRB     R3,[SP, #+5]
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0xF44F 0x717A      MOV      R1,#+1000
   \   000000BA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000BE   0x.... 0x....      BL       SMotoStart
   4170            ucRet=0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x0005             MOVS     R5,R0
   4171            while(!ucRet){
   \                     ??LBoxToChannel_3: (+1)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xF040 0x8090      BNE.W    ??LBoxToChannel_4
   4172              if(ucDelays>0){
   \   000000CE   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000D2   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000D6   0xD002             BEQ.N    ??LBoxToChannel_5
   4173                ucDelays--;
   \   000000D8   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   000000DC   0xE081             B.N      ??LBoxToChannel_6
   4174              }else{
   4175                ulTmp=GetKeyOutput();    
   \                     ??LBoxToChannel_5: (+1)
   \   000000DE   0x.... 0x....      BL       GetKeyOutput
   \   000000E2   0x0006             MOVS     R6,R0
   4176                if(CheckBit(ulTmp,ucDMotoBitB)){
   \   000000E4   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000E8   0x0031             MOVS     R1,R6
   \   000000EA   0x40C1             LSRS     R1,R1,R0
   \   000000EC   0x07C8             LSLS     R0,R1,#+31
   \   000000EE   0xD50B             BPL.N    ??LBoxToChannel_7
   4177                 OSTimeDly(20,OS_OPT_TIME_DLY, &os_err) ;         
   \   000000F0   0xAA02             ADD      R2,SP,#+8
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x2014             MOVS     R0,#+20
   \   000000F6   0x.... 0x....      BL       OSTimeDly
   4178                  MOTO_DC_DISABLED(ucSelected,NORMAL_MODE);
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x0020             MOVS     R0,R4
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x.... 0x....      BL       MOTO_DC_DISABLED
   4179                  ucPos=1;	
   \   00000104   0x2001             MOVS     R0,#+1
   \   00000106   0x4681             MOV      R9,R0
   4180                }
   4181                        
   4182                if(CheckBit(ulTmp,ucCardEBit)){
   \                     ??LBoxToChannel_7: (+1)
   \   00000108   0x0030             MOVS     R0,R6
   \   0000010A   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000010E   0x07C0             LSLS     R0,R0,#+31
   \   00000110   0xD501             BPL.N    ??LBoxToChannel_8
   4183                  ucEnterE=1;
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x0007             MOVS     R7,R0
   4184                }
   4185                
   4186                if(!CheckBit(ulTmp,ucCardEBit) && ucEnterE){
   \                     ??LBoxToChannel_8: (+1)
   \   00000116   0x0030             MOVS     R0,R6
   \   00000118   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000011C   0x07C0             LSLS     R0,R0,#+31
   \   0000011E   0xD44C             BMI.N    ??LBoxToChannel_9
   \   00000120   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000122   0x2F00             CMP      R7,#+0
   \   00000124   0xD049             BEQ.N    ??LBoxToChannel_9
   4187                  ucLeaveE=1;
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0x4680             MOV      R8,R0
   4188                  if(!m_usrBoxInfo[ucSelected].usrFlag.usrBit.bCountWrited){
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   0000012E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000130   0x0161             LSLS     R1,R4,#+5
   \   00000132   0x4408             ADD      R0,R0,R1
   \   00000134   0x7B80             LDRB     R0,[R0, #+14]
   \   00000136   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD13C             BNE.N    ??LBoxToChannel_9
   4189                    m_usrBoxInfo[ucSelected].usrFlag.usrBit.bCountWrited=1;
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   00000144   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000146   0x0161             LSLS     R1,R4,#+5
   \   00000148   0x4408             ADD      R0,R0,R1
   \   0000014A   0x7B80             LDRB     R0,[R0, #+14]
   \   0000014C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   00000154   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000156   0x0162             LSLS     R2,R4,#+5
   \   00000158   0x4411             ADD      R1,R1,R2
   \   0000015A   0x7388             STRB     R0,[R1, #+14]
   4190                    
   4191                    //??éù?¨êy
   4192                    m_usrBoxInfo[ucSelected].usrCountResponse.ulMachineId=m_usrBoxInfo[ucSelected].ulMachineId;
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   00000160   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000162   0x0161             LSLS     R1,R4,#+5
   \   00000164   0x4408             ADD      R0,R0,R1
   \   00000166   0x6840             LDR      R0,[R0, #+4]
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   0000016C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016E   0x0162             LSLS     R2,R4,#+5
   \   00000170   0x4411             ADD      R1,R1,R2
   \   00000172   0x6148             STR      R0,[R1, #+20]
   4193                    m_usrBoxInfo[ucSelected].usrCountResponse.ucCurrentCount=m_usrBoxInfo[ucSelected].ucCounts;
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   00000178   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017A   0x0161             LSLS     R1,R4,#+5
   \   0000017C   0x5C40             LDRB     R0,[R0, R1]
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   00000182   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000184   0x0162             LSLS     R2,R4,#+5
   \   00000186   0x4411             ADD      R1,R1,R2
   \   00000188   0x7608             STRB     R0,[R1, #+24]
   4194                    m_usrBoxInfo[ucSelected].usrCountResponse.ucNewCount=m_usrBoxInfo[ucSelected].ucCounts-1;
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \   0000018E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000190   0x0161             LSLS     R1,R4,#+5
   \   00000192   0x5C40             LDRB     R0,[R0, R1]
   \   00000194   0x1E40             SUBS     R0,R0,#+1
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   0000019A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000019C   0x0162             LSLS     R2,R4,#+5
   \   0000019E   0x4411             ADD      R1,R1,R2
   \   000001A0   0x7648             STRB     R0,[R1, #+25]
   4195                    m_usrBoxInfo[ucSelected].usrCountResponse.ucRetrys=8;
   \   000001A2   0x2008             MOVS     R0,#+8
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   000001A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001AA   0x0162             LSLS     R2,R4,#+5
   \   000001AC   0x4411             ADD      R1,R1,R2
   \   000001AE   0x7688             STRB     R0,[R1, #+26]
   4196                    CardCountUpdateSend(0,ucSelected);
   \   000001B0   0x0021             MOVS     R1,R4
   \   000001B2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B4   0x2000             MOVS     R0,#+0
   \   000001B6   0x.... 0x....      BL       CardCountUpdateSend
   4197                  }
   4198                }		
   4199                
   4200                if(ucPos){
   \                     ??LBoxToChannel_9: (+1)
   \   000001BA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001BE   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001C2   0xD002             BEQ.N    ??LBoxToChannel_10
   4201                  ucRet=1;
   \   000001C4   0x2001             MOVS     R0,#+1
   \   000001C6   0x0005             MOVS     R5,R0
   \   000001C8   0xE00B             B.N      ??LBoxToChannel_6
   4202                }else if(!g_usrDMoto[ucSelected].uiTime){
   \                     ??LBoxToChannel_10: (+1)
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable46
   \   000001CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D0   0x210A             MOVS     R1,#+10
   \   000001D2   0xFB01 0xF104      MUL      R1,R1,R4
   \   000001D6   0x4408             ADD      R0,R0,R1
   \   000001D8   0x8900             LDRH     R0,[R0, #+8]
   \   000001DA   0x2800             CMP      R0,#+0
   \   000001DC   0xD101             BNE.N    ??LBoxToChannel_6
   4203                  ucRet=2;
   \   000001DE   0x2002             MOVS     R0,#+2
   \   000001E0   0x0005             MOVS     R5,R0
   4204                }
   4205              }
   4206             OSTimeDly(5,OS_OPT_TIME_DLY, &os_err) ;         
   \                     ??LBoxToChannel_6: (+1)
   \   000001E2   0xAA02             ADD      R2,SP,#+8
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x2005             MOVS     R0,#+5
   \   000001E8   0x.... 0x....      BL       OSTimeDly
   \   000001EC   0xE76B             B.N      ??LBoxToChannel_3
   4207              
   4208            }
   4209          
   4210            MOTO_DC_DISABLED(ucSelected,NORMAL_MODE);
   \                     ??LBoxToChannel_4: (+1)
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x0020             MOVS     R0,R4
   \   000001F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F4   0x.... 0x....      BL       MOTO_DC_DISABLED
   4211            MOTO_STEP_DISABLED(SMOTO_FIRST,NORMAL_MODE);
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4212            OSTimeDly(MOTO_INTERFER_TIME_DEFAULT/10,OS_OPT_TIME_DLY, &os_err) ;         
   \   00000200   0xAA02             ADD      R2,SP,#+8
   \   00000202   0x2100             MOVS     R1,#+0
   \   00000204   0x200A             MOVS     R0,#+10
   \   00000206   0x.... 0x....      BL       OSTimeDly
   4213          
   4214            if(m_usrBoxInfo[ucSelected].usrFlag.usrBit.bCountWrited){
   \   0000020A   0x....             LDR.N    R0,??DataTable37_2
   \   0000020C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000020E   0x0161             LSLS     R1,R4,#+5
   \   00000210   0x4408             ADD      R0,R0,R1
   \   00000212   0x7B80             LDRB     R0,[R0, #+14]
   \   00000214   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD004             BEQ.N    ??LBoxToChannel_11
   4215              OSTimeDly(BOX_COUNT_WRITE_TIME/10,OS_OPT_TIME_DLY, &os_err) ;         
   \   0000021E   0xAA02             ADD      R2,SP,#+8
   \   00000220   0x2100             MOVS     R1,#+0
   \   00000222   0x200A             MOVS     R0,#+10
   \   00000224   0x.... 0x....      BL       OSTimeDly
   4216            }
   4217          
   4218            if(ucRet>=2){
   \                     ??LBoxToChannel_11: (+1)
   \   00000228   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000022A   0x2D02             CMP      R5,#+2
   \   0000022C   0xDB01             BLT.N    ??LBoxToChannel_12
   4219              return FALSE;
   \   0000022E   0x2000             MOVS     R0,#+0
   \   00000230   0xE00D             B.N      ??LBoxToChannel_1
   4220            }  
   4221          	
   4222            if(!LMotoReset(ucSelected)){
   \                     ??LBoxToChannel_12: (+1)
   \   00000232   0x0020             MOVS     R0,R4
   \   00000234   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000236   0x.... 0x....      BL       LMotoReset
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD101             BNE.N    ??LBoxToChannel_13
   4223              return 2;
   \   0000023E   0x2002             MOVS     R0,#+2
   \   00000240   0xE005             B.N      ??LBoxToChannel_1
   4224            }
   4225          	
   4226            //μ??úé?éy
   4227            CardBoxBasicInfoSend(0x80,ucSelected);
   \                     ??LBoxToChannel_13: (+1)
   \   00000242   0x0021             MOVS     R1,R4
   \   00000244   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000246   0x2080             MOVS     R0,#+128
   \   00000248   0x.... 0x....      BL       CardBoxBasicInfoSend
   4228            
   4229            return TRUE;
   \   0000024C   0x2001             MOVS     R0,#+1
   \                     ??LBoxToChannel_1: (+1)
   \   0000024E   0xB005             ADD      SP,SP,#+20
   \   00000250   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4230          }
   4231          
   4232          /*******************************************************************************************************
   4233          ** oˉêy??3?: LBoxToAntProcess
   4234          ** 1|?ü?èê?: 
   4235          ** ê? ?? è?:
   4236          **
   4237          ** ê???  3?:
   4238          **
   4239          ** è???±?á?:
   4240          ** μ÷ó??￡?é:
   4241          **
   4242          ** ×÷??  ??: John Tonny
   4243          ** è???  ?ú: 2009?ê11??01è?
   4244          **------------------------------------------------------------------------------------------------------
   4245          ** DT ?? è?:
   4246          ** è???  ?ú:
   4247          **------------------------------------------------------------------------------------------------------
   4248          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4249          INT8U LBoxToAntProcess(CardMachineRxData *pcommRx1Data,INT8U ucSelected)
   4250          {
   \                     LBoxToAntProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   4251            INT8U ucRetrys=0;
   \   0000000A   0xF05F 0x0B00      MOVS     R11,#+0
   4252            INT8U ucData[32];
   4253            INT8U ucMode;
   4254            INT32U ulTmp;
   4255            INT8U ucRet;	
   4256            INT8U ucReset;
   4257            INT8U ucBoxLoadBit=m_ucKeyBit[BOXLOAD1_BIT+ucSelected*8];
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xEB00 0x00C5      ADD      R0,R0,R5, LSL #+3
   \   00000018   0xF890 0xA003      LDRB     R10,[R0, #+3]
   4258            
   4259            if(ucSelected>=CARDMACHINE_CARDBOX_NUMS){
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D03             CMP      R5,#+3
   \   00000020   0xDB01             BLT.N    ??LBoxToAntProcess_0
   4260              return FALSE;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE161             B.N      ??LBoxToAntProcess_1
   4261            }
   4262            
   4263            ucMode=0;
   \                     ??LBoxToAntProcess_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0006             MOVS     R6,R0
   4264            if(!pcommRx1Data){
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD101             BNE.N    ??LBoxToAntProcess_2
   4265              ucMode=1;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x0006             MOVS     R6,R0
   4266            }
   4267            
   4268            ucRetrys=0;
   \                     ??LBoxToAntProcess_2: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x4683             MOV      R11,R0
   4269            ucRet=0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x4680             MOV      R8,R0
   4270            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??LBoxToAntProcess_3: (+1)
   \   0000003A   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000003E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000042   0xF1BB 0x0F04      CMP      R11,#+4
   \   00000046   0xDA1C             BGE.N    ??LBoxToAntProcess_4
   4271              ucRet=LBoxToAntPreProcess();
   \   00000048   0x.... 0x....      BL       LBoxToAntPreProcess
   \   0000004C   0x4680             MOV      R8,R0
   4272              if(!ucRet){
   \   0000004E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000056   0xD014             BEQ.N    ??LBoxToAntProcess_4
   4273                break;
   4274              }else if(ucRet==1){
   \                     ??LBoxToAntProcess_5: (+1)
   \   00000058   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000005C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000060   0xD1EB             BNE.N    ??LBoxToAntProcess_3
   4275                ucData[0]=SUBTYPE_ERR_CARD_ONANT;
   \   00000062   0x2041             MOVS     R0,#+65
   \   00000064   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4276                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0xAB02             ADD      R3,SP,#+8
   \   00000074   0x78A2             LDRB     R2,[R4, #+2]
   \   00000076   0x7861             LDRB     R1,[R4, #+1]
   \   00000078   0x205E             MOVS     R0,#+94
   \   0000007A   0x.... 0x....      BL       Uart0Pack
   4277                return FALSE;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE133             B.N      ??LBoxToAntProcess_1
   4278              }
   4279            }	
   4280            if(ucRetrys>MOTO_RETRYS){
   \                     ??LBoxToAntProcess_4: (+1)
   \   00000082   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000086   0xF1BB 0x0F04      CMP      R11,#+4
   \   0000008A   0xDB15             BLT.N    ??LBoxToAntProcess_6
   4281              ucData[0]=SUBTYPE_ERR_CARD_SLIPPED;
   \   0000008C   0x2065             MOVS     R0,#+101
   \   0000008E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4282              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000092   0x0030             MOVS     R0,R6
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0xAB02             ADD      R3,SP,#+8
   \   0000009E   0x78A2             LDRB     R2,[R4, #+2]
   \   000000A0   0x7861             LDRB     R1,[R4, #+1]
   \   000000A2   0x205E             MOVS     R0,#+94
   \   000000A4   0x.... 0x....      BL       Uart0Pack
   4283              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   000000A8   0x2313             MOVS     R3,#+19
   \   000000AA   0x2219             MOVS     R2,#+25
   \   000000AC   0x2132             MOVS     R1,#+50
   \   000000AE   0x2004             MOVS     R0,#+4
   \   000000B0   0x.... 0x....      BL       BuzzSet
   4284              return FALSE;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0xE118             B.N      ??LBoxToAntProcess_1
   4285            }
   4286          	
   4287          	
   4288            if(m_usrErrorFlags.usrBit.bBoxToAnt){
   \                     ??LBoxToAntProcess_6: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable50
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD01B             BEQ.N    ??LBoxToAntProcess_7
   4289              m_usrErrorFlags.usrBit.bBoxToAnt=0;
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable50
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable50
   \   000000D6   0x7008             STRB     R0,[R1, #+0]
   4290              if(LChannelToAnt()){
   \   000000D8   0x.... 0x....      BL       LChannelToAnt
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD00F             BEQ.N    ??LBoxToAntProcess_7
   4291                ucData[0]=SUBTYPE_ERR_CARD_ONANT;
   \   000000E0   0x2041             MOVS     R0,#+65
   \   000000E2   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4292                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000E6   0x0030             MOVS     R0,R6
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x2001             MOVS     R0,#+1
   \   000000EE   0x9000             STR      R0,[SP, #+0]
   \   000000F0   0xAB02             ADD      R3,SP,#+8
   \   000000F2   0x78A2             LDRB     R2,[R4, #+2]
   \   000000F4   0x7861             LDRB     R1,[R4, #+1]
   \   000000F6   0x205E             MOVS     R0,#+94
   \   000000F8   0x.... 0x....      BL       Uart0Pack
   4293                return FALSE;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0xE0F4             B.N      ??LBoxToAntProcess_1
   4294              }
   4295            }
   4296          
   4297            ulTmp=GetKeyOutput();
   \                     ??LBoxToAntProcess_7: (+1)
   \   00000100   0x.... 0x....      BL       GetKeyOutput
   \   00000104   0x0007             MOVS     R7,R0
   4298            if(!CheckBit(ulTmp,ucBoxLoadBit)){
   \   00000106   0x0038             MOVS     R0,R7
   \   00000108   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000010C   0x07C0             LSLS     R0,R0,#+31
   \   0000010E   0xD40F             BMI.N    ??LBoxToAntProcess_8
   4299              ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   00000110   0x2044             MOVS     R0,#+68
   \   00000112   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4300              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000116   0x0030             MOVS     R0,R6
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x9001             STR      R0,[SP, #+4]
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x9000             STR      R0,[SP, #+0]
   \   00000120   0xAB02             ADD      R3,SP,#+8
   \   00000122   0x78A2             LDRB     R2,[R4, #+2]
   \   00000124   0x7861             LDRB     R1,[R4, #+1]
   \   00000126   0x205E             MOVS     R0,#+94
   \   00000128   0x.... 0x....      BL       Uart0Pack
   4301              return FALSE;
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0xE0DC             B.N      ??LBoxToAntProcess_1
   4302            }
   4303              
   4304            if(!m_usrBoxInfo[ucSelected].usrFlag.usrBit.bConnected){
   \                     ??LBoxToAntProcess_8: (+1)
   \   00000130   0x....             LDR.N    R0,??DataTable37_2
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x0169             LSLS     R1,R5,#+5
   \   00000136   0x4408             ADD      R0,R0,R1
   \   00000138   0x7B80             LDRB     R0,[R0, #+14]
   \   0000013A   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000013E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD10F             BNE.N    ??LBoxToAntProcess_9
   4305              ucData[0]=SUBTYPE_ERR_BOX_NOCONNECT;
   \   00000144   0x2064             MOVS     R0,#+100
   \   00000146   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4306              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000014A   0x0030             MOVS     R0,R6
   \   0000014C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014E   0x9001             STR      R0,[SP, #+4]
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0xAB02             ADD      R3,SP,#+8
   \   00000156   0x78A2             LDRB     R2,[R4, #+2]
   \   00000158   0x7861             LDRB     R1,[R4, #+1]
   \   0000015A   0x205E             MOVS     R0,#+94
   \   0000015C   0x.... 0x....      BL       Uart0Pack
   4307              return FALSE;
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0xE0C2             B.N      ??LBoxToAntProcess_1
   4308            }
   4309          
   4310            if(m_usrBoxInfo[ucSelected].usrCountResponse.ucEnabled){
   \                     ??LBoxToAntProcess_9: (+1)
   \   00000164   0x....             LDR.N    R0,??DataTable37_2
   \   00000166   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000168   0x0169             LSLS     R1,R5,#+5
   \   0000016A   0x4408             ADD      R0,R0,R1
   \   0000016C   0x7C00             LDRB     R0,[R0, #+16]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD00F             BEQ.N    ??LBoxToAntProcess_10
   4311              ucData[0]=SUBTYPE_ERR_DEVICE_BUSY;
   \   00000172   0x203B             MOVS     R0,#+59
   \   00000174   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4312              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000178   0x0030             MOVS     R0,R6
   \   0000017A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017C   0x9001             STR      R0,[SP, #+4]
   \   0000017E   0x2001             MOVS     R0,#+1
   \   00000180   0x9000             STR      R0,[SP, #+0]
   \   00000182   0xAB02             ADD      R3,SP,#+8
   \   00000184   0x78A2             LDRB     R2,[R4, #+2]
   \   00000186   0x7861             LDRB     R1,[R4, #+1]
   \   00000188   0x205E             MOVS     R0,#+94
   \   0000018A   0x.... 0x....      BL       Uart0Pack
   4313              return FALSE;
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0xE0AB             B.N      ??LBoxToAntProcess_1
   4314            }
   4315          
   4316            if(!m_usrBoxInfo[ucSelected].ucCounts){
   \                     ??LBoxToAntProcess_10: (+1)
   \   00000192   0x....             LDR.N    R0,??DataTable37_2
   \   00000194   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000196   0x0169             LSLS     R1,R5,#+5
   \   00000198   0x5C40             LDRB     R0,[R0, R1]
   \   0000019A   0x2800             CMP      R0,#+0
   \   0000019C   0xD10F             BNE.N    ??LBoxToAntProcess_11
   4317              ucData[0]=SUBTYPE_ERR_CARDCOUNT_ZERO;
   \   0000019E   0x2063             MOVS     R0,#+99
   \   000001A0   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4318              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000001A4   0x0030             MOVS     R0,R6
   \   000001A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A8   0x9001             STR      R0,[SP, #+4]
   \   000001AA   0x2001             MOVS     R0,#+1
   \   000001AC   0x9000             STR      R0,[SP, #+0]
   \   000001AE   0xAB02             ADD      R3,SP,#+8
   \   000001B0   0x78A2             LDRB     R2,[R4, #+2]
   \   000001B2   0x7861             LDRB     R1,[R4, #+1]
   \   000001B4   0x205E             MOVS     R0,#+94
   \   000001B6   0x.... 0x....      BL       Uart0Pack
   4319              return FALSE;
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0xE095             B.N      ??LBoxToAntProcess_1
   4320            }	
   4321              
   4322            m_usrBoxInfo[ucSelected].usrFlag.usrBit.bCountWrited=0;
   \                     ??LBoxToAntProcess_11: (+1)
   \   000001BE   0x....             LDR.N    R0,??DataTable37_2
   \   000001C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C2   0x0169             LSLS     R1,R5,#+5
   \   000001C4   0x4408             ADD      R0,R0,R1
   \   000001C6   0x7B80             LDRB     R0,[R0, #+14]
   \   000001C8   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000001CC   0x....             LDR.N    R1,??DataTable37_2
   \   000001CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D0   0x016A             LSLS     R2,R5,#+5
   \   000001D2   0x4411             ADD      R1,R1,R2
   \   000001D4   0x7388             STRB     R0,[R1, #+14]
   4323            ucReset=0;
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x4681             MOV      R9,R0
   4324            ucRet=0;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x4680             MOV      R8,R0
   4325            ucRetrys=0;
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x4683             MOV      R11,R0
   4326            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??LBoxToAntProcess_12: (+1)
   \   000001E2   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000001E6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001EA   0xF1BB 0x0F04      CMP      R11,#+4
   \   000001EE   0xDA53             BGE.N    ??LBoxToAntProcess_13
   4327              ulTmp=GetKeyOutput();
   \   000001F0   0x.... 0x....      BL       GetKeyOutput
   \   000001F4   0x0007             MOVS     R7,R0
   4328              if(!CheckBit(ulTmp,ucBoxLoadBit)){
   \   000001F6   0x0038             MOVS     R0,R7
   \   000001F8   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   000001FC   0x07C0             LSLS     R0,R0,#+31
   \   000001FE   0xD40F             BMI.N    ??LBoxToAntProcess_14
   4329                ucData[0]=SUBTYPE_ERR_CARDBOX_UNLOAD;
   \   00000200   0x2044             MOVS     R0,#+68
   \   00000202   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4330                Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000206   0x0030             MOVS     R0,R6
   \   00000208   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020A   0x9001             STR      R0,[SP, #+4]
   \   0000020C   0x2001             MOVS     R0,#+1
   \   0000020E   0x9000             STR      R0,[SP, #+0]
   \   00000210   0xAB02             ADD      R3,SP,#+8
   \   00000212   0x78A2             LDRB     R2,[R4, #+2]
   \   00000214   0x7861             LDRB     R1,[R4, #+1]
   \   00000216   0x205E             MOVS     R0,#+94
   \   00000218   0x.... 0x....      BL       Uart0Pack
   4331                return FALSE;
   \   0000021C   0x2000             MOVS     R0,#+0
   \   0000021E   0xE064             B.N      ??LBoxToAntProcess_1
   4332              }
   4333              if(!ucReset){
   \                     ??LBoxToAntProcess_14: (+1)
   \   00000220   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000224   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000228   0xD109             BNE.N    ??LBoxToAntProcess_15
   4334                if(LMotoReset(ucSelected)){
   \   0000022A   0x0028             MOVS     R0,R5
   \   0000022C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000022E   0x.... 0x....      BL       LMotoReset
   \   00000232   0x2800             CMP      R0,#+0
   \   00000234   0xD003             BEQ.N    ??LBoxToAntProcess_15
   4335                  ucRetrys=0;
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x4683             MOV      R11,R0
   4336                  ucReset=1;
   \   0000023A   0x2001             MOVS     R0,#+1
   \   0000023C   0x4681             MOV      R9,R0
   4337                }
   4338              }
   4339              if(ucReset){
   \                     ??LBoxToAntProcess_15: (+1)
   \   0000023E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000242   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000246   0xD0CC             BEQ.N    ??LBoxToAntProcess_12
   4340                if(!ucRet){
   \   00000248   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000024C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000250   0xD104             BNE.N    ??LBoxToAntProcess_16
   4341                  ucRet=LBoxToChannel(ucSelected);
   \   00000252   0x0028             MOVS     R0,R5
   \   00000254   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000256   0x.... 0x....      BL       LBoxToChannel
   \   0000025A   0x4680             MOV      R8,R0
   4342                }
   4343                if(ucRet){
   \                     ??LBoxToAntProcess_16: (+1)
   \   0000025C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000260   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000264   0xD015             BEQ.N    ??LBoxToAntProcess_17
   4344                  if(LChannelToAnt()){
   \   00000266   0x.... 0x....      BL       LChannelToAnt
   \   0000026A   0x2800             CMP      R0,#+0
   \   0000026C   0xD008             BEQ.N    ??LBoxToAntProcess_18
   4345                    m_usrErrorFlags.usrBit.bBoxToAnt=0;
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable50
   \   00000272   0x7800             LDRB     R0,[R0, #+0]
   \   00000274   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000278   0x.... 0x....      LDR.W    R1,??DataTable50
   \   0000027C   0x7008             STRB     R0,[R1, #+0]
   4346                    break;
   \   0000027E   0xE00B             B.N      ??LBoxToAntProcess_13
   4347                  }else{
   4348                    m_usrErrorFlags.usrBit.bBoxToAnt=1;
   \                     ??LBoxToAntProcess_18: (+1)
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable50
   \   00000284   0x7800             LDRB     R0,[R0, #+0]
   \   00000286   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable50
   \   0000028E   0x7008             STRB     R0,[R1, #+0]
   \   00000290   0xE7A7             B.N      ??LBoxToAntProcess_12
   4349                  }
   4350                }else{
   4351                  ucReset=0;
   \                     ??LBoxToAntProcess_17: (+1)
   \   00000292   0x2000             MOVS     R0,#+0
   \   00000294   0x4681             MOV      R9,R0
   \   00000296   0xE7A4             B.N      ??LBoxToAntProcess_12
   4352                }
   4353              }
   4354            }
   4355          
   4356            KeyChange();
   \                     ??LBoxToAntProcess_13: (+1)
   \   00000298   0x.... 0x....      BL       KeyChange
   4357            if(ucRetrys>MOTO_RETRYS){
   \   0000029C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000002A0   0xF1BB 0x0F04      CMP      R11,#+4
   \   000002A4   0xDB15             BLT.N    ??LBoxToAntProcess_19
   4358              ucData[0]=SUBTYPE_ERR_BOX2ANT_FAIL;
   \   000002A6   0x2053             MOVS     R0,#+83
   \   000002A8   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4359              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000002AC   0x0030             MOVS     R0,R6
   \   000002AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B0   0x9001             STR      R0,[SP, #+4]
   \   000002B2   0x2001             MOVS     R0,#+1
   \   000002B4   0x9000             STR      R0,[SP, #+0]
   \   000002B6   0xAB02             ADD      R3,SP,#+8
   \   000002B8   0x78A2             LDRB     R2,[R4, #+2]
   \   000002BA   0x7861             LDRB     R1,[R4, #+1]
   \   000002BC   0x205E             MOVS     R0,#+94
   \   000002BE   0x.... 0x....      BL       Uart0Pack
   4360              BuzzSet(4,50,25,BUZZ_SFK_ERROR_PRIOR);
   \   000002C2   0x2313             MOVS     R3,#+19
   \   000002C4   0x2219             MOVS     R2,#+25
   \   000002C6   0x2132             MOVS     R1,#+50
   \   000002C8   0x2004             MOVS     R0,#+4
   \   000002CA   0x.... 0x....      BL       BuzzSet
   4361              return FALSE;
   \   000002CE   0x2000             MOVS     R0,#+0
   \   000002D0   0xE00B             B.N      ??LBoxToAntProcess_1
   4362            }else{
   4363              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \                     ??LBoxToAntProcess_19: (+1)
   \   000002D2   0x0030             MOVS     R0,R6
   \   000002D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D6   0x9001             STR      R0,[SP, #+4]
   \   000002D8   0x2000             MOVS     R0,#+0
   \   000002DA   0x9000             STR      R0,[SP, #+0]
   \   000002DC   0x2300             MOVS     R3,#+0
   \   000002DE   0x78A2             LDRB     R2,[R4, #+2]
   \   000002E0   0x7861             LDRB     R1,[R4, #+1]
   \   000002E2   0x205F             MOVS     R0,#+95
   \   000002E4   0x.... 0x....      BL       Uart0Pack
   4364            }
   4365            return TRUE;
   \   000002E8   0x2001             MOVS     R0,#+1
   \                     ??LBoxToAntProcess_1: (+1)
   \   000002EA   0xB00B             ADD      SP,SP,#+44
   \   000002EC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4366          }
   4367          
   4368          /*******************************************************************************************************
   4369          ** oˉêy??3?: LAntToOut
   4370          ** 1|?ü?èê?: 
   4371          ** ê? ?? è?:
   4372          **
   4373          ** ê???  3?:
   4374          **
   4375          ** è???±?á?:
   4376          ** μ÷ó??￡?é:
   4377          **
   4378          ** ×÷??  ??: John Tonny
   4379          ** è???  ?ú: 2009?ê11??01è?
   4380          **------------------------------------------------------------------------------------------------------
   4381          ** DT ?? è?:
   4382          ** è???  ?ú:
   4383          **------------------------------------------------------------------------------------------------------
   4384          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4385          INT8U LAntToOut(void)
   4386          {
   \                     LAntToOut: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   4387            INT8U ucRet;
   4388            INT32U ulTmp;
   4389            INT8U ucTmp;
   4390            INT8U ucEnterB=0;
   \   00000004   0x2600             MOVS     R6,#+0
   4391            INT8U ucLeaveB=0;	
   \   00000006   0x2700             MOVS     R7,#+0
   4392            INT16U uiSteps=300;
   \   00000008   0xF44F 0x7896      MOV      R8,#+300
   4393            INT8U ucExit=0;
   \   0000000C   0xF05F 0x0900      MOVS     R9,#+0
   4394            
   4395            INT8U ucSMotoFreq=m_ucSMotoFreq[1];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable43_1
   \   00000014   0x7840             LDRB     R0,[R0, #+1]
   \   00000016   0xF88D 0x0001      STRB     R0,[SP, #+1]
   4396            
   4397            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000001E   0x7E00             LDRB     R0,[R0, #+24]
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
   4398            INT8U ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000028   0xF890 0xA019      LDRB     R10,[R0, #+25]
   4399            
   4400            INT8U ucSSelected=m_ucSMotoBit[SMOTO_SECOND];
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable45_2
   \   00000030   0xF890 0xB001      LDRB     R11,[R0, #+1]
   4401                    
   4402            if(EepromReadVerifyBytes(AUTOOUT_MODE_ADDR,&ucTmp,1)){
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x.... 0x....      BL       EepromReadVerifyBytes
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD008             BEQ.N    ??LAntToOut_0
   4403              if(!ucTmp){
   \   00000044   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD104             BNE.N    ??LAntToOut_0
   4404                uiSteps=600;
   \   0000004C   0xF44F 0x7016      MOV      R0,#+600
   \   00000050   0x4680             MOV      R8,R0
   4405                ucExit=1;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x4681             MOV      R9,R0
   4406              }
   4407            }
   4408            
   4409            SMotoStart(ucSMotoFreq,uiSteps,MOTO_FORWARD_MODE,ucSSelected);
   \                     ??LAntToOut_0: (+1)
   \   00000056   0x465B             MOV      R3,R11
   \   00000058   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000060   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000064   0x.... 0x....      BL       SMotoStart
   4410            ucRet=0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x0004             MOVS     R4,R0
   4411            while(!ucRet){
   \                     ??LAntToOut_1: (+1)
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x2C00             CMP      R4,#+0
   \   00000070   0xD13B             BNE.N    ??LAntToOut_2
   4412              ulTmp=GetKeyOutput();    
   \   00000072   0x.... 0x....      BL       GetKeyOutput
   \   00000076   0x0005             MOVS     R5,R0
   4413              if(CheckBit(ulTmp,ucCardPosBBit)){
   \   00000078   0x0028             MOVS     R0,R5
   \   0000007A   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000007E   0x07C0             LSLS     R0,R0,#+31
   \   00000080   0xD501             BPL.N    ??LAntToOut_3
   4414                //??è??a1?????
   4415                ucEnterB=1;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x0006             MOVS     R6,R0
   4416              }    
   4417          		
   4418              if(!CheckBit(ulTmp,ucCardPosBBit) && ucEnterB){
   \                     ??LAntToOut_3: (+1)
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000008C   0x07C0             LSLS     R0,R0,#+31
   \   0000008E   0xD40E             BMI.N    ??LAntToOut_4
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E00             CMP      R6,#+0
   \   00000094   0xD00B             BEQ.N    ??LAntToOut_4
   4419                //à??a?ú2??a1?????
   4420                if(!ucExit){
   \   00000096   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000009A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000009E   0xD104             BNE.N    ??LAntToOut_5
   4421                  MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x4658             MOV      R0,R11
   \   000000A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A6   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4422                }
   4423                ucLeaveB=1;
   \                     ??LAntToOut_5: (+1)
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x0007             MOVS     R7,R0
   4424              }    
   4425          		
   4426              if(ucLeaveB){
   \                     ??LAntToOut_4: (+1)
   \   000000AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B0   0x2F00             CMP      R7,#+0
   \   000000B2   0xD006             BEQ.N    ??LAntToOut_6
   4427                if(!ucExit){
   \   000000B4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B8   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000BC   0xD101             BNE.N    ??LAntToOut_6
   4428                  ucRet=1;
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0x0004             MOVS     R4,R0
   4429                }
   4430              }
   4431              if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??LAntToOut_6: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable43
   \   000000C6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000CA   0x210A             MOVS     R1,#+10
   \   000000CC   0xFB01 0xF10B      MUL      R1,R1,R11
   \   000000D0   0x4408             ADD      R0,R0,R1
   \   000000D2   0x8840             LDRH     R0,[R0, #+2]
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD1C9             BNE.N    ??LAntToOut_1
   4432                if(ucLeaveB){
   \   000000D8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000DA   0x2F00             CMP      R7,#+0
   \   000000DC   0xD002             BEQ.N    ??LAntToOut_7
   4433                  ucRet=1;
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0x0004             MOVS     R4,R0
   \   000000E2   0xE7C3             B.N      ??LAntToOut_1
   4434                }else{
   4435                  ucRet=2;
   \                     ??LAntToOut_7: (+1)
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x0004             MOVS     R4,R0
   \   000000E8   0xE7C0             B.N      ??LAntToOut_1
   4436                }
   4437              }
   4438            }
   4439            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??LAntToOut_2: (+1)
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0x4658             MOV      R0,R11
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4440            
   4441            ulTmp=GetKeyOutput();    
   \   000000F4   0x.... 0x....      BL       GetKeyOutput
   \   000000F8   0x0005             MOVS     R5,R0
   4442            if(ucRet>=2){
   \   000000FA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FC   0x2C02             CMP      R4,#+2
   \   000000FE   0xDB26             BLT.N    ??LAntToOut_8
   4443              if(CheckBit(ulTmp,ucCardPosABit) && !CheckBit(ulTmp,ucCardPosBBit)){
   \   00000100   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000104   0x0029             MOVS     R1,R5
   \   00000106   0x40C1             LSRS     R1,R1,R0
   \   00000108   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD01B             BEQ.N    ??LAntToOut_9
   \   00000112   0x0028             MOVS     R0,R5
   \   00000114   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   00000118   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000011C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD113             BNE.N    ??LAntToOut_9
   4444                if(ucExit){
   \   00000122   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000126   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000012A   0xD00C             BEQ.N    ??LAntToOut_10
   4445                  if(!LAntToOutPreProcess(ulTmp)){
   \   0000012C   0x0028             MOVS     R0,R5
   \   0000012E   0x.... 0x....      BL       LAntToOutPreProcess
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD107             BNE.N    ??LAntToOut_10
   4446                    m_usrGlobalFlag.usrBit.bCardTakeout=1;
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable53
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000140   0x.... 0x....      LDR.W    R1,??DataTable53
   \   00000144   0x7008             STRB     R0,[R1, #+0]
   4447                  }
   4448                }
   4449                return TRUE;
   \                     ??LAntToOut_10: (+1)
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0xE014             B.N      ??LAntToOut_11
   4450              }
   4451              return FALSE;
   \                     ??LAntToOut_9: (+1)
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0xE012             B.N      ??LAntToOut_11
   4452            }
   4453            if(ucExit){
   \                     ??LAntToOut_8: (+1)
   \   0000014E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000152   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000156   0xD00C             BEQ.N    ??LAntToOut_12
   4454              if(!LAntToOutPreProcess(ulTmp)){
   \   00000158   0x0028             MOVS     R0,R5
   \   0000015A   0x.... 0x....      BL       LAntToOutPreProcess
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD107             BNE.N    ??LAntToOut_12
   4455                m_usrGlobalFlag.usrBit.bCardTakeout=1;
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable53
   \   00000166   0x7800             LDRB     R0,[R0, #+0]
   \   00000168   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable53
   \   00000170   0x7008             STRB     R0,[R1, #+0]
   4456              }
   4457            }
   4458            return TRUE;
   \                     ??LAntToOut_12: (+1)
   \   00000172   0x2001             MOVS     R0,#+1
   \                     ??LAntToOut_11: (+1)
   \   00000174   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   4459          }
   4460          
   4461          /*******************************************************************************************************
   4462          ** oˉêy??3?: LAntToOutProcess
   4463          ** 1|?ü?èê?: 
   4464          ** ê? ?? è?:
   4465          **
   4466          ** ê???  3?:
   4467          **
   4468          ** è???±?á?:
   4469          ** μ÷ó??￡?é:
   4470          **
   4471          ** ×÷??  ??: John Tonny
   4472          ** è???  ?ú: 2009?ê11??01è?
   4473          **------------------------------------------------------------------------------------------------------
   4474          ** DT ?? è?:
   4475          ** è???  ?ú:
   4476          **------------------------------------------------------------------------------------------------------
   4477          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4478          INT8U LAntToOutProcess(CardMachineRxData *pcommRx1Data)
   4479          {
   \                     LAntToOutProcess: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   4480            INT8U ucRetrys=0;
   \   00000008   0x2500             MOVS     R5,#+0
   4481            INT8U ucData[16];
   4482            INT8U ucMode;
   4483            INT32U ulTmp;
   4484            
   4485            CPU_SR_ALLOC();
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   4486            
   4487            ucMode=0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0006             MOVS     R6,R0
   4488            if(!pcommRx1Data){
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD101             BNE.N    ??LAntToOutProcess_0
   4489              ucMode=1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x0006             MOVS     R6,R0
   4490            }
   4491          
   4492            ulTmp=GetKeyOutput();
   \                     ??LAntToOutProcess_0: (+1)
   \   0000001A   0x.... 0x....      BL       GetKeyOutput
   \   0000001E   0x0007             MOVS     R7,R0
   4493            if(!LAntToOutPreProcess(ulTmp)){
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0x.... 0x....      BL       LAntToOutPreProcess
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD10F             BNE.N    ??LAntToOutProcess_1
   4494              ucData[0]=SUBTYPE_ERR_NOCARD_ONANT;
   \   0000002A   0x2042             MOVS     R0,#+66
   \   0000002C   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4495              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0xAB02             ADD      R3,SP,#+8
   \   0000003C   0x78A2             LDRB     R2,[R4, #+2]
   \   0000003E   0x7861             LDRB     R1,[R4, #+1]
   \   00000040   0x205E             MOVS     R0,#+94
   \   00000042   0x.... 0x....      BL       Uart0Pack
   4496              return FALSE;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE03A             B.N      ??LAntToOutProcess_2
   4497            }
   4498            
   4499            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??LAntToOutProcess_1: (+1)
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x2D04             CMP      R5,#+4
   \   00000050   0xDA03             BGE.N    ??LAntToOutProcess_3
   4500              if(LAntToOut()){
   \   00000052   0x.... 0x....      BL       LAntToOut
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD0F7             BEQ.N    ??LAntToOutProcess_1
   4501                break;
   4502              }
   4503            }
   4504            
   4505            if(ucRetrys<=MOTO_RETRYS){
   \                     ??LAntToOutProcess_3: (+1)
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x2D04             CMP      R5,#+4
   \   0000005E   0xDA20             BGE.N    ??LAntToOutProcess_4
   4506              //???ˉ?¨ê±?′°?3?±¨?ˉ  
   4507              //TakeoutOvertimeRead();    
   4508              OS_ENTER_CRITICAL();
   \   00000060   0x.... 0x....      BL       CPU_SR_Save
   \   00000064   0x4680             MOV      R8,R0
   \   00000066   0x.... 0x....      BL       CPU_IntDisMeasStart
   4509              g_usrGlobalFlag.usrBit.bLedOutMode=0x01;		
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable53_1
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   00000074   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable53_1
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
   4510              OS_EXIT_CRITICAL();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x.... 0x....      BL       CPU_SR_Restore
   4511              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   00000088   0x0030             MOVS     R0,R6
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0x2300             MOVS     R3,#+0
   \   00000094   0x78A2             LDRB     R2,[R4, #+2]
   \   00000096   0x7861             LDRB     R1,[R4, #+1]
   \   00000098   0x205F             MOVS     R0,#+95
   \   0000009A   0x.... 0x....      BL       Uart0Pack
   4512              return TRUE;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE00E             B.N      ??LAntToOutProcess_2
   4513            }else{
   4514              ucData[0]=SUBTYPE_ERR_ANT2EXIT_FAIL;
   \                     ??LAntToOutProcess_4: (+1)
   \   000000A2   0x2054             MOVS     R0,#+84
   \   000000A4   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4515              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x9001             STR      R0,[SP, #+4]
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x9000             STR      R0,[SP, #+0]
   \   000000B2   0xAB02             ADD      R3,SP,#+8
   \   000000B4   0x78A2             LDRB     R2,[R4, #+2]
   \   000000B6   0x7861             LDRB     R1,[R4, #+1]
   \   000000B8   0x205E             MOVS     R0,#+94
   \   000000BA   0x.... 0x....      BL       Uart0Pack
   4516              return FALSE;
   \   000000BE   0x2000             MOVS     R0,#+0
   \                     ??LAntToOutProcess_2: (+1)
   \   000000C0   0xB006             ADD      SP,SP,#+24
   \   000000C2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4517            }  
   4518          }
   4519          
   4520          /*******************************************************************************************************
   4521          ** oˉêy??3?: LAntToRev
   4522          ** 1|?ü?èê?: 
   4523          ** ê? ?? è?:
   4524          **
   4525          ** ê???  3?:
   4526          **
   4527          ** è???±?á?:
   4528          ** μ÷ó??￡?é:
   4529          **
   4530          ** ×÷??  ??: John Tonny
   4531          ** è???  ?ú: 2009?ê11??01è?
   4532          **------------------------------------------------------------------------------------------------------
   4533          ** DT ?? è?:
   4534          ** è???  ?ú:
   4535          **------------------------------------------------------------------------------------------------------
   4536          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4537          INT8U LAntToRev(void)
   4538          {
   \                     LAntToRev: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   4539            INT8U ucRet;
   4540            INT32U ulTmp;
   4541            INT8U ucEnterD=0;	
   \   00000004   0x2600             MOVS     R6,#+0
   4542            INT8U ucLeaveD=0;	
   \   00000006   0x2700             MOVS     R7,#+0
   4543            INT16U uiSteps=400;
   \   00000008   0xF44F 0x78C8      MOV      R8,#+400
   4544            
   4545            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_SECOND];
   \   0000000C   0x....             LDR.N    R0,??DataTable43_1
   \   0000000E   0xF890 0x9001      LDRB     R9,[R0, #+1]
   4546            
   4547            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000016   0xF890 0xA01B      LDRB     R10,[R0, #+27]
   4548            INT8U ucSSelected=m_ucSMotoBit[SMOTO_SECOND];
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable45_2
   \   0000001E   0xF890 0xB001      LDRB     R11,[R0, #+1]
   4549            
   4550            SMotoStart(ucSMotoFreq,uiSteps,MOTO_BACKWARD_MODE,ucSSelected);
   \   00000022   0x465B             MOV      R3,R11
   \   00000024   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x4641             MOV      R1,R8
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x4648             MOV      R0,R9
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       SMotoStart
   4551            ucRet=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x0004             MOVS     R4,R0
   4552            while(!ucRet){
   \                     ??LAntToRev_0: (+1)
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD127             BNE.N    ??LAntToRev_1
   4553              ulTmp=GetKeyOutput();    
   \   0000003E   0x.... 0x....      BL       GetKeyOutput
   \   00000042   0x0005             MOVS     R5,R0
   4554              if(CheckBit(ulTmp,ucCardPosDBit)){
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   0000004A   0x07C0             LSLS     R0,R0,#+31
   \   0000004C   0xD501             BPL.N    ??LAntToRev_2
   4555                //??è??a1?????
   4556                ucEnterD=1;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x0006             MOVS     R6,R0
   4557              }    
   4558          		
   4559              if(!CheckBit(ulTmp,ucCardPosDBit) && ucEnterD){
   \                     ??LAntToRev_2: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xFA30 0xF00A      LSRS     R0,R0,R10
   \   00000058   0x07C0             LSLS     R0,R0,#+31
   \   0000005A   0xD404             BMI.N    ??LAntToRev_3
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD001             BEQ.N    ??LAntToRev_3
   4560                //à??a?a1?????
   4561                ucLeaveD=1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x0007             MOVS     R7,R0
   4562              }    
   4563          		
   4564              if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??LAntToRev_3: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable52
   \   0000006A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000006E   0x210A             MOVS     R1,#+10
   \   00000070   0xFB01 0xF10B      MUL      R1,R1,R11
   \   00000074   0x4408             ADD      R0,R0,R1
   \   00000076   0x8840             LDRH     R0,[R0, #+2]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD1DD             BNE.N    ??LAntToRev_0
   4565                if(ucLeaveD){
   \   0000007C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007E   0x2F00             CMP      R7,#+0
   \   00000080   0xD002             BEQ.N    ??LAntToRev_4
   4566                  ucRet=1;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x0004             MOVS     R4,R0
   \   00000086   0xE7D7             B.N      ??LAntToRev_0
   4567                }else{      
   4568                  ucRet=2;
   \                     ??LAntToRev_4: (+1)
   \   00000088   0x2002             MOVS     R0,#+2
   \   0000008A   0x0004             MOVS     R4,R0
   \   0000008C   0xE7D4             B.N      ??LAntToRev_0
   4569                }
   4570              }
   4571            }
   4572            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??LAntToRev_1: (+1)
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x4658             MOV      R0,R11
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4573          	
   4574            if(ucRet>=2){
   \   00000098   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009A   0x2C02             CMP      R4,#+2
   \   0000009C   0xDB01             BLT.N    ??LAntToRev_5
   4575              return FALSE;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xE000             B.N      ??LAntToRev_6
   4576            }
   4577            return TRUE;
   \                     ??LAntToRev_5: (+1)
   \   000000A2   0x2001             MOVS     R0,#+1
   \                     ??LAntToRev_6: (+1)
   \   000000A4   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   4578          }
   4579          
   4580          /*******************************************************************************************************
   4581          ** oˉêy??3?: LAntToRevProcess
   4582          ** 1|?ü?èê?: 
   4583          ** ê? ?? è?:
   4584          **
   4585          ** ê???  3?:
   4586          **
   4587          ** è???±?á?:
   4588          ** μ÷ó??￡?é:
   4589          **
   4590          ** ×÷??  ??: John Tonny
   4591          ** è???  ?ú: 2009?ê11??01è?
   4592          **------------------------------------------------------------------------------------------------------
   4593          ** DT ?? è?:
   4594          ** è???  ?ú:
   4595          **------------------------------------------------------------------------------------------------------
   4596          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4597          INT8U LAntToRevProcess(CardMachineRxData *pcommRx1Data)
   4598          {
   \                     LAntToRevProcess: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   4599            INT8U ucRetrys=0;
   \   00000006   0x2500             MOVS     R5,#+0
   4600            INT8U ucData[16];
   4601            INT8U ucMode;
   4602            INT32U ulTmp;
   4603            
   4604            ucMode=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   4605            if(!pcommRx1Data){
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD101             BNE.N    ??LAntToRevProcess_0
   4606              ucMode=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0006             MOVS     R6,R0
   4607            }
   4608          
   4609            ulTmp=GetKeyOutput();
   \                     ??LAntToRevProcess_0: (+1)
   \   00000014   0x.... 0x....      BL       GetKeyOutput
   \   00000018   0x0007             MOVS     R7,R0
   4610            if(!LAntToOutPreProcess(ulTmp)){
   \   0000001A   0x0038             MOVS     R0,R7
   \   0000001C   0x.... 0x....      BL       LAntToOutPreProcess
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD10F             BNE.N    ??LAntToRevProcess_1
   4611              ucData[0]=SUBTYPE_ERR_NOCARD_ONEXIT;
   \   00000024   0x2043             MOVS     R0,#+67
   \   00000026   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4612              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xAB02             ADD      R3,SP,#+8
   \   00000036   0x78A2             LDRB     R2,[R4, #+2]
   \   00000038   0x7861             LDRB     R1,[R4, #+1]
   \   0000003A   0x205E             MOVS     R0,#+94
   \   0000003C   0x.... 0x....      BL       Uart0Pack
   4613              return FALSE;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xE026             B.N      ??LAntToRevProcess_2
   4614            }
   4615            
   4616            while(++ucRetrys<=MOTO_RETRYS){
   \                     ??LAntToRevProcess_1: (+1)
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D04             CMP      R5,#+4
   \   0000004A   0xDA03             BGE.N    ??LAntToRevProcess_3
   4617              if(LAntToRev()){
   \   0000004C   0x.... 0x....      BL       LAntToRev
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0F7             BEQ.N    ??LAntToRevProcess_1
   4618                break;
   4619              }
   4620            }
   4621            
   4622            if(ucRetrys<=MOTO_RETRYS){
   \                     ??LAntToRevProcess_3: (+1)
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x2D04             CMP      R5,#+4
   \   00000058   0xDA0C             BGE.N    ??LAntToRevProcess_4
   4623              Uart0Pack(INFTYPE_CMD_FINISHED,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,0,0,ucMode);
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0x2300             MOVS     R3,#+0
   \   00000066   0x78A2             LDRB     R2,[R4, #+2]
   \   00000068   0x7861             LDRB     R1,[R4, #+1]
   \   0000006A   0x205F             MOVS     R0,#+95
   \   0000006C   0x.... 0x....      BL       Uart0Pack
   4624              return TRUE;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE00E             B.N      ??LAntToRevProcess_2
   4625            }else{
   4626              ucData[0]=SUBTYPE_ERR_ANT2REV_FAIL;
   \                     ??LAntToRevProcess_4: (+1)
   \   00000074   0x205A             MOVS     R0,#+90
   \   00000076   0xF88D 0x0008      STRB     R0,[SP, #+8]
   4627              Uart0Pack(INFTYPE_DEVICE_ERR,pcommRx1Data->ucAddr,pcommRx1Data->ucSeq,ucData,1,ucMode);
   \   0000007A   0x0030             MOVS     R0,R6
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0xAB02             ADD      R3,SP,#+8
   \   00000086   0x78A2             LDRB     R2,[R4, #+2]
   \   00000088   0x7861             LDRB     R1,[R4, #+1]
   \   0000008A   0x205E             MOVS     R0,#+94
   \   0000008C   0x.... 0x....      BL       Uart0Pack
   4628              return FALSE;
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??LAntToRevProcess_2: (+1)
   \   00000092   0xB007             ADD      SP,SP,#+28
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
   4629            }  
   4630          }
   4631          
   4632          /*******************************************************************************************************
   4633          ** oˉêy??3?: LMotoReset
   4634          ** 1|?ü?èê?: 
   4635          ** ê? ?? è?: 
   4636          **
   4637          ** ê???  3?:
   4638          **
   4639          ** è???±?á?:
   4640          ** μ÷ó??￡?é:
   4641          **
   4642          ** ×÷??  ??: John Tonny
   4643          ** è???  ?ú: 2009?ê11??01è?
   4644          **------------------------------------------------------------------------------------------------------
   4645          ** DT ?? è?:
   4646          ** è???  ?ú:
   4647          **------------------------------------------------------------------------------------------------------
   4648          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4649          INT8U  LMotoReset(INT8U ucSelected)
   4650          {
   \                     LMotoReset: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   4651            INT8U ucRet;
   4652            INT16U uiDMotoPwm;
   4653            INT8U ucRetrys=0;
   \   00000008   0x2700             MOVS     R7,#+0
   4654            INT32U ulTmp;
   4655            INT8U ucBoxLoadBit=m_ucKeyBit[BOXLOAD1_BIT+ucSelected*8];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   00000014   0xF890 0x9003      LDRB     R9,[R0, #+3]
   4656          
   4657            //uiDMotoPwm=DMotoPwmGet();
   4658            uiDMotoPwm=m_uiDMotoPwm[ucSelected];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable45_1
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000022   0x0006             MOVS     R6,R0
   4659          
   4660            CPU_SR_ALLOC();
   \   00000024   0xF05F 0x0A00      MOVS     R10,#+0
   4661          
   4662            if(DMotoPosAValid(ucSelected)){
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       DMotoPosAValid
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00A             BEQ.N    ??LMotoReset_0
   4663              ClrBit(m_usrErrorFlags.ucFlag,ucSelected);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable50
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x40A1             LSLS     R1,R1,R4
   \   0000003E   0x4388             BICS     R0,R0,R1
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable50
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   4664              return TRUE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE078             B.N      ??LMotoReset_1
   4665            }
   4666          
   4667            while(++ucRetrys<=4){
   \                     ??LMotoReset_0: (+1)
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \   0000004C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004E   0x2F05             CMP      R7,#+5
   \   00000050   0xDA6A             BGE.N    ??LMotoReset_2
   4668              DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_BACKWARD_MODE,DMOTO_TIME_DEFAULT,ucSelected);
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x2396             MOVS     R3,#+150
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x0031             MOVS     R1,R6
   \   0000005E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000060   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000064   0x.... 0x....      BL       DMotoStart
   4669              ucRet=DMotoPosAWaitEnter(DMOTO_TIME_DEFAULT-10,ucSelected);
   \   00000068   0x0021             MOVS     R1,R4
   \   0000006A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006C   0x208C             MOVS     R0,#+140
   \   0000006E   0x.... 0x....      BL       DMotoPosAWaitEnter
   \   00000072   0x0005             MOVS     R5,R0
   4670              MOTO_DC_DISABLED(ucSelected,NORMAL_MODE);
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x.... 0x....      BL       MOTO_DC_DISABLED
   4671              if(!ucRet){
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0x2D00             CMP      R5,#+0
   \   00000082   0xD146             BNE.N    ??LMotoReset_3
   4672                DMotoStart(DMOTO_FREQ_DEFAULT,uiDMotoPwm,MOTO_FORWARD_MODE,DMOTO_TIME_DEFAULT,ucSelected);
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x2396             MOVS     R3,#+150
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x0031             MOVS     R1,R6
   \   00000090   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000092   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000096   0x.... 0x....      BL       DMotoStart
   4673                DMotoPosBWaitEnter(DMOTO_TIME_DEFAULT-50,ucSelected);
   \   0000009A   0x0021             MOVS     R1,R4
   \   0000009C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009E   0x2064             MOVS     R0,#+100
   \   000000A0   0x.... 0x....      BL       DMotoPosBWaitEnter
   4674                MOTO_DC_DISABLED(ucSelected,NORMAL_MODE);
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x.... 0x....      BL       MOTO_DC_DISABLED
   4675                
   4676                BoxMotoMoveDown(3000,ucSelected);		
   \   000000AE   0x0021             MOVS     R1,R4
   \   000000B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B2   0xF640 0x30B8      MOVW     R0,#+3000
   \   000000B6   0x.... 0x....      BL       BoxMotoMoveDown
   4677                OS_ENTER_CRITICAL();
   \   000000BA   0x.... 0x....      BL       CPU_SR_Save
   \   000000BE   0x4682             MOV      R10,R0
   \   000000C0   0x.... 0x....      BL       CPU_IntDisMeasStart
   4678                g_ucCommTime=200;
   \   000000C4   0x20C8             MOVS     R0,#+200
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable53_2
   \   000000CA   0x7008             STRB     R0,[R1, #+0]
   4679                OS_EXIT_CRITICAL();
   \   000000CC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000D0   0x4650             MOV      R0,R10
   \   000000D2   0x.... 0x....      BL       CPU_SR_Restore
   4680                while(1){
   4681                  OS_ENTER_CRITICAL();
   \                     ??LMotoReset_4: (+1)
   \   000000D6   0x.... 0x....      BL       CPU_SR_Save
   \   000000DA   0x4682             MOV      R10,R0
   \   000000DC   0x.... 0x....      BL       CPU_IntDisMeasStart
   4682                  if(!g_ucCommTime){
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable53_2
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD105             BNE.N    ??LMotoReset_5
   4683                    OS_EXIT_CRITICAL();
   \   000000EA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000EE   0x4650             MOV      R0,R10
   \   000000F0   0x.... 0x....      BL       CPU_SR_Restore
   4684                    break;
   \   000000F4   0xE7A9             B.N      ??LMotoReset_0
   4685                  }else{
   4686                    OS_EXIT_CRITICAL();
   \                     ??LMotoReset_5: (+1)
   \   000000F6   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000FA   0x4650             MOV      R0,R10
   \   000000FC   0x.... 0x....      BL       CPU_SR_Restore
   4687                  }
   4688                  ulTmp=GetKeyOutput();
   \   00000100   0x.... 0x....      BL       GetKeyOutput
   \   00000104   0x4680             MOV      R8,R0
   4689                  if(!CheckBit(ulTmp,ucBoxLoadBit)){
   \   00000106   0x4640             MOV      R0,R8
   \   00000108   0xFA30 0xF009      LSRS     R0,R0,R9
   \   0000010C   0x07C0             LSLS     R0,R0,#+31
   \   0000010E   0xD4E2             BMI.N    ??LMotoReset_4
   4690                    break;
   \   00000110   0xE79B             B.N      ??LMotoReset_0
   4691                  }
   4692                }
   4693              }else{
   4694                ClrBit(m_usrErrorFlags.ucFlag,ucSelected);
   \                     ??LMotoReset_3: (+1)
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable50
   \   00000116   0x7800             LDRB     R0,[R0, #+0]
   \   00000118   0x2101             MOVS     R1,#+1
   \   0000011A   0x40A1             LSLS     R1,R1,R4
   \   0000011C   0x4388             BICS     R0,R0,R1
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable50
   \   00000122   0x7008             STRB     R0,[R1, #+0]
   4695                return TRUE;
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0xE009             B.N      ??LMotoReset_1
   4696              }			
   4697            }
   4698          
   4699            SetBit(m_usrErrorFlags.ucFlag,ucSelected);
   \                     ??LMotoReset_2: (+1)
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable50
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x2101             MOVS     R1,#+1
   \   00000130   0x40A1             LSLS     R1,R1,R4
   \   00000132   0x4308             ORRS     R0,R1,R0
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable50
   \   00000138   0x7008             STRB     R0,[R1, #+0]
   4700            return FALSE;
   \   0000013A   0x2000             MOVS     R0,#+0
   \                     ??LMotoReset_1: (+1)
   \   0000013C   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   4701          }
   4702           
   4703          
   4704          /********************************************************************************************************
   4705          ** oˉêy??3?: PlugInClear
   4706          ** 1|?ü?èê?:
   4707          ** ê? ?? è?:
   4708          **
   4709          ** ê???  3?:
   4710          **
   4711          ** è???±?á?:
   4712          ** μ÷ó??￡?é:
   4713          **
   4714          ** ×÷??  ??: John Tonny
   4715          ** è???  ?ú: 2005?ê05??01è?
   4716          **------------------------------------------------------------------------------------------------------
   4717          ** DT ?? è?:
   4718          ** è???  ?ú:
   4719          **------------------------------------------------------------------------------------------------------
   4720          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4721          INT8U PlugInClear(INT16U uiCount)
   4722          {
   \                     PlugInClear: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4723            INT32U ulTmp;
   4724            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_FIRST];
   \   00000006   0x....             LDR.N    R0,??DataTable43_1
   \   00000008   0x7806             LDRB     R6,[R0, #+0]
   4725          
   4726            INT8U ucSSelected=m_ucSMotoBit[SMOTO_FIRST];
   \   0000000A   0x....             LDR.N    R0,??DataTable45_2
   \   0000000C   0x7807             LDRB     R7,[R0, #+0]
   4727          
   4728            CPU_SR_ALLOC();
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
   4729          
   4730            OS_ENTER_CRITICAL();
   \   00000012   0x.... 0x....      BL       CPU_SR_Save
   \   00000016   0x4680             MOV      R8,R0
   \   00000018   0x.... 0x....      BL       CPU_IntDisMeasStart
   4731            /*if(!CheckBit(g_usrGetKey.ulKeyOutput,CARD_POSA_BIT)){
   4732            OS_EXIT_CRITICAL();
   4733            return TRUE;
   4734            }*/
   4735          
   4736            g_ucCommTime=20;
   \   0000001C   0x2014             MOVS     R0,#+20
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable53_2
   \   00000022   0x7008             STRB     R0,[R1, #+0]
   4737            OS_EXIT_CRITICAL();
   \   00000024   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000028   0x4640             MOV      R0,R8
   \   0000002A   0x.... 0x....      BL       CPU_SR_Restore
   4738            SMotoStart(ucSMotoFreq,uiCount,MOTO_BACKWARD_MODE,ucSSelected);
   \   0000002E   0x003B             MOVS     R3,R7
   \   00000030   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0x0021             MOVS     R1,R4
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       SMotoStart
   4739            while(1){
   4740              ulTmp=GetKeyOutput();    
   \                     ??PlugInClear_0: (+1)
   \   00000040   0x.... 0x....      BL       GetKeyOutput
   \   00000044   0x0005             MOVS     R5,R0
   4741              if(!CheckBit(ulTmp,CARD_POSA_BIT)){
   \   00000046   0x01E8             LSLS     R0,R5,#+7
   \   00000048   0xD406             BMI.N    ??PlugInClear_1
   4742                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x0038             MOVS     R0,R7
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4743                return TRUE;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE01F             B.N      ??PlugInClear_2
   4744              }
   4745              OS_ENTER_CRITICAL();
   \                     ??PlugInClear_1: (+1)
   \   00000058   0x.... 0x....      BL       CPU_SR_Save
   \   0000005C   0x4680             MOV      R8,R0
   \   0000005E   0x.... 0x....      BL       CPU_IntDisMeasStart
   4746              if(!g_ucCommTime){
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable53_2
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD10C             BNE.N    ??PlugInClear_3
   4747                OS_EXIT_CRITICAL();
   \   0000006C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000070   0x4640             MOV      R0,R8
   \   00000072   0x.... 0x....      BL       CPU_SR_Restore
   4748                break;
   4749              }else{
   4750                OS_EXIT_CRITICAL();
   4751              }
   4752            }
   4753            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);	
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x0038             MOVS     R0,R7
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4754            if(!CheckBit(ulTmp,CARD_POSC_BIT)){
   \   00000080   0x0168             LSLS     R0,R5,#+5
   \   00000082   0xD408             BMI.N    ??PlugInClear_4
   \   00000084   0xE005             B.N      ??PlugInClear_5
   \                     ??PlugInClear_3: (+1)
   \   00000086   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000008A   0x4640             MOV      R0,R8
   \   0000008C   0x.... 0x....      BL       CPU_SR_Restore
   \   00000090   0xE7D6             B.N      ??PlugInClear_0
   4755              return TRUE;
   \                     ??PlugInClear_5: (+1)
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE000             B.N      ??PlugInClear_2
   4756            }
   4757            return FALSE;
   \                     ??PlugInClear_4: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??PlugInClear_2: (+1)
   \   00000098   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4758          }
   4759          
   4760          /*******************************************************************************************************
   4761          ** oˉêy??3?: AntToOutPreProcess
   4762          ** 1|?ü?èê?: 
   4763          ** ê? ?? è?: 
   4764          **
   4765          ** ê???  3?:
   4766          **
   4767          ** è???±?á?:
   4768          ** μ÷ó??￡?é:
   4769          **
   4770          ** ×÷??  ??: John Tonny
   4771          ** è???  ?ú: 2009?ê11??01è?
   4772          **------------------------------------------------------------------------------------------------------
   4773          ** DT ?? è?:
   4774          ** è???  ?ú:
   4775          **------------------------------------------------------------------------------------------------------
   4776          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4777          INT8U AntToOutPreProcess(INT32U ulState)
   4778          {
   \                     AntToOutPreProcess: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
   4779            INT8U ucTmp;
   4780          
   4781            ucTmp=((ulState>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | ((ulState>>m_ucKeyBit[CARD_POSB_BIT]) & 0x06) ;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000008   0x7E00             LDRB     R0,[R0, #+24]
   \   0000000A   0x000B             MOVS     R3,R1
   \   0000000C   0x40C3             LSRS     R3,R3,R0
   \   0000000E   0xF013 0x0001      ANDS     R0,R3,#0x1
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable53_3
   \   00000016   0x7E5B             LDRB     R3,[R3, #+25]
   \   00000018   0x000C             MOVS     R4,R1
   \   0000001A   0x40DC             LSRS     R4,R4,R3
   \   0000001C   0xF014 0x0306      ANDS     R3,R4,#0x6
   \   00000020   0x4318             ORRS     R0,R3,R0
   \   00000022   0x0002             MOVS     R2,R0
   4782            switch(ucTmp){
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x0010             MOVS     R0,R2
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD009             BEQ.N    ??AntToOutPreProcess_0
   \   0000002C   0x1E80             SUBS     R0,R0,#+2
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD908             BLS.N    ??AntToOutPreProcess_1
   \   00000032   0x1EC0             SUBS     R0,R0,#+3
   \   00000034   0xD00A             BEQ.N    ??AntToOutPreProcess_2
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \   00000038   0xD004             BEQ.N    ??AntToOutPreProcess_1
   \   0000003A   0x1E40             SUBS     R0,R0,#+1
   \   0000003C   0xD004             BEQ.N    ??AntToOutPreProcess_3
   \   0000003E   0xE007             B.N      ??AntToOutPreProcess_4
   4783              case 0:
   4784                return 0;															//?T?¨
   \                     ??AntToOutPreProcess_0: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xE006             B.N      ??AntToOutPreProcess_5
   4785              case 3:
   4786              case 2:
   4787              case 6:
   4788              case 4:
   4789                return 1;															//ò????¨
   \                     ??AntToOutPreProcess_1: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE004             B.N      ??AntToOutPreProcess_5
   4790              case 7:																	
   4791                return 2;															//á????¨￡?ò????ú???¨?ú￡?ò????úí¨μà?D
   \                     ??AntToOutPreProcess_3: (+1)
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0xE002             B.N      ??AntToOutPreProcess_5
   4792              case 5:																														
   4793                return 3;															//á????¨￡?ò????ú???¨?ú￡?ò????ú???¨?D?ú	
   \                     ??AntToOutPreProcess_2: (+1)
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0xE000             B.N      ??AntToOutPreProcess_5
   4794              default:
   4795                return 4;
   \                     ??AntToOutPreProcess_4: (+1)
   \   00000050   0x2004             MOVS     R0,#+4
   \                     ??AntToOutPreProcess_5: (+1)
   \   00000052   0xBC10             POP      {R4}
   \   00000054   0x4770             BX       LR               ;; return
   4796            }
   4797          }
   4798          
   4799          
   4800          /*******************************************************************************************************
   4801          ** oˉêy??3?: LBoxToAntPreProcess
   4802          ** 1|?ü?èê?: 
   4803          ** ê? ?? è?: 
   4804          **
   4805          ** ê???  3?:
   4806          **
   4807          ** è???±?á?:
   4808          ** μ÷ó??￡?é:
   4809          **
   4810          ** ×÷??  ??: John Tonny
   4811          ** è???  ?ú: 2009?ê11??01è?
   4812          **------------------------------------------------------------------------------------------------------
   4813          ** DT ?? è?:
   4814          ** è???  ?ú:
   4815          **------------------------------------------------------------------------------------------------------
   4816          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4817          INT8U LBoxToAntPreProcess(void)
   4818          {
   \                     LBoxToAntPreProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   4819            OS_ERR os_err;
   4820            
   4821            INT8U ucRet;
   4822            INT8U ucTmp;	
   4823            INT32U ulTmp;
   4824            INT8U ucEnterC=0;
   \   00000006   0x2600             MOVS     R6,#+0
   4825            INT8U ucLeaveC=0;
   \   00000008   0x2700             MOVS     R7,#+0
   4826            INT8U ucEnterA=0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   4827            INT8U ucLeaveA=0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   4828            INT16U uiSteps=400;
   \   00000012   0xF44F 0x70C8      MOV      R0,#+400
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   4829          
   4830            INT8U ucSMotoFreq=m_ucSMotoFreq[SMOTO_SECOND];
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable53_4
   \   0000001E   0x7840             LDRB     R0,[R0, #+1]
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
   4831            INT8U ucSSelected=m_ucSMotoBit[SMOTO_SECOND];
   \   00000024   0x....             LDR.N    R0,??DataTable45_2
   \   00000026   0xF890 0xA001      LDRB     R10,[R0, #+1]
   4832          
   4833            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   0000002E   0x7E00             LDRB     R0,[R0, #+24]
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
   4834            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000038   0xF890 0xB01A      LDRB     R11,[R0, #+26]
   4835            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000040   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000042   0xF88D 0x0003      STRB     R0,[SP, #+3]
   4836          
   4837            ulTmp=GetKeyOutput();
   \   00000046   0x.... 0x....      BL       GetKeyOutput
   \   0000004A   0x0005             MOVS     R5,R0
   4838            ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x07) | (((ulTmp>>m_ucKeyBit[CARD_POSD_BIT]) & 0x01)<<3);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000050   0x7E00             LDRB     R0,[R0, #+24]
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0x40C1             LSRS     R1,R1,R0
   \   00000056   0xF011 0x0007      ANDS     R0,R1,#0x7
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable53_3
   \   0000005E   0x7EC9             LDRB     R1,[R1, #+27]
   \   00000060   0x002A             MOVS     R2,R5
   \   00000062   0x40CA             LSRS     R2,R2,R1
   \   00000064   0x00D1             LSLS     R1,R2,#+3
   \   00000066   0xF011 0x0108      ANDS     R1,R1,#0x8
   \   0000006A   0x4308             ORRS     R0,R1,R0
   \   0000006C   0xF88D 0x0001      STRB     R0,[SP, #+1]
   4839            if(!ucTmp){
   \   00000070   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD101             BNE.N    ??LBoxToAntPreProcess_0
   4840              return 0;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE0C4             B.N      ??LBoxToAntPreProcess_1
   4841            }
   4842          
   4843            if(CheckBit(ulTmp,ucCardPosABit) && CheckBit(ulTmp,ucCardPosCBit)){
   \                     ??LBoxToAntPreProcess_0: (+1)
   \   0000007C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0x40C1             LSRS     R1,R1,R0
   \   00000084   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD009             BEQ.N    ??LBoxToAntPreProcess_2
   \   0000008E   0x0028             MOVS     R0,R5
   \   00000090   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   00000094   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD001             BEQ.N    ??LBoxToAntPreProcess_2
   4844              return 1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE0B1             B.N      ??LBoxToAntPreProcess_1
   4845            }	
   4846          
   4847            if(ucTmp>=1 && ucTmp<=3){
   \                     ??LBoxToAntPreProcess_2: (+1)
   \   000000A2   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD047             BEQ.N    ??LBoxToAntPreProcess_3
   \   000000AA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000AE   0x2804             CMP      R0,#+4
   \   000000B0   0xDA43             BGE.N    ??LBoxToAntPreProcess_3
   4848              SMotoStart(ucSMotoFreq,uiSteps,MOTO_BACKWARD_MODE,ucSSelected);
   \   000000B2   0x4653             MOV      R3,R10
   \   000000B4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000BC   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000000C0   0x.... 0x....      BL       SMotoStart
   4849              ucRet=0;
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x0004             MOVS     R4,R0
   4850              while(!ucRet){
   \                     ??LBoxToAntPreProcess_4: (+1)
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x2C00             CMP      R4,#+0
   \   000000CC   0xD12A             BNE.N    ??LBoxToAntPreProcess_5
   4851                ulTmp=GetKeyOutput();    
   \   000000CE   0x.... 0x....      BL       GetKeyOutput
   \   000000D2   0x0005             MOVS     R5,R0
   4852                if(CheckBit(ulTmp,ucCardPosCBit)){
   \   000000D4   0x0028             MOVS     R0,R5
   \   000000D6   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   000000DA   0x07C0             LSLS     R0,R0,#+31
   \   000000DC   0xD50D             BPL.N    ??LBoxToAntPreProcess_6
   4853                  //??è??a1?????
   4854                  OSTimeDly(10,OS_OPT_TIME_DLY, &os_err) ;         
   \   000000DE   0xF10D 0x0206      ADD      R2,SP,#+6
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x200A             MOVS     R0,#+10
   \   000000E6   0x.... 0x....      BL       OSTimeDly
   4855                  MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0x4650             MOV      R0,R10
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4856                  ucRet=1;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x0004             MOVS     R4,R0
   4857                  break;
   \   000000F8   0xE014             B.N      ??LBoxToAntPreProcess_5
   4858                }    
   4859                
   4860                if(CheckBit(ulTmp,ucCardPosDBit)){
   \                     ??LBoxToAntPreProcess_6: (+1)
   \   000000FA   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   000000FE   0x0029             MOVS     R1,R5
   \   00000100   0x40C1             LSRS     R1,R1,R0
   \   00000102   0x07C8             LSLS     R0,R1,#+31
   \   00000104   0xD506             BPL.N    ??LBoxToAntPreProcess_7
   4861                  //??è??a1?????
   4862                  MOTO_STEP_DISABLED(SMOTO_SECOND,NORMAL_MODE);
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4863                  ucRet=3;
   \   0000010E   0x2003             MOVS     R0,#+3
   \   00000110   0x0004             MOVS     R4,R0
   4864                  break;
   \   00000112   0xE007             B.N      ??LBoxToAntPreProcess_5
   4865                }    
   4866                
   4867                if(!g_usrSMoto[1].uiCounts){
   \                     ??LBoxToAntPreProcess_7: (+1)
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable52
   \   00000118   0x8980             LDRH     R0,[R0, #+12]
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD1D4             BNE.N    ??LBoxToAntPreProcess_4
   4868                  ucRet=2;
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0x0004             MOVS     R4,R0
   \   00000122   0xE7D1             B.N      ??LBoxToAntPreProcess_4
   4869                }
   4870              }
   4871              MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??LBoxToAntPreProcess_5: (+1)
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x4650             MOV      R0,R10
   \   00000128   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012A   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4872          
   4873              if(ucRet<3){
   \   0000012E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000130   0x2C03             CMP      R4,#+3
   \   00000132   0xDA02             BGE.N    ??LBoxToAntPreProcess_3
   4874                return ucRet;
   \   00000134   0x0020             MOVS     R0,R4
   \   00000136   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000138   0xE065             B.N      ??LBoxToAntPreProcess_1
   4875              }
   4876            }
   4877          
   4878            ucLeaveC=0;
   \                     ??LBoxToAntPreProcess_3: (+1)
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x0007             MOVS     R7,R0
   4879            ucEnterC=0;
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x0006             MOVS     R6,R0
   4880            ucEnterA=0;
   \   00000142   0x2000             MOVS     R0,#+0
   \   00000144   0x4680             MOV      R8,R0
   4881            if(!CheckBit(ulTmp,ucCardPosABit)){
   \   00000146   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000014A   0x0029             MOVS     R1,R5
   \   0000014C   0x40C1             LSRS     R1,R1,R0
   \   0000014E   0x07C8             LSLS     R0,R1,#+31
   \   00000150   0xD401             BMI.N    ??LBoxToAntPreProcess_8
   4882              ucLeaveA=1;
   \   00000152   0x2001             MOVS     R0,#+1
   \   00000154   0x4681             MOV      R9,R0
   4883            }
   4884          
   4885            SMotoStart(ucSMotoFreq,uiSteps,MOTO_FORWARD_MODE,ucSSelected);
   \                     ??LBoxToAntPreProcess_8: (+1)
   \   00000156   0x4653             MOV      R3,R10
   \   00000158   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000015A   0x2200             MOVS     R2,#+0
   \   0000015C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000160   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000164   0x.... 0x....      BL       SMotoStart
   4886            ucRet=0;
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x0004             MOVS     R4,R0
   4887            while(!ucRet){
   \                     ??LBoxToAntPreProcess_9: (+1)
   \   0000016C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016E   0x2C00             CMP      R4,#+0
   \   00000170   0xD142             BNE.N    ??LBoxToAntPreProcess_10
   4888              ulTmp=GetKeyOutput();    
   \   00000172   0x.... 0x....      BL       GetKeyOutput
   \   00000176   0x0005             MOVS     R5,R0
   4889              if(CheckBit(ulTmp,ucCardPosCBit)){
   \   00000178   0x0028             MOVS     R0,R5
   \   0000017A   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   0000017E   0x07C0             LSLS     R0,R0,#+31
   \   00000180   0xD501             BPL.N    ??LBoxToAntPreProcess_11
   4890                //??è??a1?????
   4891                ucEnterC=1;
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x0006             MOVS     R6,R0
   4892              }    
   4893              if(!CheckBit(ulTmp,ucCardPosCBit) && ucEnterC){
   \                     ??LBoxToAntPreProcess_11: (+1)
   \   00000186   0x0028             MOVS     R0,R5
   \   00000188   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   0000018C   0x07C0             LSLS     R0,R0,#+31
   \   0000018E   0xD409             BMI.N    ??LBoxToAntPreProcess_12
   \   00000190   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000192   0x2E00             CMP      R6,#+0
   \   00000194   0xD006             BEQ.N    ??LBoxToAntPreProcess_12
   4894                //à??a?a1?????
   4895                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x4650             MOV      R0,R10
   \   0000019A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019C   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4896                ucLeaveC=1;
   \   000001A0   0x2001             MOVS     R0,#+1
   \   000001A2   0x0007             MOVS     R7,R0
   4897              }    
   4898              if(CheckBit(ulTmp,ucCardPosABit) && ucLeaveA){
   \                     ??LBoxToAntPreProcess_12: (+1)
   \   000001A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001A8   0x0029             MOVS     R1,R5
   \   000001AA   0x40C1             LSRS     R1,R1,R0
   \   000001AC   0x07C8             LSLS     R0,R1,#+31
   \   000001AE   0xD50A             BPL.N    ??LBoxToAntPreProcess_13
   \   000001B0   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001B4   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001B8   0xD005             BEQ.N    ??LBoxToAntPreProcess_13
   4899                //??è??a1?????
   4900                MOTO_STEP_DISABLED(SMOTO_SECOND,NORMAL_MODE);
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x2001             MOVS     R0,#+1
   \   000001BE   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4901                ucEnterA=1;
   \   000001C2   0x2001             MOVS     R0,#+1
   \   000001C4   0x4680             MOV      R8,R0
   4902              }    
   4903          
   4904              if(ucLeaveC || ucEnterA){
   \                     ??LBoxToAntPreProcess_13: (+1)
   \   000001C6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001C8   0x2F00             CMP      R7,#+0
   \   000001CA   0xD104             BNE.N    ??LBoxToAntPreProcess_14
   \   000001CC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001D0   0xF1B8 0x0F00      CMP      R8,#+0
   \   000001D4   0xD002             BEQ.N    ??LBoxToAntPreProcess_15
   4905                ucRet=1;
   \                     ??LBoxToAntPreProcess_14: (+1)
   \   000001D6   0x2001             MOVS     R0,#+1
   \   000001D8   0x0004             MOVS     R4,R0
   \   000001DA   0xE7C7             B.N      ??LBoxToAntPreProcess_9
   4906              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??LBoxToAntPreProcess_15: (+1)
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable52
   \   000001E0   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001E4   0x210A             MOVS     R1,#+10
   \   000001E6   0xFB01 0xF10A      MUL      R1,R1,R10
   \   000001EA   0x4408             ADD      R0,R0,R1
   \   000001EC   0x8840             LDRH     R0,[R0, #+2]
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD1BC             BNE.N    ??LBoxToAntPreProcess_9
   4907                ucRet=2;
   \   000001F2   0x2002             MOVS     R0,#+2
   \   000001F4   0x0004             MOVS     R4,R0
   \   000001F6   0xE7B9             B.N      ??LBoxToAntPreProcess_9
   4908              }
   4909            }
   4910            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??LBoxToAntPreProcess_10: (+1)
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0x4650             MOV      R0,R10
   \   000001FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FE   0x.... 0x....      BL       MOTO_STEP_DISABLED
   4911          
   4912            return ucRet;
   \   00000202   0x0020             MOVS     R0,R4
   \   00000204   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LBoxToAntPreProcess_1: (+1)
   \   00000206   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   4913          }
   4914          
   4915          /*******************************************************************************************************
   4916          ** oˉêy??3?: AntToBoxPreProcess
   4917          ** 1|?ü?èê?: 
   4918          ** ê? ?? è?: 
   4919          **
   4920          ** ê???  3?:
   4921          **
   4922          ** è???±?á?:
   4923          ** μ÷ó??￡?é:
   4924          **
   4925          ** ×÷??  ??: John Tonny
   4926          ** è???  ?ú: 2009?ê11??01è?
   4927          **------------------------------------------------------------------------------------------------------
   4928          ** DT ?? è?:
   4929          ** è???  ?ú:
   4930          **------------------------------------------------------------------------------------------------------
   4931          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4932          INT8U AntToBoxPreProcess(INT32U ulState)
   4933          { 
   \                     AntToBoxPreProcess: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
   4934          	INT8U ucTmp;
   4935          	ucTmp=((ulState>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulState>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1) ;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000008   0x7E00             LDRB     R0,[R0, #+24]
   \   0000000A   0x000B             MOVS     R3,R1
   \   0000000C   0x40C3             LSRS     R3,R3,R0
   \   0000000E   0xF013 0x0001      ANDS     R0,R3,#0x1
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable53_3
   \   00000016   0x7E9B             LDRB     R3,[R3, #+26]
   \   00000018   0x000C             MOVS     R4,R1
   \   0000001A   0x40DC             LSRS     R4,R4,R3
   \   0000001C   0x0063             LSLS     R3,R4,#+1
   \   0000001E   0xF013 0x0306      ANDS     R3,R3,#0x6
   \   00000022   0x4318             ORRS     R0,R3,R0
   \   00000024   0x0002             MOVS     R2,R0
   4936          	switch(ucTmp){
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x0010             MOVS     R0,R2
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD009             BEQ.N    ??AntToBoxPreProcess_0
   \   0000002E   0x1E80             SUBS     R0,R0,#+2
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD908             BLS.N    ??AntToBoxPreProcess_1
   \   00000034   0x1EC0             SUBS     R0,R0,#+3
   \   00000036   0xD00A             BEQ.N    ??AntToBoxPreProcess_2
   \   00000038   0x1E40             SUBS     R0,R0,#+1
   \   0000003A   0xD004             BEQ.N    ??AntToBoxPreProcess_1
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0xD004             BEQ.N    ??AntToBoxPreProcess_3
   \   00000040   0xE007             B.N      ??AntToBoxPreProcess_4
   4937          		case 0:
   4938          			return 0;															//?T?¨
   \                     ??AntToBoxPreProcess_0: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE006             B.N      ??AntToBoxPreProcess_5
   4939          		case 3:
   4940          		case 2:
   4941          		case 6:
   4942          		case 4:
   4943          			return 1;															//ò????¨
   \                     ??AntToBoxPreProcess_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE004             B.N      ??AntToBoxPreProcess_5
   4944          		case 7:																	
   4945          			return 2;															//á????¨￡?ò????ú???¨?ú￡?ò????úí¨μà?D
   \                     ??AntToBoxPreProcess_3: (+1)
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0xE002             B.N      ??AntToBoxPreProcess_5
   4946          		case 5:																														
   4947          			return 3;															//á????¨￡?ò????ú???¨?ú￡?ò????ú???¨?D?ú	
   \                     ??AntToBoxPreProcess_2: (+1)
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0xE000             B.N      ??AntToBoxPreProcess_5
   4948          		default:
   4949          			return 4;
   \                     ??AntToBoxPreProcess_4: (+1)
   \   00000052   0x2004             MOVS     R0,#+4
   \                     ??AntToBoxPreProcess_5: (+1)
   \   00000054   0xBC10             POP      {R4}
   \   00000056   0x4770             BX       LR               ;; return
   4950          	}
   4951          }
   4952          
   4953          /*******************************************************************************************************
   4954          ** oˉêy??3?: BoxToAntPreProcess
   4955          ** 1|?ü?èê?: 
   4956          ** ê? ?? è?: 
   4957          **
   4958          ** ê???  3?:
   4959          **
   4960          ** è???±?á?:
   4961          ** μ÷ó??￡?é:
   4962          **
   4963          ** ×÷??  ??: John Tonny
   4964          ** è???  ?ú: 2009?ê11??01è?
   4965          **------------------------------------------------------------------------------------------------------
   4966          ** DT ?? è?:
   4967          ** è???  ?ú:
   4968          **------------------------------------------------------------------------------------------------------
   4969          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4970          INT8U BoxToAntPreProcess(void)
   4971          {
   \                     BoxToAntPreProcess: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   4972            OS_ERR os_err;
   4973            
   4974            INT8U ucRet;
   4975            INT8U ucTmp;	
   4976            INT32U ulTmp;
   4977            INT8U ucEnterC=0;
   \   00000006   0x2600             MOVS     R6,#+0
   4978            INT8U ucLeaveC=0;
   \   00000008   0x2700             MOVS     R7,#+0
   4979            INT8U ucEnterA=0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   4980            INT16U uiSteps=400;
   \   0000000E   0xF44F 0x79C8      MOV      R9,#+400
   4981            
   4982            INT8U ucSSelected=SMOTO_FIRST;
   \   00000012   0xF05F 0x0A00      MOVS     R10,#+0
   4983            INT8U ucSMotoFreq=m_ucSMotoFreq[ucSSelected];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable53_4
   \   0000001A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000001E   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   00000022   0xF88D 0x0002      STRB     R0,[SP, #+2]
   4984          
   4985            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   0000002A   0x7E00             LDRB     R0,[R0, #+24]
   \   0000002C   0xF88D 0x0001      STRB     R0,[SP, #+1]
   4986            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000034   0xF890 0xB01A      LDRB     R11,[R0, #+26]
   4987            
   4988            ulTmp=GetKeyOutput();
   \   00000038   0x.... 0x....      BL       GetKeyOutput
   \   0000003C   0x0005             MOVS     R5,R0
   4989            ucTmp=((ulTmp>>m_ucKeyBit[CARD_POSA_BIT]) & 0x01) | (((ulTmp>>m_ucKeyBit[CARD_POSC_BIT]) & 0x03)<<1) ;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000042   0x7E00             LDRB     R0,[R0, #+24]
   \   00000044   0x0029             MOVS     R1,R5
   \   00000046   0x40C1             LSRS     R1,R1,R0
   \   00000048   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable53_3
   \   00000050   0x7E89             LDRB     R1,[R1, #+26]
   \   00000052   0x002A             MOVS     R2,R5
   \   00000054   0x40CA             LSRS     R2,R2,R1
   \   00000056   0x0051             LSLS     R1,R2,#+1
   \   00000058   0xF011 0x0106      ANDS     R1,R1,#0x6
   \   0000005C   0x4308             ORRS     R0,R1,R0
   \   0000005E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   4990            if(!ucTmp){
   \   00000062   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD101             BNE.N    ??BoxToAntPreProcess_0
   4991              return 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE083             B.N      ??BoxToAntPreProcess_1
   4992            }
   4993            
   4994            if(ucTmp==1){
   \                     ??BoxToAntPreProcess_0: (+1)
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD101             BNE.N    ??BoxToAntPreProcess_2
   4995              return 3;
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0xE07D             B.N      ??BoxToAntPreProcess_1
   4996            }
   4997            
   4998            if(ucTmp==7){
   \                     ??BoxToAntPreProcess_2: (+1)
   \   0000007A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007E   0x2807             CMP      R0,#+7
   \   00000080   0xD101             BNE.N    ??BoxToAntPreProcess_3
   4999              return 4;
   \   00000082   0x2004             MOVS     R0,#+4
   \   00000084   0xE077             B.N      ??BoxToAntPreProcess_1
   5000            }
   5001            
   5002            if(CheckBit(ulTmp,ucCardPosABit) && CheckBit(ulTmp,ucCardPosCBit)){
   \                     ??BoxToAntPreProcess_3: (+1)
   \   00000086   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000008A   0x0029             MOVS     R1,R5
   \   0000008C   0x40C1             LSRS     R1,R1,R0
   \   0000008E   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD009             BEQ.N    ??BoxToAntPreProcess_4
   \   00000098   0x0028             MOVS     R0,R5
   \   0000009A   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   0000009E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD001             BEQ.N    ??BoxToAntPreProcess_4
   5003              return 1;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE064             B.N      ??BoxToAntPreProcess_1
   5004            }	
   5005            
   5006            if(CheckBit(ulTmp,m_ucKeyBit[CARD_POSA_BIT])){
   \                     ??BoxToAntPreProcess_4: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   000000B0   0x7E00             LDRB     R0,[R0, #+24]
   \   000000B2   0x0029             MOVS     R1,R5
   \   000000B4   0x40C1             LSRS     R1,R1,R0
   \   000000B6   0x07C8             LSLS     R0,R1,#+31
   \   000000B8   0xD501             BPL.N    ??BoxToAntPreProcess_5
   5007              ucEnterA=1;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x4680             MOV      R8,R0
   5008            }    
   5009            
   5010            SMotoStart(ucSMotoFreq,uiSteps,MOTO_BACKWARD_MODE,ucSSelected);
   \                     ??BoxToAntPreProcess_5: (+1)
   \   000000BE   0x4653             MOV      R3,R10
   \   000000C0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000C2   0x2201             MOVS     R2,#+1
   \   000000C4   0x4649             MOV      R1,R9
   \   000000C6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C8   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000000CC   0x.... 0x....      BL       SMotoStart
   5011            ucRet=0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x0004             MOVS     R4,R0
   5012            while(!ucRet){
   \                     ??BoxToAntPreProcess_6: (+1)
   \   000000D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D6   0x2C00             CMP      R4,#+0
   \   000000D8   0xD146             BNE.N    ??BoxToAntPreProcess_7
   5013              OSTimeDly(30,OS_OPT_TIME_DLY, &os_err) ;         
   \   000000DA   0xAA01             ADD      R2,SP,#+4
   \   000000DC   0x2100             MOVS     R1,#+0
   \   000000DE   0x201E             MOVS     R0,#+30
   \   000000E0   0x.... 0x....      BL       OSTimeDly
   5014              ulTmp=GetKeyOutput();    
   \   000000E4   0x.... 0x....      BL       GetKeyOutput
   \   000000E8   0x0005             MOVS     R5,R0
   5015              if(CheckBit(ulTmp,ucCardPosCBit)){
   \   000000EA   0x0028             MOVS     R0,R5
   \   000000EC   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   000000F0   0x07C0             LSLS     R0,R0,#+31
   \   000000F2   0xD501             BPL.N    ??BoxToAntPreProcess_8
   5016                //ò?μ??ú2??a1?????
   5017                ucEnterC=1;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x0006             MOVS     R6,R0
   5018                }        
   5019          
   5020              if(CheckBit(ulTmp,ucCardPosABit) && !ucEnterA){
   \                     ??BoxToAntPreProcess_8: (+1)
   \   000000F8   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FC   0x0029             MOVS     R1,R5
   \   000000FE   0x40C1             LSRS     R1,R1,R0
   \   00000100   0x07C8             LSLS     R0,R1,#+31
   \   00000102   0xD50B             BPL.N    ??BoxToAntPreProcess_9
   \   00000104   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000108   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000010C   0xD106             BNE.N    ??BoxToAntPreProcess_9
   5021                //ò?μ?ía2??a1?????
   5022                MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \   0000010E   0x2100             MOVS     R1,#+0
   \   00000110   0x4650             MOV      R0,R10
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0x.... 0x....      BL       MOTO_STEP_DISABLED
   5023                ucEnterA=1;
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0x4680             MOV      R8,R0
   5024              }    
   5025          
   5026              //ía2??a1?1ê??ê±,ó??ú2??a1?DT?y
   5027              if(!CheckBit(ulTmp,ucCardPosCBit) && ucEnterC){
   \                     ??BoxToAntPreProcess_9: (+1)
   \   0000011C   0x0028             MOVS     R0,R5
   \   0000011E   0xFA30 0xF00B      LSRS     R0,R0,R11
   \   00000122   0x07C0             LSLS     R0,R0,#+31
   \   00000124   0xD408             BMI.N    ??BoxToAntPreProcess_10
   \   00000126   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000128   0x2E00             CMP      R6,#+0
   \   0000012A   0xD005             BEQ.N    ??BoxToAntPreProcess_10
   5028                //à??a?ú2??a1?????
   5029                MOTO_STEP_DISABLED(SMOTO_FIRST,NORMAL_MODE);
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x.... 0x....      BL       MOTO_STEP_DISABLED
   5030                ucLeaveC=1;
   \   00000134   0x2001             MOVS     R0,#+1
   \   00000136   0x0007             MOVS     R7,R0
   5031              }  
   5032          
   5033              if(ucEnterA  || ucLeaveC){
   \                     ??BoxToAntPreProcess_10: (+1)
   \   00000138   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000013C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000140   0xD102             BNE.N    ??BoxToAntPreProcess_11
   \   00000142   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000144   0x2F00             CMP      R7,#+0
   \   00000146   0xD002             BEQ.N    ??BoxToAntPreProcess_12
   5034                ucRet=1;			
   \                     ??BoxToAntPreProcess_11: (+1)
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x0004             MOVS     R4,R0
   \   0000014C   0xE7C2             B.N      ??BoxToAntPreProcess_6
   5035              }else if(!g_usrSMoto[ucSSelected].uiCounts){
   \                     ??BoxToAntPreProcess_12: (+1)
   \   0000014E   0x....             LDR.N    R0,??DataTable52
   \   00000150   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000154   0x210A             MOVS     R1,#+10
   \   00000156   0xFB01 0xF10A      MUL      R1,R1,R10
   \   0000015A   0x4408             ADD      R0,R0,R1
   \   0000015C   0x8840             LDRH     R0,[R0, #+2]
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD1B8             BNE.N    ??BoxToAntPreProcess_6
   5036                ucRet=2;
   \   00000162   0x2002             MOVS     R0,#+2
   \   00000164   0x0004             MOVS     R4,R0
   \   00000166   0xE7B5             B.N      ??BoxToAntPreProcess_6
   5037              }
   5038                    
   5039            }
   5040            MOTO_STEP_DISABLED(ucSSelected,NORMAL_MODE);
   \                     ??BoxToAntPreProcess_7: (+1)
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x4650             MOV      R0,R10
   \   0000016C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016E   0x.... 0x....      BL       MOTO_STEP_DISABLED
   5041            
   5042            return ucRet;
   \   00000172   0x0020             MOVS     R0,R4
   \   00000174   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??BoxToAntPreProcess_1: (+1)
   \   00000176   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   5043          }
   5044          
   5045          /*******************************************************************************************************
   5046          ** oˉêy??3?: LAntToOutPreProcess
   5047          ** 1|?ü?èê?: 
   5048          ** ê? ?? è?: 
   5049          **
   5050          ** ê???  3?:
   5051          **
   5052          ** è???±?á?:
   5053          ** μ÷ó??￡?é:
   5054          **
   5055          ** ×÷??  ??: John Tonny
   5056          ** è???  ?ú: 2009?ê11??01è?
   5057          **------------------------------------------------------------------------------------------------------
   5058          ** DT ?? è?:
   5059          ** è???  ?ú:
   5060          **------------------------------------------------------------------------------------------------------
   5061          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5062          INT8U LAntToOutPreProcess(INT32U ulState)
   5063          {
   \                     LAntToOutPreProcess: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
   5064            INT8U ucTmp;
   5065          
   5066            ucTmp=((ulState>>m_ucKeyBit[CARD_POSA_BIT]) & 0x07) | ((ulState>>m_ucKeyBit[CARD_POSE_BIT]) & 0x08);
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable53_3
   \   00000008   0x7E12             LDRB     R2,[R2, #+24]
   \   0000000A   0x000B             MOVS     R3,R1
   \   0000000C   0x40D3             LSRS     R3,R3,R2
   \   0000000E   0xF013 0x0207      ANDS     R2,R3,#0x7
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable53_3
   \   00000016   0x7F1B             LDRB     R3,[R3, #+28]
   \   00000018   0x000C             MOVS     R4,R1
   \   0000001A   0x40DC             LSRS     R4,R4,R3
   \   0000001C   0xF014 0x0308      ANDS     R3,R4,#0x8
   \   00000020   0x431A             ORRS     R2,R3,R2
   \   00000022   0x0010             MOVS     R0,R2
   5067            return ucTmp;
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
   5068          }
   5069          
   5070          /*******************************************************************************************************
   5071          ** oˉêy??3?: InToAntPreProcess
   5072          ** 1|?ü?èê?: 
   5073          ** ê? ?? è?: 
   5074          **
   5075          ** ê???  3?:
   5076          **
   5077          ** è???±?á?:
   5078          ** μ÷ó??￡?é:
   5079          **
   5080          ** ×÷??  ??: John Tonny
   5081          ** è???  ?ú: 2009?ê11??01è?
   5082          **------------------------------------------------------------------------------------------------------
   5083          ** DT ?? è?:
   5084          ** è???  ?ú:
   5085          **------------------------------------------------------------------------------------------------------
   5086          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5087          INT8U InToAntPreProcess(INT32U ulState)
   5088          {
   \                     InToAntPreProcess: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0001             MOVS     R1,R0
   5089            INT8U ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT];
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000008   0x7E02             LDRB     R2,[R0, #+24]
   5090            INT8U ucCardPosBBit=m_ucKeyBit[CARD_POSB_BIT];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   0000000E   0x7E43             LDRB     R3,[R0, #+25]
   5091            INT8U ucCardPosCBit=m_ucKeyBit[CARD_POSC_BIT];
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   00000014   0x7E84             LDRB     R4,[R0, #+26]
   5092            INT8U ucCardPosDBit=m_ucKeyBit[CARD_POSD_BIT];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable53_3
   \   0000001A   0x7EC5             LDRB     R5,[R0, #+27]
   5093            
   5094            if(CheckBit(ulState,ucCardPosCBit) || CheckBit(ulState,ucCardPosDBit) || CheckBit(ulState,ucCardPosDBit) || CheckBit(ulState,ucCardPosDBit)){
   \   0000001C   0x0008             MOVS     R0,R1
   \   0000001E   0x40E0             LSRS     R0,R0,R4
   \   00000020   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD114             BNE.N    ??InToAntPreProcess_0
   \   0000002A   0x0008             MOVS     R0,R1
   \   0000002C   0x40E8             LSRS     R0,R0,R5
   \   0000002E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD10D             BNE.N    ??InToAntPreProcess_0
   \   00000038   0x0008             MOVS     R0,R1
   \   0000003A   0x40E8             LSRS     R0,R0,R5
   \   0000003C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD106             BNE.N    ??InToAntPreProcess_0
   \   00000046   0x0008             MOVS     R0,R1
   \   00000048   0x40E8             LSRS     R0,R0,R5
   \   0000004A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD001             BEQ.N    ??InToAntPreProcess_1
   5095              return TRUE;
   \                     ??InToAntPreProcess_0: (+1)
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE000             B.N      ??InToAntPreProcess_2
   5096            }
   5097            return FALSE;
   \                     ??InToAntPreProcess_1: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??InToAntPreProcess_2: (+1)
   \   0000005A   0xBC30             POP      {R4,R5}
   \   0000005C   0x4770             BX       LR               ;; return
   5098          }
   5099          
   5100          /*******************************************************************************************************
   5101          ** oˉêy??3?: InToAntPreProcess
   5102          ** 1|?ü?èê?: 
   5103          ** ê? ?? è?: 
   5104          **
   5105          ** ê???  3?:
   5106          **
   5107          ** è???±?á?:
   5108          ** μ÷ó??￡?é:
   5109          **
   5110          ** ×÷??  ??: John Tonny
   5111          ** è???  ?ú: 2009?ê11??01è?
   5112          **------------------------------------------------------------------------------------------------------
   5113          ** DT ?? è?:
   5114          ** è???  ?ú:
   5115          **------------------------------------------------------------------------------------------------------
   5116          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5117          void LOutAutoEvent(void)
   5118          {
   \                     LOutAutoEvent: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   5119            INT8U ucSelected;
   5120            INT8U ucCardPosABit;
   5121            
   5122            
   5123            for(ucSelected=0;ucSelected<CARDMACHINE_CARDBOX_NUMS;ucSelected++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??LOutAutoEvent_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C03             CMP      R4,#+3
   \   0000000A   0xDA4C             BGE.N    ??LOutAutoEvent_1
   5124              if(!m_usrBoxInfo[ucSelected].usrFlag.usrBit.bConnected){
   \   0000000C   0x....             LDR.N    R0,??DataTable53_5
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x0161             LSLS     R1,R4,#+5
   \   00000012   0x4408             ADD      R0,R0,R1
   \   00000014   0x7B80             LDRB     R0,[R0, #+14]
   \   00000016   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD042             BEQ.N    ??LOutAutoEvent_2
   5125                return;
   5126              }
   5127              if(m_usrBoxInfo[ucSelected].usrFlag.usrBit.bSelftest){
   \                     ??LOutAutoEvent_3: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable53_5
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x0161             LSLS     R1,R4,#+5
   \   00000026   0x4408             ADD      R0,R0,R1
   \   00000028   0x7B80             LDRB     R0,[R0, #+14]
   \   0000002A   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD138             BNE.N    ??LOutAutoEvent_2
   5128                return;
   5129              }
   5130              if(m_usrBoxInfo[ucSelected].usrCountResponse.ucEnabled){
   \                     ??LOutAutoEvent_4: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable53_5
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x0161             LSLS     R1,R4,#+5
   \   0000003A   0x4408             ADD      R0,R0,R1
   \   0000003C   0x7C00             LDRB     R0,[R0, #+16]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD131             BNE.N    ??LOutAutoEvent_2
   5131                return;
   5132              }
   5133              if(!m_usrBoxInfo[ucSelected].usrFlag.usrBit.bCardPos){
   \                     ??LOutAutoEvent_5: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable53_5
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x0161             LSLS     R1,R4,#+5
   \   00000048   0x4408             ADD      R0,R0,R1
   \   0000004A   0x7B80             LDRB     R0,[R0, #+14]
   \   0000004C   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD027             BEQ.N    ??LOutAutoEvent_2
   5134                return;
   5135              }
   5136          
   5137              //・￠?¨-è?×??¨??
   5138              if(m_usrGlobalFlag.usrBit.bCardTakeout){
   \                     ??LOutAutoEvent_6: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable53
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD01E             BEQ.N    ??LOutAutoEvent_7
   5139                m_usrGlobalFlag.usrBit.bCardTakeout=0;        
   \   00000064   0x....             LDR.N    R0,??DataTable53
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000006C   0x....             LDR.N    R1,??DataTable53
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
   5140                if(LBoxToAntProcess(NULL,ucSelected)){
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       LBoxToAntProcess
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD011             BEQ.N    ??LOutAutoEvent_7
   5141                  if(LAntToOutProcess(NULL)){
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       LAntToOutProcess
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD00C             BEQ.N    ??LOutAutoEvent_7
   5142                    ucCardPosABit=m_ucKeyBit[CARD_POSA_BIT+ucSelected*8];
   \   00000088   0x....             LDR.N    R0,??DataTable53_3
   \   0000008A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008C   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \   00000090   0x7E00             LDRB     R0,[R0, #+24]
   \   00000092   0x0005             MOVS     R5,R0
   5143                    ClrBit(m_ulKeyOutput,ucCardPosABit);
   \   00000094   0x....             LDR.N    R0,??DataTable53_6
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x40A9             LSLS     R1,R1,R5
   \   0000009C   0x4388             BICS     R0,R0,R1
   \   0000009E   0x....             LDR.N    R1,??DataTable53_6
   \   000000A0   0x6008             STR      R0,[R1, #+0]
   5144                  }
   5145                }
   5146              }
   5147            }
   \                     ??LOutAutoEvent_7: (+1)
   \   000000A2   0x1C64             ADDS     R4,R4,#+1
   \   000000A4   0xE7AF             B.N      ??LOutAutoEvent_0
   5148          }
   \                     ??LOutAutoEvent_1: (+1)
   \                     ??LOutAutoEvent_2: (+1)
   \   000000A6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   5149          
   5150          /*******************************************************************************************************
   5151          ** oˉêy??3?: InToAntPreProcess
   5152          ** 1|?ü?èê?: 
   5153          ** ê? ?? è?: 
   5154          **
   5155          ** ê???  3?:
   5156          **
   5157          ** è???±?á?:
   5158          ** μ÷ó??￡?é:
   5159          **
   5160          ** ×÷??  ??: John Tonny
   5161          ** è???  ?ú: 2009?ê11??01è?
   5162          **------------------------------------------------------------------------------------------------------
   5163          ** DT ?? è?:
   5164          ** è???  ?ú:
   5165          **------------------------------------------------------------------------------------------------------
   5166          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5167          void SOutAutoEvent(void)
   5168          {
   \                     SOutAutoEvent: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   5169            
   5170            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \   00000002   0x....             LDR.N    R0,??DataTable53_5
   \   00000004   0x7B80             LDRB     R0,[R0, #+14]
   \   00000006   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD035             BEQ.N    ??SOutAutoEvent_0
   5171              return;
   5172            }
   5173            if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bSelftest){
   \                     ??SOutAutoEvent_1: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable53_5
   \   00000012   0x7B80             LDRB     R0,[R0, #+14]
   \   00000014   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD12E             BNE.N    ??SOutAutoEvent_0
   5174              return;
   5175            }
   5176            if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \                     ??SOutAutoEvent_2: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable53_5
   \   00000020   0x7C00             LDRB     R0,[R0, #+16]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD12A             BNE.N    ??SOutAutoEvent_0
   5177              return;
   5178            }
   5179            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos){
   \                     ??SOutAutoEvent_3: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable53_5
   \   00000028   0x7B80             LDRB     R0,[R0, #+14]
   \   0000002A   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD023             BEQ.N    ??SOutAutoEvent_0
   5180              return;
   5181            }
   5182            
   5183            //・￠?¨-è?×??¨??
   5184            m_ucMachineAddr=0x40;
   \                     ??SOutAutoEvent_4: (+1)
   \   00000034   0x2040             MOVS     R0,#+64
   \   00000036   0x....             LDR.N    R1,??DataTable53_7
   \   00000038   0x7008             STRB     R0,[R1, #+0]
   5185            if(m_usrGlobalFlag.usrBit.bCardTakeout){
   \   0000003A   0x....             LDR.N    R0,??DataTable53
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD019             BEQ.N    ??SOutAutoEvent_5
   5186              m_usrGlobalFlag.usrBit.bCardTakeout=0;        
   \   00000048   0x....             LDR.N    R0,??DataTable53
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   00000050   0x....             LDR.N    R1,??DataTable53
   \   00000052   0x7008             STRB     R0,[R1, #+0]
   5187              if(BoxToAntProcess(NULL)){
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      BL       BoxToAntProcess
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD00E             BEQ.N    ??SOutAutoEvent_5
   5188                if(AntToOutProcess(NULL)){
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       AntToOutProcess
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD009             BEQ.N    ??SOutAutoEvent_5
   5189                  ClrBit(m_ulKeyOutput,m_ucKeyBit[CARD_POSA_BIT]);
   \   00000068   0x....             LDR.N    R0,??DataTable53_6
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x....             LDR.N    R2,??DataTable53_3
   \   00000070   0xF992 0x2018      LDRSB    R2,[R2, #+24]
   \   00000074   0x4091             LSLS     R1,R1,R2
   \   00000076   0x4388             BICS     R0,R0,R1
   \   00000078   0x....             LDR.N    R1,??DataTable53_6
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   5190                }
   5191              }
   5192            }
   5193            
   5194          }
   \                     ??SOutAutoEvent_5: (+1)
   \                     ??SOutAutoEvent_0: (+1)
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
   5195          
   5196          /*******************************************************************************************************
   5197          ** oˉêy??3?: InToAntPreProcess
   5198          ** 1|?ü?èê?: 
   5199          ** ê? ?? è?: 
   5200          **
   5201          ** ê???  3?:
   5202          **
   5203          ** è???±?á?:
   5204          ** μ÷ó??￡?é:
   5205          **
   5206          ** ×÷??  ??: John Tonny
   5207          ** è???  ?ú: 2009?ê11??01è?
   5208          **------------------------------------------------------------------------------------------------------
   5209          ** DT ?? è?:
   5210          ** è???  ?ú:
   5211          **------------------------------------------------------------------------------------------------------
   5212          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5213          void SInAutoEvent(void)
   5214          {
   \                     SInAutoEvent: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   5215            INT8U ucRet;
   5216            
   5217            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \   00000002   0x....             LDR.N    R0,??DataTable53_5
   \   00000004   0x7B80             LDRB     R0,[R0, #+14]
   \   00000006   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD038             BEQ.N    ??SInAutoEvent_0
   5218              return;
   5219            }
   5220            if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bSelftest){
   \                     ??SInAutoEvent_1: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable53_5
   \   00000012   0x7B80             LDRB     R0,[R0, #+14]
   \   00000014   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD131             BNE.N    ??SInAutoEvent_0
   5221              return;
   5222            }
   5223            if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \                     ??SInAutoEvent_2: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable53_5
   \   00000020   0x7C00             LDRB     R0,[R0, #+16]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD12D             BNE.N    ??SInAutoEvent_0
   5224              return;
   5225            }
   5226            if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos){
   \                     ??SInAutoEvent_3: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable53_5
   \   00000028   0x7B80             LDRB     R0,[R0, #+14]
   \   0000002A   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD026             BEQ.N    ??SInAutoEvent_0
   5227              return;
   5228            }
   5229          
   5230            //ê??¨-2?è??¨??
   5231            m_ucMachineAddr=0x41;
   \                     ??SInAutoEvent_4: (+1)
   \   00000034   0x2041             MOVS     R0,#+65
   \   00000036   0x....             LDR.N    R1,??DataTable53_7
   \   00000038   0x7008             STRB     R0,[R1, #+0]
   5232            if(m_usrGlobalFlag.usrBit.bCardPlugIn){
   \   0000003A   0x....             LDR.N    R0,??DataTable53
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD01D             BEQ.N    ??SInAutoEvent_5
   5233              m_usrGlobalFlag.usrBit.bCardPlugIn=0;
   \   00000046   0x....             LDR.N    R0,??DataTable53
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000004E   0x....             LDR.N    R1,??DataTable53
   \   00000050   0x7008             STRB     R0,[R1, #+0]
   5234              if((ucRet=InToAntProcess(NULL))>0){
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       InToAntProcess
   \   00000058   0x0004             MOVS     R4,R0
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD010             BEQ.N    ??SInAutoEvent_5
   5235                if(ucRet==2){
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x2C02             CMP      R4,#+2
   5236                  DebugInfoA(0x55,NULL,0);
   5237                }
   5238                if(AntToBoxProcess(NULL)){
   \                     ??SInAutoEvent_6: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       AntToBoxProcess
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD009             BEQ.N    ??SInAutoEvent_5
   5239                  ClrBit(m_ulKeyOutput,m_ucKeyBit[CARD_POSA_BIT]);
   \   0000006E   0x....             LDR.N    R0,??DataTable53_6
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x....             LDR.N    R2,??DataTable53_3
   \   00000076   0xF992 0x2018      LDRSB    R2,[R2, #+24]
   \   0000007A   0x4091             LSLS     R1,R1,R2
   \   0000007C   0x4388             BICS     R0,R0,R1
   \   0000007E   0x....             LDR.N    R1,??DataTable53_6
   \   00000080   0x6008             STR      R0,[R1, #+0]
   5240                }
   5241              }
   5242            }  
   5243          }
   \                     ??SInAutoEvent_5: (+1)
   \                     ??SInAutoEvent_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
   5244          
   5245          /*******************************************************************************************************
   5246          ** oˉêy??3?: InToAntPreProcess
   5247          ** 1|?ü?èê?: 
   5248          ** ê? ?? è?: 
   5249          **
   5250          ** ê???  3?:
   5251          **
   5252          ** è???±?á?:
   5253          ** μ÷ó??￡?é:
   5254          **
   5255          ** ×÷??  ??: John Tonny
   5256          ** è???  ?ú: 2009?ê11??01è?
   5257          **------------------------------------------------------------------------------------------------------
   5258          ** DT ?? è?:
   5259          ** è???  ?ú:
   5260          **------------------------------------------------------------------------------------------------------
   5261          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5262          void ZInAutoEvent(void)
   5263          {
   \                     ZInAutoEvent: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   5264            INT8U ucRet;
   5265            
   5266            //ê??¨-2?è??¨??
   5267            m_ucMachineAddr=0x41;
   \   00000002   0x2041             MOVS     R0,#+65
   \   00000004   0x....             LDR.N    R1,??DataTable53_7
   \   00000006   0x7008             STRB     R0,[R1, #+0]
   5268            if(m_usrGlobalFlag.usrBit.bCardPlugIn){
   \   00000008   0x....             LDR.N    R0,??DataTable53
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD01D             BEQ.N    ??ZInAutoEvent_0
   5269              m_usrGlobalFlag.usrBit.bCardPlugIn=0;
   \   00000014   0x....             LDR.N    R0,??DataTable53
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000001C   0x....             LDR.N    R1,??DataTable53
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   5270              if((ucRet=ZInToAntProcess(NULL))>0){
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       ZInToAntProcess
   \   00000026   0x0004             MOVS     R4,R0
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD010             BEQ.N    ??ZInAutoEvent_0
   5271                if(ucRet==2){
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C02             CMP      R4,#+2
   5272                  DebugInfoA(0x55,NULL,0);
   5273                }
   5274                if(ZAntToBoxProcess(NULL)){
   \                     ??ZInAutoEvent_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       ZAntToBoxProcess
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD009             BEQ.N    ??ZInAutoEvent_0
   5275                  ClrBit(m_ulKeyOutput,m_ucKeyBit[CARD_POSA_BIT]);
   \   0000003C   0x....             LDR.N    R0,??DataTable53_6
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x....             LDR.N    R2,??DataTable53_3
   \   00000044   0xF992 0x2018      LDRSB    R2,[R2, #+24]
   \   00000048   0x4091             LSLS     R1,R1,R2
   \   0000004A   0x4388             BICS     R0,R0,R1
   \   0000004C   0x....             LDR.N    R1,??DataTable53_6
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   5276                }
   5277              }
   5278            }  
   5279          }
   \                     ??ZInAutoEvent_0: (+1)
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
   5280          
   5281          /*******************************************************************************************************
   5282          ** oˉêy??3?: SGInAutoEvent
   5283          ** 1|?ü?èê?: 
   5284          ** ê? ?? è?: 
   5285          **
   5286          ** ê???  3?:
   5287          **
   5288          ** è???±?á?:
   5289          ** μ÷ó??￡?é:
   5290          **
   5291          ** ×÷??  ??: John Tonny
   5292          ** è???  ?ú: 2009?ê11??01è?
   5293          **------------------------------------------------------------------------------------------------------
   5294          ** DT ?? è?:
   5295          ** è???  ?ú:
   5296          **------------------------------------------------------------------------------------------------------
   5297          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5298          void SGInAutoEvent(void)
   5299          {
   \                     SGInAutoEvent: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   5300            INT8U ucRet;
   5301            INT8U ucCardBoxPosBit;
   5302            INT32U ulTmp;
   5303            
   5304            if(m_usrGlobalFlag.usrBit.bGCardToOut){
   \   00000002   0x....             LDR.N    R0,??DataTable53
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD017             BEQ.N    ??SGInAutoEvent_0
   5305              if(GCardToAntProcess(&m_usrComm1RxData)){
   \   00000010   0x....             LDR.N    R0,??DataTable53_8
   \   00000012   0x.... 0x....      BL       GCardToAntProcess
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD00B             BEQ.N    ??SGInAutoEvent_1
   5306                if(!GAntToOutProcess(NULL)){
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       GAntToOutProcess
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD15F             BNE.N    ??SGInAutoEvent_2
   5307                  m_usrGlobalFlag.usrBit.bGCardToOut=0;            
   \   00000024   0x....             LDR.N    R0,??DataTable53
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000002C   0x....             LDR.N    R1,??DataTable53
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
   \   00000030   0xE058             B.N      ??SGInAutoEvent_2
   5308                }
   5309              }else{
   5310                m_usrGlobalFlag.usrBit.bGCardToOut=0;            
   \                     ??SGInAutoEvent_1: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable53
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000003A   0x....             LDR.N    R1,??DataTable53
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
   \   0000003E   0xE051             B.N      ??SGInAutoEvent_2
   5311              }
   5312            }else{
   5313              if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bConnected){
   \                     ??SGInAutoEvent_0: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable53_5
   \   00000042   0x7B80             LDRB     R0,[R0, #+14]
   \   00000044   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD04A             BEQ.N    ??SGInAutoEvent_3
   5314                return;
   5315              }
   5316              if(m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bSelftest){
   \                     ??SGInAutoEvent_4: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable53_5
   \   00000050   0x7B80             LDRB     R0,[R0, #+14]
   \   00000052   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD143             BNE.N    ??SGInAutoEvent_3
   5317                return;
   5318              }
   5319              
   5320              if(m_usrGlobalFlag.usrBit.bGCardToBox){
   \                     ??SGInAutoEvent_5: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable53
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD03C             BEQ.N    ??SGInAutoEvent_2
   5321                if(g_ucGInState==GIN_CARDTOANT_STATE){
   \   0000006A   0x....             LDR.N    R0,??DataTable53_9
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD10A             BNE.N    ??SGInAutoEvent_6
   5322                  if(!GCardToAntProcess(NULL)){
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       GCardToAntProcess
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD105             BNE.N    ??SGInAutoEvent_6
   5323                    m_usrGlobalFlag.usrBit.bGCardToBox=0;
   \   0000007C   0x....             LDR.N    R0,??DataTable53
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000084   0x....             LDR.N    R1,??DataTable53
   \   00000086   0x7008             STRB     R0,[R1, #+0]
   5324                  }
   5325                }
   5326                g_ucGInState=GIN_ANTTOBOX_STATE;
   \                     ??SGInAutoEvent_6: (+1)
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x....             LDR.N    R1,??DataTable53_9
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
   5327                if(m_usrBoxInfo[BOX_FIRST].usrCountResponse.ucEnabled){
   \   0000008E   0x....             LDR.N    R0,??DataTable53_5
   \   00000090   0x7C00             LDRB     R0,[R0, #+16]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD126             BNE.N    ??SGInAutoEvent_3
   5328                  return;
   5329                }
   5330                
   5331                ucCardBoxPosBit=m_ucKeyBit[CARDBOX1_POS_BIT];
   \                     ??SGInAutoEvent_7: (+1)
   \   00000096   0x....             LDR.N    R0,??DataTable53_3
   \   00000098   0x7980             LDRB     R0,[R0, #+6]
   \   0000009A   0x0005             MOVS     R5,R0
   5332                ulTmp=GetKeyOutput();
   \   0000009C   0x.... 0x....      BL       GetKeyOutput
   \   000000A0   0x0006             MOVS     R6,R0
   5333                if(!m_usrBoxInfo[BOX_FIRST].usrFlag.usrBit.bCardPos && CheckBit(ulTmp,ucCardBoxPosBit)){
   \   000000A2   0x....             LDR.N    R0,??DataTable53_5
   \   000000A4   0x7B80             LDRB     R0,[R0, #+14]
   \   000000A6   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   000000AA   0x07C0             LSLS     R0,R0,#+31
   \   000000AC   0xD406             BMI.N    ??SGInAutoEvent_8
   \   000000AE   0x0030             MOVS     R0,R6
   \   000000B0   0x40E8             LSRS     R0,R0,R5
   \   000000B2   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD113             BNE.N    ??SGInAutoEvent_3
   5334                  return;
   5335                }
   5336                      
   5337                ucRet=GAntToBoxProcess(NULL);
   \                     ??SGInAutoEvent_8: (+1)
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      BL       GAntToBoxProcess
   \   000000C2   0x0004             MOVS     R4,R0
   5338                if(!ucRet){
   \   000000C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C6   0x2C00             CMP      R4,#+0
   \   000000C8   0xD103             BNE.N    ??SGInAutoEvent_9
   5339                  g_ucGInState=GIN_CARDTOANT_STATE;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x....             LDR.N    R1,??DataTable53_9
   \   000000CE   0x7008             STRB     R0,[R1, #+0]
   \   000000D0   0xE008             B.N      ??SGInAutoEvent_2
   5340                }else if(ucRet==1){
   \                     ??SGInAutoEvent_9: (+1)
   \   000000D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D4   0x2C01             CMP      R4,#+1
   \   000000D6   0xD105             BNE.N    ??SGInAutoEvent_2
   5341                  m_usrGlobalFlag.usrBit.bGCardToBox=0;
   \   000000D8   0x....             LDR.N    R0,??DataTable53
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   000000E0   0x....             LDR.N    R1,??DataTable53
   \   000000E2   0x7008             STRB     R0,[R1, #+0]
   5342                }
   5343              }	
   5344            }
   5345          }
   \                     ??SGInAutoEvent_2: (+1)
   \                     ??SGInAutoEvent_3: (+1)
   \   000000E4   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     g_usrDMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40018000         DC32     0x40018000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     g_usrDMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x40018004         DC32     0x40018004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x40008004         DC32     0x40008004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40008008         DC32     0x40008008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x40008018         DC32     0x40008018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x40018008         DC32     0x40018008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x40018018         DC32     0x40018018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x4001801C         DC32     0x4001801c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     m_usrGlobalFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     g_pActionSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     App_TaskLcdTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     m_usrComm1RxData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     m_ucMachineAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     m_BoxPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x00027100         DC32     0x27100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     m_ucDMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x........         DC32     m_usrErrorFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     m_uiDMotoPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     g_ucLedMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     m_ucSMotoFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     m_ucSMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     g_usrGetKey1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     `DMotoSwitchStop::ulKeyOutput1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x........         DC32     m_uiDMotoPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     BUZZ_SK_MODE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x........         DC32     m_ucDMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     m_ucSMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x........         DC32     m_ucSMotoFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x........         DC32     App_TaskLcdTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x........         DC32     g_usrMotoFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x........         DC32     m_uiDMotoPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_2:
   \   00000000   0x00027100         DC32     0x27100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_3:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   0x........         DC32     m_ucSMotoFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_1:
   \   00000000   0x........         DC32     m_ucSMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   0x........         DC32     BUZZ_SK_MODE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   0x........         DC32     g_ucLedMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   0x........         DC32     g_usrScan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \   00000000   0x........         DC32     `ZAntToBoxProcess::ucTest`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   0x........         DC32     m_usrGlobalFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_1:
   \   00000000   0x........         DC32     m_ucSMotoFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \   00000000   0x........         DC32     m_uiDMotoPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \   00000000   0x........         DC32     m_ucSMotoBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   0x........         DC32     g_usrDMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   0x........         DC32     m_usrErrorFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   0x........         DC32     g_usrSMoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   0x........         DC32     m_usrGlobalFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_1:
   \   00000000   0x........         DC32     g_usrGlobalFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_2:
   \   00000000   0x........         DC32     g_ucCommTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_3:
   \   00000000   0x........         DC32     m_ucKeyBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_4:
   \   00000000   0x........         DC32     m_ucSMotoFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_5:
   \   00000000   0x........         DC32     m_usrBoxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_6:
   \   00000000   0x........         DC32     m_ulKeyOutput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_7:
   \   00000000   0x........         DC32     m_ucMachineAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_8:
   \   00000000   0x........         DC32     m_usrComm1RxData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53_9:
   \   00000000   0x........         DC32     g_ucGInState
   5346          
   5347          /*******************************************************************************************************
   5348          **                            End Of File
   5349          *******************************************************************************************************/
   5350          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   Action_Process
        32   -> AntToBoxProcess
        32   -> AntToOutProcess
        32   -> BSP_OS_SemPost
        32   -> BoxToAntProcess
        32   -> Box_TaskLcdQPost
        32   -> CARD_AUTO_MODE
        32   -> DEV_TYPE
        32   -> GAntToBoxProcess
        32   -> GAntToOutProcess
        32   -> GCardToAntProcess
        32   -> InToAntProcess
        32   -> LAntToOutProcess
        32   -> LAntToRevProcess
        32   -> LBoxToAntProcess
        32   -> LOutAutoEvent
        32   -> Mem_PoolBlkFree
        32   -> OSTaskQPend
        32   -> OSTimeDly
        32   -> PowerOnSelftest
        32   -> SGInAutoEvent
        32   -> SInAutoEvent
        32   -> SOutAutoEvent
        32   -> ZAntToBoxProcess
        32   -> ZAntToOutProcess
        32   -> ZDoorOpenProcess
        32   -> ZInAutoEvent
        32   -> ZInToAntProcess
        32   -> ZPrintOpenProcess
      56   AntToBox
        56   -> AntToBoxPreProcess
        56   -> BoxMotoMoveDown
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
        56   -> CardBoxBasicInfoSend
        56   -> CardCountUpdateSend
        56   -> DMotoStart
        56   -> GetKey
        56   -> GetKeyOutput
        56   -> MOTO_DC_DISABLED
        56   -> MOTO_STEP_DISABLED
        56   -> MotoReset
        56   -> OSTimeDly
        56   -> PlugInClear
        56   -> SMotoStart
       4   AntToBoxPreProcess
      72   AntToBoxProcess
        72   -> AntToBox
        72   -> AntToBoxPreProcess
        72   -> BSP_LED_Toggle
        72   -> BoxMotoMoveDown
        72   -> BuzzSet
        72   -> GetKeyOutput
        72   -> MotoReset
        72   -> OSTimeDly
        72   -> SMotoStart
        72   -> Uart0Pack
      48   AntToOut
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> EepromReadVerifyBytes
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
       4   AntToOutPreProcess
      48   AntToOutProcess
        48   -> AntToOut
        48   -> AntToOutPreProcess
        48   -> BuzzSet
        48   -> GetKeyOutput
        48   -> Uart0Pack
      56   BoxToAnt
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
        56   -> CardBoxBasicInfoSend
        56   -> CardCountUpdateSend
        56   -> DMotoPosAWaitEnter
        56   -> DMotoStart
        56   -> GetKeyOutput
        56   -> MOTO_DC_DISABLED
        56   -> MOTO_STEP_DISABLED
        56   -> OSTimeDly
        56   -> SMotoStart
      48   BoxToAntPreProcess
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
      72   BoxToAntProcess
        72   -> BoxToAnt
        72   -> BoxToAntPreProcess
        72   -> Box_TaskLcdQPost
        72   -> BuzzSet
        72   -> GetKeyOutput
        72   -> OSTimeDly
        72   -> Uart0Pack
       8   DMotoHook
         8   -> MOTO_DC_CLK
      32   DMotoMoveWait
        32   -> DMotoStart
        32   -> MOTO_DC_DISABLED
        32   -> OSTimeDly
      24   DMotoPosAValid
        24   -> DMotoByPos
        24   -> DMotoPosBySelected
        24   -> GetKeyOutput
      24   DMotoPosAWaitEnter
        24   -> DMotoPosAValid
        24   -> OSTimeDly
      24   DMotoPosBValid
        24   -> DMotoByPos
        24   -> DMotoPosBySelected
        24   -> GetKeyOutput
      24   DMotoPosBWaitEnter
        24   -> DMotoPosBValid
        24   -> OSTimeDly
      40   DMotoStart
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> MOTO_DC_BACKWARD
        40   -> MOTO_DC_DISABLED
        40   -> MOTO_DC_FORWARD
        40   -> OSTimeDly
      40   DMotoSwitchStop
        40   -> DEV_TYPE
        40   -> DMotoByPos
        40   -> GetKey
        40   -> KeyDeBounce1
        40   -> MOTO_DC_DISABLED
      56   GAntToBox
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
        56   -> CardCountUpdateSend
        56   -> DMotoStart
        56   -> GetKey
        56   -> GetKeyOutput
        56   -> MOTO_DC_DISABLED
        56   -> MOTO_STEP_DISABLED
        56   -> MotoReset
        56   -> OSTimeDly
        56   -> SMotoStart
      88   GAntToBoxProcess
        88   -> BSP_LED_Toggle
        88   -> BoxMotoMoveDown
        88   -> BuzzSet
        88   -> GAntToBox
        88   -> GetKeyOutput
        88   -> MOTO_STEP_DISABLED
        88   -> MotoReset
        88   -> OSTimeDly
        88   -> SMotoStart
        88   -> Uart0Pack
      40   GAntToOut
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> GetKey
        40   -> GetKeyOutput
        40   -> MOTO_STEP_DISABLED
        40   -> OSTimeDly
        40   -> SMotoStart
      40   GAntToOutProcess
        40   -> AntToOut
        40   -> BuzzSet
        40   -> KeyChange
        40   -> Uart0Pack
      56   GCardToAnt
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
        56   -> DMotoMoveWait
        56   -> DMotoStart
        56   -> GetKey
        56   -> GetKeyOutput
        56   -> MOTO_DC_DISABLED
        56   -> MOTO_STEP_DISABLED
        56   -> OSTimeDly
        56   -> SMotoMoveWait
        56   -> SMotoStart
      64   GCardToAntProcess
        64   -> BuzzSet
        64   -> GCardToAnt
        64   -> Uart0Pack
      40   InToAnt
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> GetKeyOutput
        40   -> MOTO_STEP_DISABLED
        40   -> OSTimeDly
        40   -> SMotoStart
       8   InToAntPreProcess
      56   InToAntProcess
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
        56   -> DEV_TYPE
        56   -> GetKeyOutput
        56   -> InToAnt
        56   -> InToAntPreProcess
        56   -> KeyChange
        56   -> MotoReset
        56   -> Uart0Pack
      40   LAntToOut
        40   -> EepromReadVerifyBytes
        40   -> GetKeyOutput
        40   -> LAntToOutPreProcess
        40   -> MOTO_STEP_DISABLED
        40   -> SMotoStart
       4   LAntToOutPreProcess
      48   LAntToOutProcess
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> GetKeyOutput
        48   -> LAntToOut
        48   -> LAntToOutPreProcess
        48   -> Uart0Pack
      40   LAntToRev
        40   -> GetKeyOutput
        40   -> MOTO_STEP_DISABLED
        40   -> SMotoStart
      48   LAntToRevProcess
        48   -> GetKeyOutput
        48   -> LAntToOutPreProcess
        48   -> LAntToRev
        48   -> Uart0Pack
      48   LBoxToAntPreProcess
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
      80   LBoxToAntProcess
        80   -> BuzzSet
        80   -> GetKeyOutput
        80   -> KeyChange
        80   -> LBoxToAntPreProcess
        80   -> LBoxToChannel
        80   -> LChannelToAnt
        80   -> LMotoReset
        80   -> Uart0Pack
      56   LBoxToChannel
        56   -> CardBoxBasicInfoSend
        56   -> CardCountUpdateSend
        56   -> DMotoStart
        56   -> GetKeyOutput
        56   -> LMotoReset
        56   -> MOTO_DC_DISABLED
        56   -> MOTO_STEP_DISABLED
        56   -> OSTimeDly
        56   -> SMotoStart
      48   LChannelToAnt
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> SMotoStart
      40   LMotoReset
        40   -> BoxMotoMoveDown
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> DMotoPosAValid
        40   -> DMotoPosAWaitEnter
        40   -> DMotoPosBWaitEnter
        40   -> DMotoStart
        40   -> GetKeyOutput
        40   -> MOTO_DC_DISABLED
      16   LOutAutoEvent
        16   -> LAntToOutProcess
        16   -> LBoxToAntProcess
       8   MOTO_DC_BACKWARD
         8   -> CSP_GPIO_BitClr
         8   -> CSP_GPIO_BitSet
       8   MOTO_DC_CLK
         8   -> CSP_GPIO_BitToggle
      24   MOTO_DC_DISABLED
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> CSP_GPIO_BitSet
       8   MOTO_DC_FORWARD
         8   -> CSP_GPIO_BitClr
         8   -> CSP_GPIO_BitSet
       8   MOTO_STEP_BACKWARD
         8   -> CSP_GPIO_BitClr
       8   MOTO_STEP_CLK
         8   -> CSP_GPIO_BitToggle
      24   MOTO_STEP_DISABLED
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> CSP_GPIO_BitSet
       8   MOTO_STEP_ENABLED
         8   -> CSP_GPIO_BitClr
       8   MOTO_STEP_FORWARD
         8   -> CSP_GPIO_BitSet
      16   MotoInit
        16   -> CSP_GPIO_BitClr
        16   -> CSP_GPIO_BitSet
        16   -> CSP_GPIO_Cfg
      32   MotoReset
        32   -> DMotoPosAValid
        32   -> DMotoPosAWaitEnter
        32   -> DMotoStart
        32   -> MOTO_DC_DISABLED
       8   MotoTime
         8   -> MOTO_DC_DISABLED
         8   -> MOTO_STEP_DISABLED
      24   PlugInClear
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> GetKeyOutput
        24   -> MOTO_STEP_DISABLED
        24   -> SMotoStart
      48   PowerOnSelftest
        48   -> Box_TaskLcdQPost
        48   -> DEV_TYPE
        48   -> DMotoMoveWait
        48   -> DMotoPosAValid
        48   -> DMotoPosBWaitEnter
        48   -> DMotoStart
        48   -> GetKey
        48   -> MOTO_DC_DISABLED
        48   -> MotoReset
        48   -> SMotoMoveWait
        48   -> SMotoReset
      16   SGInAutoEvent
        16   -> GAntToBoxProcess
        16   -> GAntToOutProcess
        16   -> GCardToAntProcess
        16   -> GetKeyOutput
       8   SInAutoEvent
         8   -> AntToBoxProcess
         8   -> InToAntProcess
       8   SMotoHook
         8   -> MOTO_STEP_CLK
         8   -> MOTO_STEP_DISABLED
      40   SMotoMoveWait
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> MOTO_STEP_DISABLED
        40   -> OSTimeDly
        40   -> SMotoStart
      32   SMotoReset
        32   -> DMotoPosAValid
        32   -> DMotoPosAWaitEnter
        32   -> MOTO_STEP_DISABLED
        32   -> SMotoStart
      24   SMotoStart
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> MOTO_STEP_BACKWARD
        24   -> MOTO_STEP_DISABLED
        24   -> MOTO_STEP_ENABLED
        24   -> MOTO_STEP_FORWARD
       8   SOutAutoEvent
         8   -> AntToOutProcess
         8   -> BoxToAntProcess
      48   ZAntToBox
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
      64   ZAntToBoxProcess
        64   -> AntToBoxPreProcess
        64   -> BuzzSet
        64   -> CPU_IntDisMeasStart
        64   -> CPU_IntDisMeasStop
        64   -> CPU_SR_Restore
        64   -> CPU_SR_Save
        64   -> CSP_GPIO_BitSet
        64   -> GetKeyOutput
        64   -> Uart0Pack
        64   -> ZAntToBox
      48   ZAntToOut
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
      64   ZAntToOutProcess
        64   -> BuzzSet
        64   -> CPU_IntDisMeasStart
        64   -> CPU_IntDisMeasStop
        64   -> CPU_SR_Restore
        64   -> CPU_SR_Save
        64   -> CSP_GPIO_BitSet
        64   -> GetKeyOutput
        64   -> Uart0Pack
        64   -> ZAntToOut
       0   ZDoorOpen
      48   ZDoorOpenProcess
        48   -> BuzzSet
        48   -> Uart0Pack
        48   -> ZDoorOpen
       8   ZInAutoEvent
         8   -> ZAntToBoxProcess
         8   -> ZInToAntProcess
      48   ZInToAnt
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> GetKeyOutput
        48   -> MOTO_STEP_DISABLED
        48   -> OSTimeDly
        48   -> SMotoStart
      48   ZInToAntProcess
        48   -> BuzzSet
        48   -> CPU_IntDisMeasStart
        48   -> CPU_IntDisMeasStop
        48   -> CPU_SR_Restore
        48   -> CPU_SR_Save
        48   -> DEV_TYPE
        48   -> KeyChange
        48   -> Uart0Pack
        48   -> ZInToAnt
      40   ZPrintOpen
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> DMotoPosBWaitEnter
        40   -> GetKeyOutput
        40   -> MOTO_STEP_DISABLED
        40   -> OSTimeDly
        40   -> SMotoReset
        40   -> SMotoStart
      48   ZPrintOpenProcess
        48   -> BuzzSet
        48   -> Uart0Pack
        48   -> ZPrintOpen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable14
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable22
       4  ??DataTable25
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable29
       4  ??DataTable30
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable33_2
       4  ??DataTable33_3
       4  ??DataTable34
       4  ??DataTable34_1
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable36
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
       4  ??DataTable40
       4  ??DataTable43
       4  ??DataTable43_1
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       4  ??DataTable46
       4  ??DataTable50
       4  ??DataTable52
       4  ??DataTable53
       4  ??DataTable53_1
       4  ??DataTable53_2
       4  ??DataTable53_3
       4  ??DataTable53_4
       4  ??DataTable53_5
       4  ??DataTable53_6
       4  ??DataTable53_7
       4  ??DataTable53_8
       4  ??DataTable53_9
     540  Action_Process
     824  AntToBox
      88  AntToBoxPreProcess
     628  AntToBoxProcess
     312  AntToOut
      86  AntToOutPreProcess
     162  AntToOutProcess
       4  BUZZ_SK_MODE
     562  BoxToAnt
     378  BoxToAntPreProcess
     672  BoxToAntProcess
      82  DMotoHook
      78  DMotoMoveWait
      68  DMotoPosAValid
      50  DMotoPosAWaitEnter
      70  DMotoPosBValid
      50  DMotoPosBWaitEnter
     306  DMotoStart
     316  DMotoSwitchStop
     656  GAntToBox
     678  GAntToBoxProcess
     212  GAntToOut
     118  GAntToOutProcess
     464  GCardToAnt
     142  GCardToAntProcess
     472  InToAnt
      94  InToAntPreProcess
     186  InToAntProcess
     376  LAntToOut
      42  LAntToOutPreProcess
     198  LAntToOutProcess
     168  LAntToRev
     150  LAntToRevProcess
     522  LBoxToAntPreProcess
     752  LBoxToAntProcess
     596  LBoxToChannel
     422  LChannelToAnt
     320  LMotoReset
     168  LOutAutoEvent
     110  MOTO_DC_BACKWARD
      70  MOTO_DC_CLK
     406  MOTO_DC_DISABLED
     110  MOTO_DC_FORWARD
      40  MOTO_STEP_BACKWARD
      40  MOTO_STEP_CLK
     258  MOTO_STEP_DISABLED
      48  MOTO_STEP_ENABLED
      40  MOTO_STEP_FORWARD
    1496  MotoInit
     156  MotoReset
     164  MotoTime
     156  PlugInClear
     638  PowerOnSelftest
     230  SGInAutoEvent
     132  SInAutoEvent
     124  SMotoHook
     208  SMotoMoveWait
     114  SMotoReset
     228  SMotoStart
     126  SOutAutoEvent
     248  ZAntToBox
     396  ZAntToBoxProcess
     268  ZAntToOut
     302  ZAntToOutProcess
       6  ZDoorOpen
     120  ZDoorOpenProcess
      82  ZInAutoEvent
     490  ZInToAnt
     168  ZInToAntProcess
     358  ZPrintOpen
     120  ZPrintOpenProcess
       1  ucTest
       4  ulKeyOutput1

 
      5 bytes in section .bss
      4 bytes in section .data
 19 748 bytes in section .text
 
 19 748 bytes of CODE memory
      9 bytes of DATA memory

Errors: none
Warnings: 28
