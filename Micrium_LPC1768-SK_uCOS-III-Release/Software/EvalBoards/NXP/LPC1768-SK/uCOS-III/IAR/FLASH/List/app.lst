###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:01
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2012; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                            EXAMPLE CODE
     18          *
     19          *                                             NXP LPC1768
     20          *                                                on the
     21          *                                     IAR LPC1768-SK Kickstart Kit
     22          *
     23          * Filename      : app.c
     24          * Version       : V1.00
     25          * Programmer(s) : FT
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #include <includes.h>
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                            LOCAL DEFINES
     40          *********************************************************************************************************
     41          */
     42          
     43          
     44          /*
     45          *********************************************************************************************************
     46          *                                       LOCAL GLOBAL VARIABLES
     47          *********************************************************************************************************
     48          */
     49          

   \                                 In section .bss, align 4
     50          static  OS_TCB           App_TaskStartTCB;
   \                     App_TaskStartTCB:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
     51          static  CPU_STK_SIZE     App_TaskStartStk[APP_CFG_TASK_START_STK_SIZE];
   \                     App_TaskStartStk:
   \   00000000                      DS8 768
     52          

   \                                 In section .data, align 4
     53          static  CPU_INT08U       m_ucUart[4]={0,1,2,3};
   \                     m_ucUart:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 3
   \              0x02 0x03    
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                      LOCAL FUNCTION PROTOTYPES
     58          *********************************************************************************************************
     59          */
     60          
     61          static  void  App_ObjCreate          (void);
     62          static  void  App_TaskCreate         (void);
     63          static  void  App_TaskStart          (void       *p_arg);
     64          
     65          
     66          extern  CSP_INT_VECT  CSP_MainVectTbl[CSP_INT_SRC_NBR_MAX]; 
     67          
     68          static void  App_TaskUartReceive    (void      *p_arg);
     69          static void  App_TaskUartProcess    (void      *p_arg);
     70          static void  App_TaskBox            (void      *p_arg);
     71          static void  App_TaskLcd            (void      *p_arg);
     72          static void  App_TaskBuzz           (void      *p_arg);
     73          static void  App_TaskAction         (void      *p_arg);
     74          
     75          #define OpenScan()           		  CSP_GPIO_BitClr(BSP_GPIO_SCAN_PORT,BSP_GPIO_SCAN_OUT);
     76          #define CloseScan()           		  CSP_GPIO_BitSet(BSP_GPIO_SCAN_PORT,BSP_GPIO_SCAN_OUT);
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                                main()
     81          *
     82          * Description : This is the standard entry point for C code.  It is assumed that your code will call
     83          *               main() once you have performed all necessary initialization.
     84          *
     85          * Argument(s) : none.
     86          *
     87          * Return(s)   : none.
     88          *
     89          * Caller(s)   : This the main standard entry point.
     90          *
     91          * Note(s)     : none.
     92          *********************************************************************************************************
     93          */
     94          

   \                                 In section .text, align 2, keep-with-next
     95          int  main (void)
     96          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     97              OS_ERR  err;
     98          
     99              CPU_Init();
   \   00000004   0x.... 0x....      BL       CPU_Init
    100          
    101              BSP_Init();                                                 /* Initialize BSP functions                             */
   \   00000008   0x.... 0x....      BL       BSP_Init
    102              
    103              GlobalInit();
   \   0000000C   0x.... 0x....      BL       GlobalInit
    104              
    105              Mem_Init();
   \   00000010   0x.... 0x....      BL       Mem_Init
    106          
    107              OSInit(&err);                                               /* Initialize "uC/OS-III, The Real-Time Kernel"         */
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x.... 0x....      BL       OSInit
    108          
    109              OSTaskCreate((OS_TCB     *)&App_TaskStartTCB,               /* Create the start task                                */
    110                           (CPU_CHAR   *)"App Task Start",
    111                           (OS_TASK_PTR ) App_TaskStart,
    112                           (void       *) 0,
    113                           (OS_PRIO     ) APP_CFG_TASK_START_PRIO,
    114                           (CPU_STK    *)&App_TaskStartStk[0],
    115                           (CPU_STK     )(APP_CFG_TASK_START_STK_SIZE / 10u),
    116                           (CPU_STK_SIZE) APP_CFG_TASK_START_STK_SIZE,
    117                           (OS_MSG_QTY  ) 0,
    118                           (OS_TICK     ) 0,
    119                           (void       *) 0,
    120                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    121                           (OS_ERR     *)&err);
   \   0000001A   0xA809             ADD      R0,SP,#+36
   \   0000001C   0x9008             STR      R0,[SP, #+32]
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x9007             STR      R0,[SP, #+28]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9005             STR      R0,[SP, #+20]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9004             STR      R0,[SP, #+16]
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2013             MOVS     R0,#+19
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable2_2
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0x.... 0x....      ADR.W    R2,App_TaskStart
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable2_4
   \   0000004E   0x.... 0x....      BL       OSTaskCreate
    122          #if (OS_TASK_NAME_EN > 0u)
    123              OSTaskNameSet(APP_CFG_TASK_START_PRIO, "Start", &err);
    124          #endif
    125              
    126              OSStart(&err);                                              /* Start multitasking (i.e. give control to uC/OS-III). */
   \   00000052   0xA809             ADD      R0,SP,#+36
   \   00000054   0x.... 0x....      BL       OSStart
    127          
    128              while(DEF_ON){				                /* Should Never Get Here							    */
   \                     ??main_0: (+1)
   \   00000058   0xE7FE             B.N      ??main_0
    129              };
    130          }
    131          
    132          /*
    133          *********************************************************************************************************
    134          *                                          App_TaskStart()
    135          *
    136          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    137          *               initialize the ticker only once multitasking has started.
    138          *
    139          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    140          *
    141          * Return(s)   : none.
    142          *
    143          * Caller(s)   : This is a task.
    144          *
    145          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    146          *                   used.  The compiler should not generate any code for this statement.
    147          *********************************************************************************************************
    148          */
    149          

   \                                 In section .text, align 4, keep-with-next
    150          static  void  App_TaskStart (void *p_arg)
    151          {
   \                     App_TaskStart: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    152          
    153              (void)p_arg;                                                /* See Note #1                                          */
    154          
    155              
    156              BSP_Start();                                                /* Start BSP and tick initialization                    */
   \   00000004   0x.... 0x....      BL       BSP_Start
    157          
    158          #if (OS_TASK_STAT_EN > 0)
    159              OSStatInit();                                               /* Determine CPU capacity                               */
    160          #endif
    161          
    162          #if (APP_CFG_SERIAL_EN == DEF_ENABLED)
    163              App_SerialInit();
   \   00000008   0x.... 0x....      BL       App_SerialInit
    164          #endif
    165              
    166              Box_Init();    
   \   0000000C   0x.... 0x....      BL       Box_Init
    167              
    168              App_ObjCreate();                                            /* Create Applicaiton kernel objects                    */
   \   00000010   0x.... 0x....      BL       App_ObjCreate
    169          
    170              App_TaskCreate();                                           /* Create Application tasks                             */
   \   00000014   0x.... 0x....      BL       App_TaskCreate
    171          
    172              BSP_LED_Off(1);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       BSP_LED_Off
    173              BSP_LED_On(2);
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x.... 0x....      BL       BSP_LED_On
    174              
    175              Key_Process();
   \   00000024   0x.... 0x....      BL       Key_Process
    176          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    177          
    178          
    179          /*
    180          *********************************************************************************************************
    181          *                                      App_ObjCreate()
    182          *
    183          * Description:  Creates the application kernel objects.
    184          *
    185          * Argument(s) :  none.
    186          *
    187          * Return(s)   :  none.
    188          *
    189          * Caller(s)   :  App_TaskStart().
    190          *
    191          * Note(s)     :  none.
    192          *********************************************************************************************************
    193          */
    194          

   \                                 In section .text, align 2, keep-with-next
    195          static  void  App_ObjCreate (void)
    196          {
    197          }
   \                     App_ObjCreate: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    198          
    199          
    200          /*
    201          *********************************************************************************************************
    202          *                                      App_TaskCreate()
    203          *
    204          * Description :  This function creates the application tasks.
    205          *
    206          * Argument(s) :  none.
    207          *
    208          * Return(s)   :  none.
    209          *
    210          * Caller(s)   :  App_TaskStart().
    211          *
    212          * Note(s)     :  none.
    213          *********************************************************************************************************
    214          */
    215          

   \                                 In section .text, align 2, keep-with-next
    216          static  void  App_TaskCreate (void)
    217          {
   \                     App_TaskCreate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    218              OS_ERR  err;
    219              INT8U ucType=DEV_TYPE();
   \   00000004   0x.... 0x....      BL       DEV_TYPE
   \   00000008   0x0004             MOVS     R4,R0
    220              
    221          #if (APP_CFG_SERIAL_EN == DEF_ENABLED)
    222              OSTaskCreate((OS_TCB     *)&App_TaskUart0ReceiveTCB,              
    223                         (CPU_CHAR   *)"Uart0 Rx",
    224                         (OS_TASK_PTR ) App_TaskUartReceive,
    225                         (void       *) &m_ucUart[0],
    226                         (OS_PRIO     ) APP_CFG_TASK_UART0_RECEIVE_PRIO,
    227                         (CPU_STK    *)&App_TaskUart0ReceiveStk[0],
    228                         (CPU_STK     )(APP_CFG_TASK_UART0_RECEIVE_STK_SIZE / 10u),
    229                         (CPU_STK_SIZE) APP_CFG_TASK_UART0_RECEIVE_STK_SIZE,
    230                         (OS_MSG_QTY  ) 10,
    231                         (OS_TICK     ) 0,
    232                         (void       *) 0,
    233                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    234                         (OS_ERR     *)&err);
   \   0000000A   0xA809             ADD      R0,SP,#+36
   \   0000000C   0x9008             STR      R0,[SP, #+32]
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x9007             STR      R0,[SP, #+28]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9006             STR      R0,[SP, #+24]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9005             STR      R0,[SP, #+20]
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x9004             STR      R0,[SP, #+16]
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0x9003             STR      R0,[SP, #+12]
   \   00000022   0x200C             MOVS     R0,#+12
   \   00000024   0x9002             STR      R0,[SP, #+8]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable2_5
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x200A             MOVS     R0,#+10
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x.... 0x....      LDR.W    R3,??DataTable2_6
   \   00000034   0x.... 0x....      ADR.W    R2,App_TaskUartReceive
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable2_8
   \   00000040   0x.... 0x....      BL       OSTaskCreate
    235               
    236              if(ucType!=SMALL_THICK_ZIN_TYPE && ucType!=SMALL_THIN_ZIN_TYPE){
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C02             CMP      R4,#+2
   \   00000048   0xD01C             BEQ.N    ??App_TaskCreate_0
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x2C0A             CMP      R4,#+10
   \   0000004E   0xD019             BEQ.N    ??App_TaskCreate_0
    237                OSTaskCreate((OS_TCB     *)&App_TaskUart1ReceiveTCB,              
    238                           (CPU_CHAR   *)"Uart1 Receive",
    239                           (OS_TASK_PTR ) App_TaskUartReceive,
    240                           (void       *) &m_ucUart[1],
    241                           (OS_PRIO     ) APP_CFG_TASK_UART_RECEIVE_PRIO,
    242                           (CPU_STK    *)&App_TaskUart1ReceiveStk[0],
    243                           (CPU_STK     )(APP_CFG_TASK_UART_RECEIVE_STK_SIZE / 10u),
    244                           (CPU_STK_SIZE) APP_CFG_TASK_UART_RECEIVE_STK_SIZE,
    245                           (OS_MSG_QTY  ) 10,
    246                           (OS_TICK     ) 0,
    247                           (void       *) 0,
    248                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    249                           (OS_ERR     *)&err);
   \   00000050   0xA809             ADD      R0,SP,#+36
   \   00000052   0x9008             STR      R0,[SP, #+32]
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0x9007             STR      R0,[SP, #+28]
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x9006             STR      R0,[SP, #+24]
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x200A             MOVS     R0,#+10
   \   00000062   0x9004             STR      R0,[SP, #+16]
   \   00000064   0x2080             MOVS     R0,#+128
   \   00000066   0x9003             STR      R0,[SP, #+12]
   \   00000068   0x200C             MOVS     R0,#+12
   \   0000006A   0x9002             STR      R0,[SP, #+8]
   \   0000006C   0x....             LDR.N    R0,??DataTable2_9
   \   0000006E   0x9001             STR      R0,[SP, #+4]
   \   00000070   0x200B             MOVS     R0,#+11
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0x....             LDR.N    R3,??DataTable2_10
   \   00000076   0x.... 0x....      ADR.W    R2,App_TaskUartReceive
   \   0000007A   0x....             LDR.N    R1,??DataTable2_11
   \   0000007C   0x....             LDR.N    R0,??DataTable2_12
   \   0000007E   0x.... 0x....      BL       OSTaskCreate
   \   00000082   0xE005             B.N      ??App_TaskCreate_1
    250              }else{
    251                ScanInit();
   \                     ??App_TaskCreate_0: (+1)
   \   00000084   0x.... 0x....      BL       ScanInit
    252                CardBoxSetSelected(BOX_THIRD,BOX_POWER_ON_MODE);    
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      BL       CardBoxSetSelected
    253              }
    254                
    255              OSTaskCreate((OS_TCB     *)&App_TaskUart2ReceiveTCB,              
    256                         (CPU_CHAR   *)"Uart2 Receive",
    257                         (OS_TASK_PTR ) App_TaskUartReceive,
    258                         (void       *) &m_ucUart[2],
    259                         (OS_PRIO     ) APP_CFG_TASK_UART_RECEIVE_PRIO,
    260                         (CPU_STK    *)&App_TaskUart2ReceiveStk[0],
    261                         (CPU_STK     )(APP_CFG_TASK_UART_RECEIVE_STK_SIZE / 10u),
    262                         (CPU_STK_SIZE) APP_CFG_TASK_UART_RECEIVE_STK_SIZE,
    263                         (OS_MSG_QTY  ) 10,
    264                         (OS_TICK     ) 0,
    265                         (void       *) 0,
    266                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    267                         (OS_ERR     *)&err);
   \                     ??App_TaskCreate_1: (+1)
   \   00000090   0xA809             ADD      R0,SP,#+36
   \   00000092   0x9008             STR      R0,[SP, #+32]
   \   00000094   0x2003             MOVS     R0,#+3
   \   00000096   0x9007             STR      R0,[SP, #+28]
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9006             STR      R0,[SP, #+24]
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9005             STR      R0,[SP, #+20]
   \   000000A0   0x200A             MOVS     R0,#+10
   \   000000A2   0x9004             STR      R0,[SP, #+16]
   \   000000A4   0x2080             MOVS     R0,#+128
   \   000000A6   0x9003             STR      R0,[SP, #+12]
   \   000000A8   0x200C             MOVS     R0,#+12
   \   000000AA   0x9002             STR      R0,[SP, #+8]
   \   000000AC   0x....             LDR.N    R0,??DataTable2_13
   \   000000AE   0x9001             STR      R0,[SP, #+4]
   \   000000B0   0x200B             MOVS     R0,#+11
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x....             LDR.N    R3,??DataTable2_14
   \   000000B6   0x.... 0x....      ADR.W    R2,App_TaskUartReceive
   \   000000BA   0x....             LDR.N    R1,??DataTable2_15
   \   000000BC   0x....             LDR.N    R0,??DataTable2_16
   \   000000BE   0x.... 0x....      BL       OSTaskCreate
    268                
    269              OSTaskCreate((OS_TCB     *)&App_TaskUart3ReceiveTCB,              
    270                         (CPU_CHAR   *)"Uart3 Receive",
    271                         (OS_TASK_PTR ) App_TaskUartReceive,
    272                         (void       *) &m_ucUart[3],
    273                         (OS_PRIO     ) APP_CFG_TASK_UART_RECEIVE_PRIO,
    274                         (CPU_STK    *)&App_TaskUart3ReceiveStk[0],
    275                         (CPU_STK     )(APP_CFG_TASK_UART_RECEIVE_STK_SIZE / 10u),
    276                         (CPU_STK_SIZE) APP_CFG_TASK_UART_RECEIVE_STK_SIZE,
    277                         (OS_MSG_QTY  ) 10,
    278                         (OS_TICK     ) 0,
    279                         (void       *) 0,
    280                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    281                         (OS_ERR     *)&err);
   \   000000C2   0xA809             ADD      R0,SP,#+36
   \   000000C4   0x9008             STR      R0,[SP, #+32]
   \   000000C6   0x2003             MOVS     R0,#+3
   \   000000C8   0x9007             STR      R0,[SP, #+28]
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x9006             STR      R0,[SP, #+24]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9005             STR      R0,[SP, #+20]
   \   000000D2   0x200A             MOVS     R0,#+10
   \   000000D4   0x9004             STR      R0,[SP, #+16]
   \   000000D6   0x2080             MOVS     R0,#+128
   \   000000D8   0x9003             STR      R0,[SP, #+12]
   \   000000DA   0x200C             MOVS     R0,#+12
   \   000000DC   0x9002             STR      R0,[SP, #+8]
   \   000000DE   0x....             LDR.N    R0,??DataTable2_17
   \   000000E0   0x9001             STR      R0,[SP, #+4]
   \   000000E2   0x200B             MOVS     R0,#+11
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x....             LDR.N    R3,??DataTable2_18
   \   000000E8   0x.... 0x....      ADR.W    R2,App_TaskUartReceive
   \   000000EC   0x....             LDR.N    R1,??DataTable2_19
   \   000000EE   0x....             LDR.N    R0,??DataTable2_20
   \   000000F0   0x.... 0x....      BL       OSTaskCreate
    282              
    283              OSTaskCreate((OS_TCB     *)&App_TaskUartProcessTCB,              
    284                         (CPU_CHAR   *)"Uart3 Process",
    285                         (OS_TASK_PTR ) App_TaskUartProcess,
    286                         (void       *) 0,
    287                         (OS_PRIO     ) APP_CFG_TASK_UART_PROCESS_PRIO,
    288                         (CPU_STK    *)&App_TaskUartProcessStk[0],
    289                         (CPU_STK     )(APP_CFG_TASK_UART_PROCESS_STK_SIZE / 10u),
    290                         (CPU_STK_SIZE) APP_CFG_TASK_UART_PROCESS_STK_SIZE,
    291                         (OS_MSG_QTY  ) 10,
    292                         (OS_TICK     ) 0,
    293                         (void       *) 0,
    294                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    295                         (OS_ERR     *)&err);
   \   000000F4   0xA809             ADD      R0,SP,#+36
   \   000000F6   0x9008             STR      R0,[SP, #+32]
   \   000000F8   0x2003             MOVS     R0,#+3
   \   000000FA   0x9007             STR      R0,[SP, #+28]
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x9006             STR      R0,[SP, #+24]
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x9005             STR      R0,[SP, #+20]
   \   00000104   0x200A             MOVS     R0,#+10
   \   00000106   0x9004             STR      R0,[SP, #+16]
   \   00000108   0x2080             MOVS     R0,#+128
   \   0000010A   0x9003             STR      R0,[SP, #+12]
   \   0000010C   0x200C             MOVS     R0,#+12
   \   0000010E   0x9002             STR      R0,[SP, #+8]
   \   00000110   0x....             LDR.N    R0,??DataTable2_21
   \   00000112   0x9001             STR      R0,[SP, #+4]
   \   00000114   0x200D             MOVS     R0,#+13
   \   00000116   0x9000             STR      R0,[SP, #+0]
   \   00000118   0x2300             MOVS     R3,#+0
   \   0000011A   0x.... 0x....      ADR.W    R2,App_TaskUartProcess
   \   0000011E   0x....             LDR.N    R1,??DataTable2_22
   \   00000120   0x....             LDR.N    R0,??DataTable2_23
   \   00000122   0x.... 0x....      BL       OSTaskCreate
    296          #endif    
    297              
    298              //BOX
    299              if(ucType!=SMALL_THICK_ZIN_TYPE && ucType!=SMALL_THIN_ZIN_TYPE){
   \   00000126   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000128   0x2C02             CMP      R4,#+2
   \   0000012A   0xD01B             BEQ.N    ??App_TaskCreate_2
   \   0000012C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012E   0x2C0A             CMP      R4,#+10
   \   00000130   0xD018             BEQ.N    ??App_TaskCreate_2
    300                OSTaskCreate((OS_TCB     *)&App_TaskBoxTCB,              
    301                           (CPU_CHAR   *)"Box",
    302                           (OS_TASK_PTR ) App_TaskBox,
    303                           (void       *) 0,
    304                           (OS_PRIO     ) APP_CFG_TASK_BOX_PRIO,
    305                           (CPU_STK    *)&App_TaskBoxStk[0],
    306                           (CPU_STK     )(APP_CFG_TASK_BOX_STK_SIZE / 10u),
    307                           (CPU_STK_SIZE) APP_CFG_TASK_BOX_STK_SIZE,
    308                           (OS_MSG_QTY  ) 10,
    309                           (OS_TICK     ) 0,
    310                           (void       *) 0,
    311                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    312                           (OS_ERR     *)&err);
   \   00000132   0xA809             ADD      R0,SP,#+36
   \   00000134   0x9008             STR      R0,[SP, #+32]
   \   00000136   0x2003             MOVS     R0,#+3
   \   00000138   0x9007             STR      R0,[SP, #+28]
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x9006             STR      R0,[SP, #+24]
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x9005             STR      R0,[SP, #+20]
   \   00000142   0x200A             MOVS     R0,#+10
   \   00000144   0x9004             STR      R0,[SP, #+16]
   \   00000146   0x2080             MOVS     R0,#+128
   \   00000148   0x9003             STR      R0,[SP, #+12]
   \   0000014A   0x200C             MOVS     R0,#+12
   \   0000014C   0x9002             STR      R0,[SP, #+8]
   \   0000014E   0x....             LDR.N    R0,??DataTable2_24
   \   00000150   0x9001             STR      R0,[SP, #+4]
   \   00000152   0x200E             MOVS     R0,#+14
   \   00000154   0x9000             STR      R0,[SP, #+0]
   \   00000156   0x2300             MOVS     R3,#+0
   \   00000158   0x.... 0x....      ADR.W    R2,App_TaskBox
   \   0000015C   0x....             ADR.N    R1,??DataTable2  ;; "Box"
   \   0000015E   0x....             LDR.N    R0,??DataTable2_25
   \   00000160   0x.... 0x....      BL       OSTaskCreate
    313              }
    314              
    315              //LCD
    316              if(ucType==SMALL_THICK_IN_TYPE || ucType==SMALL_THICK_OUT_TYPE || ucType==SMALL_THICK_GIN_TYPE || ucType==SMALL_THIN_IN_TYPE || ucType==SMALL_THIN_OUT_TYPE || ucType==SMALL_THIN_GIN_TYPE){
   \                     ??App_TaskCreate_2: (+1)
   \   00000164   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000166   0x2C01             CMP      R4,#+1
   \   00000168   0xD00E             BEQ.N    ??App_TaskCreate_3
   \   0000016A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016C   0x2C00             CMP      R4,#+0
   \   0000016E   0xD00B             BEQ.N    ??App_TaskCreate_3
   \   00000170   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000172   0x2C03             CMP      R4,#+3
   \   00000174   0xD008             BEQ.N    ??App_TaskCreate_3
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x2C09             CMP      R4,#+9
   \   0000017A   0xD005             BEQ.N    ??App_TaskCreate_3
   \   0000017C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017E   0x2C08             CMP      R4,#+8
   \   00000180   0xD002             BEQ.N    ??App_TaskCreate_3
   \   00000182   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000184   0x2C0B             CMP      R4,#+11
   \   00000186   0xD118             BNE.N    ??App_TaskCreate_4
    317                OSTaskCreate((OS_TCB     *)&App_TaskLcdTCB,              
    318                           (CPU_CHAR   *)"Lcd",
    319                           (OS_TASK_PTR ) App_TaskLcd,
    320                           (void       *) 0,
    321                           (OS_PRIO     ) APP_CFG_TASK_LCD_PRIO,
    322                           (CPU_STK    *)&App_TaskLcdStk[0],
    323                           (CPU_STK     )(APP_CFG_TASK_LCD_STK_SIZE / 10u),
    324                           (CPU_STK_SIZE) APP_CFG_TASK_LCD_STK_SIZE,
    325                           (OS_MSG_QTY  ) 10,
    326                           (OS_TICK     ) 0,
    327                           (void       *) 0,
    328                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    329                           (OS_ERR     *)&err);
   \                     ??App_TaskCreate_3: (+1)
   \   00000188   0xA809             ADD      R0,SP,#+36
   \   0000018A   0x9008             STR      R0,[SP, #+32]
   \   0000018C   0x2003             MOVS     R0,#+3
   \   0000018E   0x9007             STR      R0,[SP, #+28]
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x9006             STR      R0,[SP, #+24]
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0x9005             STR      R0,[SP, #+20]
   \   00000198   0x200A             MOVS     R0,#+10
   \   0000019A   0x9004             STR      R0,[SP, #+16]
   \   0000019C   0x2080             MOVS     R0,#+128
   \   0000019E   0x9003             STR      R0,[SP, #+12]
   \   000001A0   0x200C             MOVS     R0,#+12
   \   000001A2   0x9002             STR      R0,[SP, #+8]
   \   000001A4   0x....             LDR.N    R0,??DataTable2_26
   \   000001A6   0x9001             STR      R0,[SP, #+4]
   \   000001A8   0x200F             MOVS     R0,#+15
   \   000001AA   0x9000             STR      R0,[SP, #+0]
   \   000001AC   0x2300             MOVS     R3,#+0
   \   000001AE   0x.... 0x....      ADR.W    R2,App_TaskLcd
   \   000001B2   0x....             ADR.N    R1,??DataTable2_1  ;; "Lcd"
   \   000001B4   0x....             LDR.N    R0,??DataTable2_27
   \   000001B6   0x.... 0x....      BL       OSTaskCreate
    330              }
    331          
    332              //BUZZ
    333              OSTaskCreate((OS_TCB     *)&App_TaskBuzzTCB,              
    334                         (CPU_CHAR   *)"Buzz",
    335                         (OS_TASK_PTR ) App_TaskBuzz,
    336                         (void       *) 0,
    337                         (OS_PRIO     ) APP_CFG_TASK_BUZZ_PRIO,
    338                         (CPU_STK    *)&App_TaskBuzzStk[0],
    339                         (CPU_STK     )(APP_CFG_TASK_BUZZ_STK_SIZE / 10u),
    340                         (CPU_STK_SIZE) APP_CFG_TASK_BUZZ_STK_SIZE,
    341                         (OS_MSG_QTY  ) 10,
    342                         (OS_TICK     ) 0,
    343                         (void       *) 0,
    344                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    345                         (OS_ERR     *)&err);
   \                     ??App_TaskCreate_4: (+1)
   \   000001BA   0xA809             ADD      R0,SP,#+36
   \   000001BC   0x9008             STR      R0,[SP, #+32]
   \   000001BE   0x2003             MOVS     R0,#+3
   \   000001C0   0x9007             STR      R0,[SP, #+28]
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0x9006             STR      R0,[SP, #+24]
   \   000001C6   0x2000             MOVS     R0,#+0
   \   000001C8   0x9005             STR      R0,[SP, #+20]
   \   000001CA   0x200A             MOVS     R0,#+10
   \   000001CC   0x9004             STR      R0,[SP, #+16]
   \   000001CE   0x2080             MOVS     R0,#+128
   \   000001D0   0x9003             STR      R0,[SP, #+12]
   \   000001D2   0x200C             MOVS     R0,#+12
   \   000001D4   0x9002             STR      R0,[SP, #+8]
   \   000001D6   0x....             LDR.N    R0,??DataTable2_28
   \   000001D8   0x9001             STR      R0,[SP, #+4]
   \   000001DA   0x2010             MOVS     R0,#+16
   \   000001DC   0x9000             STR      R0,[SP, #+0]
   \   000001DE   0x2300             MOVS     R3,#+0
   \   000001E0   0x.... 0x....      ADR.W    R2,App_TaskBuzz
   \   000001E4   0x....             LDR.N    R1,??DataTable2_29
   \   000001E6   0x....             LDR.N    R0,??DataTable2_30
   \   000001E8   0x.... 0x....      BL       OSTaskCreate
    346              
    347          
    348              //ACTION
    349              OSTaskCreate((OS_TCB     *)&App_TaskActionTCB,              
    350                         (CPU_CHAR   *)"Action",
    351                         (OS_TASK_PTR ) App_TaskAction,
    352                         (void       *) 0,
    353                         (OS_PRIO     ) APP_CFG_TASK_ACTION_PRIO,
    354                         (CPU_STK    *)&App_TaskActionStk[0],
    355                         (CPU_STK     )(APP_CFG_TASK_ACTION_STK_SIZE / 10u),
    356                         (CPU_STK_SIZE) APP_CFG_TASK_ACTION_STK_SIZE,
    357                         (OS_MSG_QTY  ) 1,
    358                         (OS_TICK     ) 0,
    359                         (void       *) 0,
    360                         (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    361                         (OS_ERR     *)&err);
   \   000001EC   0xA809             ADD      R0,SP,#+36
   \   000001EE   0x9008             STR      R0,[SP, #+32]
   \   000001F0   0x2003             MOVS     R0,#+3
   \   000001F2   0x9007             STR      R0,[SP, #+28]
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x9006             STR      R0,[SP, #+24]
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x9005             STR      R0,[SP, #+20]
   \   000001FC   0x2001             MOVS     R0,#+1
   \   000001FE   0x9004             STR      R0,[SP, #+16]
   \   00000200   0x2080             MOVS     R0,#+128
   \   00000202   0x9003             STR      R0,[SP, #+12]
   \   00000204   0x200C             MOVS     R0,#+12
   \   00000206   0x9002             STR      R0,[SP, #+8]
   \   00000208   0x....             LDR.N    R0,??DataTable2_31
   \   0000020A   0x9001             STR      R0,[SP, #+4]
   \   0000020C   0x2009             MOVS     R0,#+9
   \   0000020E   0x9000             STR      R0,[SP, #+0]
   \   00000210   0x2300             MOVS     R3,#+0
   \   00000212   0x.... 0x....      ADR.W    R2,App_TaskAction
   \   00000216   0x....             LDR.N    R1,??DataTable2_32
   \   00000218   0x....             LDR.N    R0,??DataTable2_33
   \   0000021A   0x.... 0x....      BL       OSTaskCreate
    362              
    363          }
   \   0000021E   0xB00A             ADD      SP,SP,#+40
   \   00000220   0xBD10             POP      {R4,PC}          ;; return
    364          
    365          /*
    366          *********************************************************************************************************
    367          *                                          Uart_TaskStart()
    368          *
    369          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    370          *               initialize the ticker only once multitasking has started.
    371          *
    372          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    373          *
    374          * Return(s)   : none.
    375          *
    376          * Caller(s)   : This is a task.
    377          *
    378          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    379          *                   used.  The compiler should not generate any code for this statement.
    380          *********************************************************************************************************
    381          */
    382          

   \                                 In section .text, align 4, keep-with-next
    383          static void  App_TaskUartReceive (void *p_arg)
    384          {
   \                     App_TaskUartReceive: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    385            Uart_Receive(p_arg);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Uart_Receive
    386          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    387          
    388          /*
    389          *********************************************************************************************************
    390          *                                          App_TaskUartProcess()
    391          *v
    392          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    393          *               initialize the ticker only once multitasking has started.
    394          *
    395          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    396          *
    397          * Return(s)   : none.
    398          *
    399          * Caller(s)   : This is a task.
    400          *
    401          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    402          *                   used.  The compiler should not generate any code for this statement.
    403          *********************************************************************************************************
    404          */

   \                                 In section .text, align 4, keep-with-next
    405          static  void  App_TaskUartProcess (void *p_arg)
    406          {
   \                     App_TaskUartProcess: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    407            while(DEF_TRUE){
    408              Uart_Process();
   \                     ??App_TaskUartProcess_0: (+1)
   \   00000004   0x.... 0x....      BL       Uart_Process
   \   00000008   0xE7FC             B.N      ??App_TaskUartProcess_0
    409            }
    410          }
    411          
    412          /*
    413          *********************************************************************************************************
    414          *                                          App_TaskBoxProcess()
    415          *v
    416          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    417          *               initialize the ticker only once multitasking has started.
    418          *
    419          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    420          *
    421          * Return(s)   : none.
    422          *
    423          * Caller(s)   : This is a task.
    424          *
    425          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    426          *                   used.  The compiler should not generate any code for this statement.
    427          *********************************************************************************************************
    428          */

   \                                 In section .text, align 4, keep-with-next
    429          static  void  App_TaskBox (void *p_arg)
    430          {
   \                     App_TaskBox: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    431            Box_Process();
   \   00000004   0x.... 0x....      BL       Box_Process
    432          }
   \   00000008   0xBD10             POP      {R4,PC}          ;; return
    433          
    434          /*
    435          *********************************************************************************************************
    436          *                                          App_TaskLcdProcess()
    437          *v
    438          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    439          *               initialize the ticker only once multitasking has started.
    440          *
    441          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    442          *
    443          * Return(s)   : none.
    444          *
    445          * Caller(s)   : This is a task.
    446          *
    447          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    448          *                   used.  The compiler should not generate any code for this statement.
    449          *********************************************************************************************************
    450          */

   \                                 In section .text, align 4, keep-with-next
    451          static  void  App_TaskLcd (void *p_arg)
    452          {
   \                     App_TaskLcd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    453            Lcd_Process();
   \   00000004   0x.... 0x....      BL       Lcd_Process
    454          }
   \   00000008   0xBD10             POP      {R4,PC}          ;; return
    455          
    456          /*
    457          *********************************************************************************************************
    458          *                                          App_TaskBuzzProcess()
    459          *v
    460          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    461          *               initialize the ticker only once multitasking has started.
    462          *
    463          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    464          *
    465          * Return(s)   : none.
    466          *
    467          * Caller(s)   : This is a task.
    468          *
    469          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    470          *                   used.  The compiler should not generate any code for this statement.
    471          *********************************************************************************************************
    472          */

   \                                 In section .text, align 4, keep-with-next
    473          static  void  App_TaskBuzz (void *p_arg)
    474          {
   \                     App_TaskBuzz: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    475            static INT8U ucLedErrTimes=0;
    476            static INT8U ucLedTimes=0;
    477            static INT8U ucTimes=0;
    478              
    479            while(DEF_TRUE){
    480              if(++ucTimes>100){
   \                     ??App_TaskBuzz_0: (+1)
   \   00000004   0x....             LDR.N    R0,??DataTable2_34
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable2_34
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable2_34
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2865             CMP      R0,#+101
   \   00000014   0xDB05             BLT.N    ??App_TaskBuzz_1
    481                ucTimes=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable2_34
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    482                BSP_LED_Toggle(1);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       BSP_LED_Toggle
    483              }
    484              
    485              if(++ucLedTimes>50){
   \                     ??App_TaskBuzz_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable2_35
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable2_35
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
   \   0000002C   0x....             LDR.N    R0,??DataTable2_35
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2833             CMP      R0,#+51
   \   00000032   0xDB15             BLT.N    ??App_TaskBuzz_2
    486                ucLedTimes=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable2_35
   \   00000038   0x7008             STRB     R0,[R1, #+0]
    487                if(g_ucLedMode==LEDOUT_ON_MODE){
   \   0000003A   0x....             LDR.N    R0,??DataTable2_36
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD103             BNE.N    ??App_TaskBuzz_3
    488                  BSP_LED_On(3);
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      BL       BSP_LED_On
   \   00000048   0xE00A             B.N      ??App_TaskBuzz_2
    489                }else if(g_ucLedMode==LEDOUT_TOGGLE_MODE){
   \                     ??App_TaskBuzz_3: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable2_36
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xD103             BNE.N    ??App_TaskBuzz_4
    490                  BSP_LED_Toggle(3);
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000058   0xE002             B.N      ??App_TaskBuzz_2
    491                }else{
    492                  BSP_LED_Off(3);
   \                     ??App_TaskBuzz_4: (+1)
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x.... 0x....      BL       BSP_LED_Off
    493                }
    494              }
    495              
    496              if(++ucLedErrTimes>20){
   \                     ??App_TaskBuzz_2: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable2_37
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable2_37
   \   00000068   0x7008             STRB     R0,[R1, #+0]
   \   0000006A   0x....             LDR.N    R0,??DataTable2_37
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2815             CMP      R0,#+21
   \   00000070   0xDB15             BLT.N    ??App_TaskBuzz_5
    497                ucLedErrTimes=0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR.N    R1,??DataTable2_37
   \   00000076   0x7008             STRB     R0,[R1, #+0]
    498                if(g_ucLedErrMode==LEDOUT_ON_MODE){
   \   00000078   0x....             LDR.N    R0,??DataTable2_38
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD103             BNE.N    ??App_TaskBuzz_6
    499                  BSP_LED_On(2);
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0x.... 0x....      BL       BSP_LED_On
   \   00000086   0xE00A             B.N      ??App_TaskBuzz_5
    500                }else if(g_ucLedErrMode==LEDOUT_TOGGLE_MODE){
   \                     ??App_TaskBuzz_6: (+1)
   \   00000088   0x....             LDR.N    R0,??DataTable2_38
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2802             CMP      R0,#+2
   \   0000008E   0xD103             BNE.N    ??App_TaskBuzz_7
    501                  BSP_LED_Toggle(2);
   \   00000090   0x2002             MOVS     R0,#+2
   \   00000092   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000096   0xE002             B.N      ??App_TaskBuzz_5
    502                }else{
    503                  BSP_LED_Off(2);
   \                     ??App_TaskBuzz_7: (+1)
   \   00000098   0x2002             MOVS     R0,#+2
   \   0000009A   0x.... 0x....      BL       BSP_LED_Off
    504                }
    505              }
    506          
    507            #if SCAN_EN==1
    508              if(g_usrScan.bEnabled){
   \                     ??App_TaskBuzz_5: (+1)
   \   0000009E   0x....             LDR.N    R0,??DataTable2_39
   \   000000A0   0x8800             LDRH     R0,[R0, #+0]
   \   000000A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0x0BC0             LSRS     R0,R0,#+15
   \   000000A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD03F             BEQ.N    ??App_TaskBuzz_8
    509                if(g_usrScan.b14Times>0){
   \   000000AC   0x....             LDR.N    R0,??DataTable2_39
   \   000000AE   0x8800             LDRH     R0,[R0, #+0]
   \   000000B0   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   000000B2   0x0C80             LSRS     R0,R0,#+18
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD00A             BEQ.N    ??App_TaskBuzz_9
    510                  g_usrScan.b14Times--;
   \   000000B8   0x....             LDR.N    R0,??DataTable2_39
   \   000000BA   0x8800             LDRH     R0,[R0, #+0]
   \   000000BC   0xF410 0x4140      ANDS     R1,R0,#0xC000
   \   000000C0   0x1E40             SUBS     R0,R0,#+1
   \   000000C2   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   000000C4   0x0C80             LSRS     R0,R0,#+18
   \   000000C6   0x4308             ORRS     R0,R0,R1
   \   000000C8   0x....             LDR.N    R1,??DataTable2_39
   \   000000CA   0x8008             STRH     R0,[R1, #+0]
   \   000000CC   0xE02E             B.N      ??App_TaskBuzz_8
    511                }else{
    512                  if(g_usrScan.bMode==SCAN_OPEN_MODE){
   \                     ??App_TaskBuzz_9: (+1)
   \   000000CE   0x....             LDR.N    R0,??DataTable2_39
   \   000000D0   0x8800             LDRH     R0,[R0, #+0]
   \   000000D2   0xF3C0 0x3080      UBFX     R0,R0,#+14,#+1
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD014             BEQ.N    ??App_TaskBuzz_10
    513                    //开模式
    514                    CloseScan();
   \   000000DC   0x2101             MOVS     R1,#+1
   \   000000DE   0x2002             MOVS     R0,#+2
   \   000000E0   0x.... 0x....      BL       CSP_GPIO_BitSet
    515                    g_usrScan.bMode=SCAN_CLOSE_MODE;
   \   000000E4   0x....             LDR.N    R0,??DataTable2_39
   \   000000E6   0x8800             LDRH     R0,[R0, #+0]
   \   000000E8   0xF64B 0x71FF      MOVW     R1,#+49151
   \   000000EC   0x4008             ANDS     R0,R1,R0
   \   000000EE   0x....             LDR.N    R1,??DataTable2_39
   \   000000F0   0x8008             STRH     R0,[R1, #+0]
    516                    g_usrScan.b14Times=g_ucScanCloseTime;
   \   000000F2   0x....             LDR.N    R0,??DataTable2_39
   \   000000F4   0x8800             LDRH     R0,[R0, #+0]
   \   000000F6   0xF410 0x4040      ANDS     R0,R0,#0xC000
   \   000000FA   0x....             LDR.N    R1,??DataTable2_40
   \   000000FC   0x7809             LDRB     R1,[R1, #+0]
   \   000000FE   0x4308             ORRS     R0,R1,R0
   \   00000100   0x....             LDR.N    R1,??DataTable2_39
   \   00000102   0x8008             STRH     R0,[R1, #+0]
   \   00000104   0xE012             B.N      ??App_TaskBuzz_8
    517                  }else{
    518                    //关模式
    519                    OpenScan();
   \                     ??App_TaskBuzz_10: (+1)
   \   00000106   0x2101             MOVS     R1,#+1
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x.... 0x....      BL       CSP_GPIO_BitClr
    520                    g_usrScan.bMode=SCAN_OPEN_MODE;
   \   0000010E   0x....             LDR.N    R0,??DataTable2_39
   \   00000110   0x8800             LDRH     R0,[R0, #+0]
   \   00000112   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000116   0x....             LDR.N    R1,??DataTable2_39
   \   00000118   0x8008             STRH     R0,[R1, #+0]
    521                    g_usrScan.b14Times=g_ucScanOpenTime;
   \   0000011A   0x....             LDR.N    R0,??DataTable2_39
   \   0000011C   0x8800             LDRH     R0,[R0, #+0]
   \   0000011E   0xF410 0x4040      ANDS     R0,R0,#0xC000
   \   00000122   0x....             LDR.N    R1,??DataTable2_41
   \   00000124   0x7809             LDRB     R1,[R1, #+0]
   \   00000126   0x4308             ORRS     R0,R1,R0
   \   00000128   0x....             LDR.N    R1,??DataTable2_39
   \   0000012A   0x8008             STRH     R0,[R1, #+0]
    522                  }
    523                }
    524              }
    525            #endif    
    526              
    527              BSP_OS_TimeDlyMs(10);    
   \                     ??App_TaskBuzz_8: (+1)
   \   0000012C   0x200A             MOVS     R0,#+10
   \   0000012E   0x.... 0x....      BL       BSP_OS_TimeDlyMs
    528              Buzz_Process();
   \   00000132   0x.... 0x....      BL       Buzz_Process
   \   00000136   0xE765             B.N      ??App_TaskBuzz_0
    529              
    530            }
    531          }

   \                                 In section .bss, align 1
   \                     `App_TaskBuzz::ucLedErrTimes`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `App_TaskBuzz::ucLedTimes`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `App_TaskBuzz::ucTimes`:
   \   00000000                      DS8 1
    532          
    533          /*
    534          *********************************************************************************************************
    535          *                                          App_TaskActionProcess()
    536          *v
    537          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    538          *               initialize the ticker only once multitasking has started.
    539          *
    540          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    541          *
    542          * Return(s)   : none.
    543          *
    544          * Caller(s)   : This is a task.
    545          *
    546          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    547          *                   used.  The compiler should not generate any code for this statement.
    548          *********************************************************************************************************
    549          */

   \                                 In section .text, align 4, keep-with-next
    550          static  void  App_TaskAction (void *p_arg)
    551          {
   \                     App_TaskAction: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    552            Action_Process();
   \   00000004   0x.... 0x....      BL       Action_Process
    553          }
   \   00000008   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x42 0x6F          DC8      "Box"
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4C 0x63          DC8      "Lcd"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     App_TaskStartStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     App_TaskStartTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     App_TaskUart0ReceiveStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     m_ucUart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     App_TaskUart0ReceiveTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     App_TaskUart1ReceiveStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     m_ucUart+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     App_TaskUart1ReceiveTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     App_TaskUart2ReceiveStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     m_ucUart+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     App_TaskUart2ReceiveTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     App_TaskUart3ReceiveStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     m_ucUart+0x3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     App_TaskUart3ReceiveTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     App_TaskUartProcessStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x........         DC32     App_TaskUartProcessTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   0x........         DC32     App_TaskBoxStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   0x........         DC32     App_TaskBoxTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   0x........         DC32     App_TaskLcdStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   0x........         DC32     App_TaskLcdTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_28:
   \   00000000   0x........         DC32     App_TaskBuzzStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_29:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_30:
   \   00000000   0x........         DC32     App_TaskBuzzTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_31:
   \   00000000   0x........         DC32     App_TaskActionStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_32:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_33:
   \   00000000   0x........         DC32     App_TaskActionTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_34:
   \   00000000   0x........         DC32     `App_TaskBuzz::ucTimes`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_35:
   \   00000000   0x........         DC32     `App_TaskBuzz::ucLedTimes`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_36:
   \   00000000   0x........         DC32     g_ucLedMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_37:
   \   00000000   0x........         DC32     `App_TaskBuzz::ucLedErrTimes`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_38:
   \   00000000   0x........         DC32     g_ucLedErrMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_39:
   \   00000000   0x........         DC32     g_usrScan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_40:
   \   00000000   0x........         DC32     g_ucScanCloseTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_41:
   \   00000000   0x........         DC32     g_ucScanOpenTime

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Start"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x55 0x61          DC8 "Uart0 Rx"
   \              0x72 0x74    
   \              0x30 0x20    
   \              0x52 0x78    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x55 0x61          DC8 "Uart1 Receive"
   \              0x72 0x74    
   \              0x31 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x55 0x61          DC8 "Uart2 Receive"
   \              0x72 0x74    
   \              0x32 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x55 0x61          DC8 "Uart3 Receive"
   \              0x72 0x74    
   \              0x33 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x55 0x61          DC8 "Uart3 Process"
   \              0x72 0x74    
   \              0x33 0x20    
   \              0x50 0x72    
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x42 0x6F          DC8 "Box"
   \              0x78 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4C 0x63          DC8 "Lcd"
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x42 0x75          DC8 "Buzz"
   \              0x7A 0x7A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x41 0x63          DC8 "Action"
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000007   0x00               DC8 0
    554          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_ObjCreate
       8   App_TaskAction
         8   -> Action_Process
       8   App_TaskBox
         8   -> Box_Process
       8   App_TaskBuzz
         8   -> BSP_LED_Off
         8   -> BSP_LED_On
         8   -> BSP_LED_Toggle
         8   -> BSP_OS_TimeDlyMs
         8   -> Buzz_Process
         8   -> CSP_GPIO_BitClr
         8   -> CSP_GPIO_BitSet
      48   App_TaskCreate
        48   -> CardBoxSetSelected
        48   -> DEV_TYPE
        48   -> OSTaskCreate
        48   -> ScanInit
       8   App_TaskLcd
         8   -> Lcd_Process
       8   App_TaskStart
         8   -> App_ObjCreate
         8   -> App_SerialInit
         8   -> App_TaskCreate
         8   -> BSP_LED_Off
         8   -> BSP_LED_On
         8   -> BSP_Start
         8   -> Box_Init
         8   -> Key_Process
       8   App_TaskUartProcess
         8   -> Uart_Process
       8   App_TaskUartReceive
         8   -> Uart_Receive
      48   main
        48   -> BSP_Init
        48   -> CPU_Init
        48   -> GlobalInit
        48   -> Mem_Init
        48   -> OSInit
        48   -> OSStart
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_28
       4  ??DataTable2_29
       4  ??DataTable2_3
       4  ??DataTable2_30
       4  ??DataTable2_31
       4  ??DataTable2_32
       4  ??DataTable2_33
       4  ??DataTable2_34
       4  ??DataTable2_35
       4  ??DataTable2_36
       4  ??DataTable2_37
       4  ??DataTable2_38
       4  ??DataTable2_39
       4  ??DataTable2_4
       4  ??DataTable2_40
       4  ??DataTable2_41
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  ?_0
      12  ?_1
      16  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
       4  ?_6
       4  ?_7
       8  ?_8
       8  ?_9
       2  App_ObjCreate
      10  App_TaskAction
      10  App_TaskBox
     312  App_TaskBuzz
     546  App_TaskCreate
      10  App_TaskLcd
      42  App_TaskStart
     768  App_TaskStartStk
     200  App_TaskStartTCB
      10  App_TaskUartProcess
      12  App_TaskUartReceive
       4  m_ucUart
      90  main
       1  ucLedErrTimes
       1  ucLedTimes
       1  ucTimes

 
   971 bytes in section .bss
     4 bytes in section .data
   116 bytes in section .rodata
 1 212 bytes in section .text
 
 1 212 bytes of CODE  memory
   116 bytes of CONST memory
   975 bytes of DATA  memory

Errors: none
Warnings: none
