###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\cstartup.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\cstartup.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2012; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                         EXCEPTION VECTORS
     18          *
     19          *                                        IAR Development Kits
     20          *                                               on the
     21          *
     22          *                                            NXP LPC1768
     23          *                                      LPC1766-SK KICKSTART KIT
     24          *
     25          * Filename      : app_vect.c
     26          * Version       : V1.00
     27          * Programmer(s) : FT
     28          *                 DC
     29          *********************************************************************************************************
     30          */
     31          
     32          #include  <cpu.h>
     33          #include  <os_cpu.h>
     34          #include  <os_csp.h>
     35          #include  <lib_def.h>
     36          
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                            LOCAL DEFINES
     41          *********************************************************************************************************
     42          */
     43          
     44          
     45          /*
     46          *********************************************************************************************************
     47          *                                          LOCAL DATA TYPES
     48          *********************************************************************************************************
     49          */
     50          
     51          typedef  union {
     52              CPU_FNCT_VOID   Fnct;
     53              void           *Ptr;
     54          } APP_INTVECT_ELEM;
     55          
     56          /*
     57          *********************************************************************************************************
     58          *                                            LOCAL TABLES
     59          *********************************************************************************************************
     60          */
     61          
     62          
     63          /*
     64          *********************************************************************************************************
     65          *                                       LOCAL GLOBAL VARIABLES
     66          *********************************************************************************************************
     67          */
     68          
     69          
     70          /*
     71          *********************************************************************************************************
     72          *                                      LOCAL FUNCTION PROTOTYPES
     73          *********************************************************************************************************
     74          */
     75          
     76          #pragma language=extended
     77          #pragma segment="CSTACK"
     78          
     79          static  void  App_NMI_ISR        (void);
     80          
     81          static  void  App_Fault_ISR      (void);
     82          
     83          static  void  App_BusFault_ISR   (void);
     84          
     85          static  void  App_UsageFault_ISR (void);
     86          
     87          static  void  App_MemFault_ISR   (void);
     88          
     89          static  void  App_Spurious_ISR   (void);
     90          
     91          extern  void  __iar_program_start(void);
     92          
     93          
     94          /*
     95          *********************************************************************************************************
     96          *                                     LOCAL CONFIGURATION ERRORS
     97          *********************************************************************************************************
     98          */
     99          
    100          /*
    101          *********************************************************************************************************
    102          *                                  EXCEPTION / INTERRUPT VECTOR TABLE
    103          *
    104          * Note(s) : (1) The Cortex-M3 may have up to 256 external interrupts, which are the final entries in the
    105          *               vector table.  The LPC17xx has 34 external interrupt vectors.
    106          *********************************************************************************************************
    107          */
    108          

   \                                 In section .intvec, align 4, root
    109          __root  const  APP_INTVECT_ELEM  __vector_table[] @ ".intvec" = {
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), __iar_program_start, App_NMI_ISR, App_Fault_ISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 App_MemFault_ISR, App_BusFault_ISR, App_UsageFault_ISR
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 App_Spurious_ISR, OS_CPU_PendSVHandler, OS_CPU_SysTickHandler
   \              0x........   
   \              0x........   
   \   00000040   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000058   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000070   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   0000007C   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000088   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000094   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000A0   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000AC   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000B8   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000C4   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
    110              { .Ptr = (void *)__sfe( "CSTACK" )},                        /*  0, SP start value.                                */
    111              __iar_program_start,                                        /*  1, PC start value.                                */
    112              App_NMI_ISR,                                                /*  2, NMI.                                           */
    113              App_Fault_ISR,                                              /*  3, Hard Fault.                                    */
    114              App_MemFault_ISR,                                           /*  4, Memory Management.                             */
    115              App_BusFault_ISR,                                           /*  5, Bus Fault.                                     */
    116              App_UsageFault_ISR,                                         /*  6, Usage Fault.                                   */
    117              App_Spurious_ISR,                                           /*  7, Reserved.                                      */
    118              App_Spurious_ISR,                                           /*  8, Reserved.                                      */
    119              App_Spurious_ISR,                                           /*  9, Reserved.                                      */
    120              App_Spurious_ISR,                                           /* 10, Reserved.                                      */
    121              App_Spurious_ISR,                                           /* 11, SVCall.                                        */
    122              App_Spurious_ISR,                                           /* 12, Debug Monitor.                                 */
    123              App_Spurious_ISR,                                           /* 13, Reserved.                                      */
    124              OS_CPU_PendSVHandler,                                       /* 14, PendSV Handler.                                */
    125              OS_CPU_SysTickHandler,                                      /* 15, uC/OS-III Tick ISR Handler.                    */
    126          
    127              OS_CPU_IntHandler,                                          /* 16, INTISR[  0]  WatchDog Timer                    */
    128              OS_CPU_IntHandler,                                          /* 17, INTISR[  1]  Timer 0 (Match 0-3 Capture 0-3).  */
    129              OS_CPU_IntHandler,                                          /* 18, INTISR[  2]  Timer 1 (Match 0-3 Capture 0-3).  */
    130              OS_CPU_IntHandler,                                          /* 19, INTISR[  3]  Timer 2 (Match 0-3 Capture 0-3).  */
    131              OS_CPU_IntHandler,                                          /* 20, INTISR[  4]  Timer 3 (Match 0-3 Capture 0-3).  */
    132              OS_CPU_IntHandler,                                          /* 21, INTISR[  5]  UART 0  (RLS, THRE, RDA, CTI)     */
    133              OS_CPU_IntHandler,                                          /* 22, INTISR[  6]  UART 1  (RLS, THRE, RDA, CTI)     */
    134              OS_CPU_IntHandler,                                          /* 23, INTISR[  7]  UART 2  (RLS, THRE, RDA, CTI)     */
    135              OS_CPU_IntHandler,                                          /* 24, INTISR[  8]  UART 3  (RLS, THRE, RDA, CTI)     */
    136              OS_CPU_IntHandler,                                          /* 25, INTISR[  9]  PWM Interrupt                     */
    137              OS_CPU_IntHandler,                                          /* 26, INTISR[ 10]  I2C0   (RLS, THRE, RDA, CTI)      */
    138              OS_CPU_IntHandler,                                          /* 27, INTISR[ 11]  I2C1   (RLS, THRE, RDA, CTI)      */
    139              OS_CPU_IntHandler,                                          /* 28, INTISR[ 12]  I2C2   (RLS, THRE, RDA, CTI)      */
    140              OS_CPU_IntHandler,                                          /* 29, INTISR[ 13]  SPI0    (SPIF, MODF)              */
    141              OS_CPU_IntHandler,                                          /* 30, INTISR[ 14]  SSP0                              */
    142              OS_CPU_IntHandler,                                          /* 31, INTISR[ 15]  SSP1                              */
    143              OS_CPU_IntHandler,                                          /* 32, INTISR[ 15]  PLL lock (PLOCK)                  */
    144              OS_CPU_IntHandler,                                          /* 33, INTISR[ 15]  Real Time Clock Interrupt         */
    145              OS_CPU_IntHandler,                                          /* 34, INTISR[  7]  External interrupt 0 (EINT0)      */
    146              OS_CPU_IntHandler,                                          /* 35, INTISR[  8]  External interrupt 0 (EINT0)      */
    147              OS_CPU_IntHandler,                                          /* 36, INTISR[  9]  External interrupt 0 (EINT0)      */
    148              OS_CPU_IntHandler,                                          /* 37, INTISR[ 10]  External interrupt 0 (EINT0).     */
    149              OS_CPU_IntHandler,                                          /* 38, INTISR[ 11]  A/D Converter 0 end of conversion */
    150              OS_CPU_IntHandler,                                          /* 39, INTISR[ 12]  Brown out detect                  */
    151              OS_CPU_IntHandler,                                          /* 40, INTISR[ 12]  USB Interrupts, DMA Interrupt     */
    152              OS_CPU_IntHandler,                                          /* 41, INTISR[ 12]  CAN Interrupt                     */
    153              OS_CPU_IntHandler,                                          /* 42, INTISR[ 12]  IntSattus of DMA channel 0/1      */
    154              OS_CPU_IntHandler,                                          /* 23, INTISR[ 12]  SI (state change)                 */
    155              OS_CPU_IntHandler,                                          /* 44, INTISR[ 12]  Ethernet Interrupt                */
    156              OS_CPU_IntHandler,                                          /* 45, INTISR[ 12]  Repetitive interrupt timer        */
    157              OS_CPU_IntHandler,                                          /* 46, INTISR[ 12]  Motor Control PWM                 */
    158              OS_CPU_IntHandler,                                          /* 47, INTISR[ 12]  Quadrature Encoder                */
    159              OS_CPU_IntHandler,                                          /* 48, INTISR[ 12]  PLL1 lock (PLOCK)                 */
    160              OS_CPU_IntHandler,                                          /* 49, INTISR[ 12]  USB Activity                      */
    161              OS_CPU_IntHandler,                                          /* 50, INTISR[ 12]  CAN Activity                      */
    162          };
    163          
    164          
    165          /*
    166          *********************************************************************************************************
    167          *                                            App_NMI_ISR()
    168          *
    169          * Description : Handle Non-Maskable Interrupt (NMI).
    170          *
    171          * Argument(s) : none.
    172          *
    173          * Return(s)   : none.
    174          *
    175          * Caller(s)   : This is an ISR.
    176          *
    177          * Note(s)     : (1) Since the NMI is not being used, this serves merely as a catch for a spurious
    178          *                   exception.
    179          *********************************************************************************************************
    180          */
    181          

   \                                 In section .text, align 2, keep-with-next
    182          static  void  App_NMI_ISR (void)
    183          {
    184              while (DEF_TRUE) {
   \                     App_NMI_ISR: (+1)
   \                     ??App_NMI_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_NMI_ISR_0
    185                  ;
    186              }
    187          }
    188          
    189          
    190          /*
    191          *********************************************************************************************************
    192          *                                             App_Fault_ISR()
    193          *
    194          * Description : Handle hard fault.
    195          *
    196          * Argument(s) : none.
    197          *
    198          * Return(s)   : none.
    199          *
    200          * Caller(s)   : This is an ISR.
    201          *
    202          * Note(s)     : none.
    203          *********************************************************************************************************
    204          */
    205          

   \                                 In section .text, align 2, keep-with-next
    206          static  void  App_Fault_ISR (void)
    207          {
    208              while (DEF_TRUE) {
   \                     App_Fault_ISR: (+1)
   \                     ??App_Fault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Fault_ISR_0
    209                  ;
    210              }
    211          }
    212          
    213          
    214          /*
    215          *********************************************************************************************************
    216          *                                           App_BusFault_ISR()
    217          *
    218          * Description : Handle bus fault.
    219          *
    220          * Argument(s) : none.
    221          *
    222          * Return(s)   : none.
    223          *
    224          * Caller(s)   : This is an ISR.
    225          *
    226          * Note(s)     : none.
    227          *********************************************************************************************************
    228          */
    229          

   \                                 In section .text, align 2, keep-with-next
    230          static  void  App_BusFault_ISR (void)
    231          {
    232              while (DEF_TRUE) {
   \                     App_BusFault_ISR: (+1)
   \                     ??App_BusFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_BusFault_ISR_0
    233                  ;
    234              }
    235          }
    236          
    237          
    238          /*
    239          *********************************************************************************************************
    240          *                                          App_UsageFault_ISR()
    241          *
    242          * Description : Handle usage fault.
    243          *
    244          * Argument(s) : none.
    245          *
    246          * Return(s)   : none.
    247          *
    248          * Caller(s)   : This is an ISR.
    249          *
    250          * Note(s)     : none.
    251          *********************************************************************************************************
    252          */
    253          

   \                                 In section .text, align 2, keep-with-next
    254          static  void  App_UsageFault_ISR (void)
    255          {
    256              while (DEF_TRUE) {
   \                     App_UsageFault_ISR: (+1)
   \                     ??App_UsageFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_UsageFault_ISR_0
    257                  ;
    258              }
    259          }
    260          
    261          
    262          /*
    263          *********************************************************************************************************
    264          *                                           App_MemFault_ISR()
    265          *
    266          * Description : Handle memory fault.
    267          *
    268          * Argument(s) : none.
    269          *
    270          * Return(s)   : none.
    271          *
    272          * Caller(s)   : This is an ISR.
    273          *
    274          * Note(s)     : none.
    275          *********************************************************************************************************
    276          */
    277          

   \                                 In section .text, align 2, keep-with-next
    278          static  void  App_MemFault_ISR (void)
    279          {
    280              while (DEF_TRUE) {
   \                     App_MemFault_ISR: (+1)
   \                     ??App_MemFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_MemFault_ISR_0
    281                  ;
    282              }
    283          }
    284          
    285          
    286          /*
    287          *********************************************************************************************************
    288          *                                           App_Spurious_ISR()
    289          *
    290          * Description : Handle spurious interrupt.
    291          *
    292          * Argument(s) : none.
    293          *
    294          * Return(s)   : none.
    295          *
    296          * Caller(s)   : This is an ISR.
    297          *
    298          * Note(s)     : none.
    299          *********************************************************************************************************
    300          */
    301          

   \                                 In section .text, align 2, keep-with-next
    302          static  void  App_Spurious_ISR (void)
    303          {
    304              while (DEF_TRUE) {
   \                     App_Spurious_ISR: (+1)
   \                     ??App_Spurious_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Spurious_ISR_0
    305                  ;
    306              }
    307          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_BusFault_ISR
       0   App_Fault_ISR
       0   App_MemFault_ISR
       0   App_NMI_ISR
       0   App_Spurious_ISR
       0   App_UsageFault_ISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  App_BusFault_ISR
       2  App_Fault_ISR
       2  App_MemFault_ISR
       2  App_NMI_ISR
       2  App_Spurious_ISR
       2  App_UsageFault_ISR
     204  __vector_table

 
 204 bytes in section .intvec
  12 bytes in section .text
 
  12 bytes of CODE  memory
 204 bytes of CONST memory

Errors: none
Warnings: none
