###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:04
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\i2c.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\i2c.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\i2c.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\i2c.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\i2c.c
      1          /*******************************************************************************************************
      2          *
      3          *                                 (c) Copyright 2004-2007, John Tonny
      4          *
      5          *                                           All Rights Reserved
      6          *
      7          ********************************************************************************************************
      8          *
      9          *--------------文件信息---------------------------------------------------------------------------------
     10          *文   件   名: I2c.C
     11          *创   建   人: John Tonny
     12          *最后修改日期: 2005年05月01日
     13          *描        述:
     14          *
     15          *--------------历史版本信息-----------------------------------------------------------------------------
     16          * 创建人: John Tonny
     17          * 版  本: V1.0
     18          * 日　期: 2005年05月01日
     19          * 描　述: 原始版本
     20          *
     21          *-------------------------------------------------------------------------------------------------------
     22          * 修改人:
     23          * 版  本:
     24          * 日　期:
     25          * 描　述:
     26          *
     27          *--------------当前版本修订-----------------------------------------------------------------------------
     28          * 修改人:
     29          * 日　期:
     30          * 描　述:
     31          *
     32          *-------------------------------------------------------------------------------------------------------
     33          *******************************************************************************************************/
     34          
     35          #define  I2C_GLOBALS
     36          #include "includes.h"
     37            
     38          
     39          #define I2C_CON_FLAGS (I2CONSET_AA | I2CONSET_SI | I2CONSET_STO | I2CONSET_STA)
     40          

   \                                 In section .bss, align 4
     41          static I2C_XFER_T g_usrI2c;
   \                     g_usrI2c:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     42          static BSP_OS_SEM *g_pI2cSem;
   \                     g_pI2cSem:
   \   00000000                      DS8 4
     43          
     44          /*******************************************************************************************************
     45          ** 函数名称: LPC17xx_I2C0_IntHandler
     46          ** 功能描述:
     47          ** 输 　 入:
     48          **
     49          ** 输　  出:
     50          **
     51          ** 全局变量:
     52          ** 调用模块:
     53          **
     54          ** 作　  者: John Tonny
     55          ** 日　  期: 2005年05月01日
     56          **------------------------------------------------------------------------------------------------------
     57          ** 修 改 人:
     58          ** 日　  期:
     59          **------------------------------------------------------------------------------------------------------
     60          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          static void LPC17xx_I2C0_IntHandler(void  *p_arg) 
     62          {
   \                     LPC17xx_I2C0_IntHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     63            // this handler deals with master read and master write only 
     64            uint8_t StatValue;
     65            uint32_t cclr = I2C_CON_FLAGS;
   \   00000004   0x263C             MOVS     R6,#+60
     66          
     67            g_usrI2c.timeOut=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable3
   \   0000000A   0x6148             STR      R0,[R1, #+20]
     68          	
     69            StatValue = I2C0STAT;
   \   0000000C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x4001c004
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0005             MOVS     R5,R0
     70            switch ( StatValue ){
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD078             BEQ.N    ??LPC17xx_I2C0_IntHandler_0
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xD014             BEQ.N    ??LPC17xx_I2C0_IntHandler_1
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xD012             BEQ.N    ??LPC17xx_I2C0_IntHandler_1
   \   00000022   0x2818             CMP      R0,#+24
   \   00000024   0xD01E             BEQ.N    ??LPC17xx_I2C0_IntHandler_2
   \   00000026   0x2820             CMP      R0,#+32
   \   00000028   0xD062             BEQ.N    ??LPC17xx_I2C0_IntHandler_3
   \   0000002A   0x2828             CMP      R0,#+40
   \   0000002C   0xD01A             BEQ.N    ??LPC17xx_I2C0_IntHandler_2
   \   0000002E   0x2830             CMP      R0,#+48
   \   00000030   0xD05E             BEQ.N    ??LPC17xx_I2C0_IntHandler_3
   \   00000032   0x2838             CMP      R0,#+56
   \   00000034   0xD066             BEQ.N    ??LPC17xx_I2C0_IntHandler_4
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xD04A             BEQ.N    ??LPC17xx_I2C0_IntHandler_5
   \   0000003A   0x2848             CMP      R0,#+72
   \   0000003C   0xD058             BEQ.N    ??LPC17xx_I2C0_IntHandler_3
   \   0000003E   0x2850             CMP      R0,#+80
   \   00000040   0xD037             BEQ.N    ??LPC17xx_I2C0_IntHandler_6
   \   00000042   0x2858             CMP      R0,#+88
   \   00000044   0xD033             BEQ.N    ??LPC17xx_I2C0_IntHandler_7
   \   00000046   0xE066             B.N      ??LPC17xx_I2C0_IntHandler_8
     71              case 0x08:		// Start condition on bus 
     72              case 0x10:		// Repeated start condition 
     73                I2C0DAT= (g_usrI2c.slaveAddr) | (g_usrI2c.txSz == 0);
   \                     ??LPC17xx_I2C0_IntHandler_1: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable3
   \   0000004A   0x6880             LDR      R0,[R0, #+8]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD101             BNE.N    ??LPC17xx_I2C0_IntHandler_9
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE000             B.N      ??LPC17xx_I2C0_IntHandler_10
   \                     ??LPC17xx_I2C0_IntHandler_9: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \                     ??LPC17xx_I2C0_IntHandler_10: (+1)
   \   00000056   0x....             LDR.N    R1,??DataTable3
   \   00000058   0x7809             LDRB     R1,[R1, #+0]
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x4308             ORRS     R0,R0,R1
   \   0000005E   0x....             LDR.N    R1,??DataTable3_2  ;; 0x4001c008
   \   00000060   0x6008             STR      R0,[R1, #+0]
     74                break;
   \   00000062   0xE058             B.N      ??LPC17xx_I2C0_IntHandler_8
     75          
     76              // Tx handling 
     77              case 0x18:		// SLA+W sent and ACK received 
     78              case 0x28:		// DATA sent and ACK received 
     79                if (!g_usrI2c.txSz) {
   \                     ??LPC17xx_I2C0_IntHandler_2: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable3
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD110             BNE.N    ??LPC17xx_I2C0_IntHandler_11
     80                  cclr &= ~(g_usrI2c.rxSz ? I2CONSET_STA : I2CONSET_STO);
   \   0000006C   0x....             LDR.N    R0,??DataTable3
   \   0000006E   0x6900             LDR      R0,[R0, #+16]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD001             BEQ.N    ??LPC17xx_I2C0_IntHandler_12
   \   00000074   0x2020             MOVS     R0,#+32
   \   00000076   0xE000             B.N      ??LPC17xx_I2C0_IntHandler_13
   \                     ??LPC17xx_I2C0_IntHandler_12: (+1)
   \   00000078   0x2010             MOVS     R0,#+16
   \                     ??LPC17xx_I2C0_IntHandler_13: (+1)
   \   0000007A   0x4386             BICS     R6,R6,R0
     81                  if(!g_usrI2c.rxSz){
   \   0000007C   0x....             LDR.N    R0,??DataTable3
   \   0000007E   0x6900             LDR      R0,[R0, #+16]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD113             BNE.N    ??LPC17xx_I2C0_IntHandler_14
     82                    BSP_OS_SemPost(g_pI2cSem);
   \   00000084   0x....             LDR.N    R0,??DataTable3_3
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x.... 0x....      BL       BSP_OS_SemPost
   \   0000008C   0xE00E             B.N      ??LPC17xx_I2C0_IntHandler_14
     83                  }
     84                } else {
     85                  I2C0DAT= *g_usrI2c.txBuff++;
   \                     ??LPC17xx_I2C0_IntHandler_11: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable3
   \   00000090   0x6840             LDR      R0,[R0, #+4]
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x....             LDR.N    R1,??DataTable3_2  ;; 0x4001c008
   \   00000096   0x6008             STR      R0,[R1, #+0]
   \   00000098   0x....             LDR.N    R0,??DataTable3
   \   0000009A   0x6840             LDR      R0,[R0, #+4]
   \   0000009C   0x1C40             ADDS     R0,R0,#+1
   \   0000009E   0x....             LDR.N    R1,??DataTable3
   \   000000A0   0x6048             STR      R0,[R1, #+4]
     86                  g_usrI2c.txSz--;
   \   000000A2   0x....             LDR.N    R0,??DataTable3
   \   000000A4   0x6880             LDR      R0,[R0, #+8]
   \   000000A6   0x1E40             SUBS     R0,R0,#+1
   \   000000A8   0x....             LDR.N    R1,??DataTable3
   \   000000AA   0x6088             STR      R0,[R1, #+8]
     87                }
     88                break;
   \                     ??LPC17xx_I2C0_IntHandler_14: (+1)
   \   000000AC   0xE033             B.N      ??LPC17xx_I2C0_IntHandler_8
     89          
     90              // Rx handling 
     91              case 0x58:		// Data Received and NACK sent 
     92                cclr &= ~I2CONSET_STO;
   \                     ??LPC17xx_I2C0_IntHandler_7: (+1)
   \   000000AE   0xF036 0x0610      BICS     R6,R6,#0x10
     93          
     94              case 0x50:		// Data Received and ACK sent 
     95                *g_usrI2c.rxBuff++ = I2C0DAT;
   \                     ??LPC17xx_I2C0_IntHandler_6: (+1)
   \   000000B2   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4001c008
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x....             LDR.N    R1,??DataTable3
   \   000000B8   0x68C9             LDR      R1,[R1, #+12]
   \   000000BA   0x7008             STRB     R0,[R1, #+0]
   \   000000BC   0x....             LDR.N    R0,??DataTable3
   \   000000BE   0x68C0             LDR      R0,[R0, #+12]
   \   000000C0   0x1C40             ADDS     R0,R0,#+1
   \   000000C2   0x....             LDR.N    R1,??DataTable3
   \   000000C4   0x60C8             STR      R0,[R1, #+12]
     96                g_usrI2c.rxSz--;
   \   000000C6   0x....             LDR.N    R0,??DataTable3
   \   000000C8   0x6900             LDR      R0,[R0, #+16]
   \   000000CA   0x1E40             SUBS     R0,R0,#+1
   \   000000CC   0x....             LDR.N    R1,??DataTable3
   \   000000CE   0x6108             STR      R0,[R1, #+16]
     97          
     98              case 0x40:		// SLA+R sent and ACK received 
     99                if (g_usrI2c.rxSz > 1) {
   \                     ??LPC17xx_I2C0_IntHandler_5: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable3
   \   000000D2   0x6900             LDR      R0,[R0, #+16]
   \   000000D4   0x2802             CMP      R0,#+2
   \   000000D6   0xDB02             BLT.N    ??LPC17xx_I2C0_IntHandler_15
    100                  cclr &= ~I2CONSET_AA;
   \   000000D8   0xF036 0x0604      BICS     R6,R6,#0x4
   \   000000DC   0xE007             B.N      ??LPC17xx_I2C0_IntHandler_16
    101                }else if(!g_usrI2c.rxSz){
   \                     ??LPC17xx_I2C0_IntHandler_15: (+1)
   \   000000DE   0x....             LDR.N    R0,??DataTable3
   \   000000E0   0x6900             LDR      R0,[R0, #+16]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD103             BNE.N    ??LPC17xx_I2C0_IntHandler_16
    102                  BSP_OS_SemPost(g_pI2cSem);
   \   000000E6   0x....             LDR.N    R0,??DataTable3_3
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x.... 0x....      BL       BSP_OS_SemPost
    103                }
    104                break;
   \                     ??LPC17xx_I2C0_IntHandler_16: (+1)
   \   000000EE   0xE012             B.N      ??LPC17xx_I2C0_IntHandler_8
    105          
    106              // NAK Handling 
    107              case 0x20:		// SLA+W sent NAK received 
    108              case 0x30:		// DATA sent NAK received 
    109              case 0x48:		// SLA+R sent NAK received 
    110                g_usrI2c.status = I2C_STATUS_NAK;
   \                     ??LPC17xx_I2C0_IntHandler_3: (+1)
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x....             LDR.N    R1,??DataTable3
   \   000000F4   0x7608             STRB     R0,[R1, #+24]
    111                cclr &= ~I2CONSET_STO;
   \   000000F6   0xF036 0x0610      BICS     R6,R6,#0x10
    112                BSP_OS_SemPost(g_pI2cSem);
   \   000000FA   0x....             LDR.N    R0,??DataTable3_3
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x.... 0x....      BL       BSP_OS_SemPost
    113                break;
   \   00000102   0xE008             B.N      ??LPC17xx_I2C0_IntHandler_8
    114          
    115              case 0x38:		// Arbitration lost 
    116                g_usrI2c.status = I2C_STATUS_ARBLOST;
   \                     ??LPC17xx_I2C0_IntHandler_4: (+1)
   \   00000104   0x2002             MOVS     R0,#+2
   \   00000106   0x....             LDR.N    R1,??DataTable3
   \   00000108   0x7608             STRB     R0,[R1, #+24]
    117                break;
   \   0000010A   0xE004             B.N      ??LPC17xx_I2C0_IntHandler_8
    118          
    119              // Bus Error 
    120              case 0x00:
    121                g_usrI2c.status = I2C_STATUS_BUSERR;
   \                     ??LPC17xx_I2C0_IntHandler_0: (+1)
   \   0000010C   0x2003             MOVS     R0,#+3
   \   0000010E   0x....             LDR.N    R1,??DataTable3
   \   00000110   0x7608             STRB     R0,[R1, #+24]
    122                cclr &= ~I2CONSET_STO;
   \   00000112   0xF036 0x0610      BICS     R6,R6,#0x10
    123                break;  
    124              }
    125          
    126            // Set clear control flags 
    127            I2C0CONSET = cclr ^ I2C_CON_FLAGS;
   \                     ??LPC17xx_I2C0_IntHandler_8: (+1)
   \   00000116   0xF096 0x003C      EORS     R0,R6,#0x3C
   \   0000011A   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4001c000
   \   0000011C   0x6008             STR      R0,[R1, #+0]
    128            I2C0CONCLR = cclr;
   \   0000011E   0x....             LDR.N    R0,??DataTable3_5  ;; 0x4001c018
   \   00000120   0x6006             STR      R6,[R0, #+0]
    129          }
   \   00000122   0xBD70             POP      {R4-R6,PC}       ;; return
    130          
    131          /*******************************************************************************************************
    132          ** 函数名称: I2cStart
    133          ** 功能描述:
    134          ** 输 　 入:
    135          **
    136          ** 输　  出:
    137          **
    138          ** 全局变量:
    139          ** 调用模块:
    140          **
    141          ** 作　  者: John Tonny
    142          ** 日　  期: 2005年05月01日
    143          **------------------------------------------------------------------------------------------------------
    144          ** 修 改 人:
    145          ** 日　  期:
    146          **------------------------------------------------------------------------------------------------------
    147          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    148          uint32_t I2c0Start(void)
    149          {
    150            uint32_t retVal = FALSE;
   \                     I2c0Start: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    151           
    152            /*I2CTimeout = 0;
    153            //--- Issue a start condition ---
    154            I2C0CONSET = I2CONSET_STA;	// Set Start flag 
    155              
    156            //--- Wait until START transmitted ---
    157            while( 1 ){
    158              if ( I2CMasterState == I2C_STARTED ){
    159                retVal = TRUE;
    160                break;	
    161              }
    162              if ( I2CTimeout >= MAX_TIMEOUT ){
    163                retVal = FALSE;
    164                break;
    165              }
    166              I2CTimeout++;
    167            }*/
    168            return( retVal );
   \   00000002   0x4770             BX       LR               ;; return
    169          }
    170          
    171          /*******************************************************************************************************
    172          ** 函数名称: I2cStop
    173          ** 功能描述:
    174          ** 输 　 入:
    175          **
    176          ** 输　  出:
    177          **
    178          ** 全局变量:
    179          ** 调用模块:
    180          **
    181          ** 作　  者: John Tonny
    182          ** 日　  期: 2005年05月01日
    183          **------------------------------------------------------------------------------------------------------
    184          ** 修 改 人:
    185          ** 日　  期:
    186          **------------------------------------------------------------------------------------------------------
    187          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    188          uint32_t I2c0Stop(void)
    189          {
    190            I2C0CONSET = I2CONSET_STO;            // Set Stop flag 
   \                     I2c0Stop: (+1)
   \   00000000   0x2010             MOVS     R0,#+16
   \   00000002   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4001c000
   \   00000004   0x6008             STR      R0,[R1, #+0]
    191            I2C0CONCLR = I2CONCLR_SIC;  		// Clear SI flag  
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4001c018
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    192                      
    193            //--- Wait for STOP detected ---
    194            while( I2C0CONSET & I2CONSET_STO );
   \                     ??I2c0Stop_0: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable3_4  ;; 0x4001c000
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x06C0             LSLS     R0,R0,#+27
   \   00000012   0xD4FB             BMI.N    ??I2c0Stop_0
    195            return TRUE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x4770             BX       LR               ;; return
    196          }
    197          
    198          /*******************************************************************************************************
    199          ** 函数名称: I2c0Init
    200          ** 功能描述:
    201          ** 输 　 入:
    202          **
    203          ** 输　  出:
    204          **
    205          ** 全局变量:
    206          ** 调用模块:
    207          **
    208          ** 作　  者: John Tonny
    209          ** 日　  期: 2005年05月01日
    210          **------------------------------------------------------------------------------------------------------
    211          ** 修 改 人:
    212          ** 日　  期:
    213          **------------------------------------------------------------------------------------------------------
    214          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    215          void I2c0Init( void ) 
    216          {
   \                     I2c0Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    217            LIB_ERR lib_err;
    218            
    219            PCONP |= (1 << 7);
   \   00000002   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400fc0c4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000000A   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400fc0c4
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    220          
    221            // set PIO0.27 and PIO0.28 to I2C0 SDA and SCL 
    222            // function to 01 on both SDA and SCL. 
    223            PINSEL1 &= ~((0x03<<22)|(0x03<<24));
   \   0000000E   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4002c004
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF030 0x7070      BICS     R0,R0,#0x3C00000
   \   00000016   0x....             LDR.N    R1,??DataTable3_7  ;; 0x4002c004
   \   00000018   0x6008             STR      R0,[R1, #+0]
    224            PINSEL1 |= ((0x01<<22)|(0x01<<24));	
   \   0000001A   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4002c004
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x70A0      ORRS     R0,R0,#0x1400000
   \   00000022   0x....             LDR.N    R1,??DataTable3_7  ;; 0x4002c004
   \   00000024   0x6008             STR      R0,[R1, #+0]
    225           
    226            //--- Clear flags ---
    227            I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
   \   00000026   0x206C             MOVS     R0,#+108
   \   00000028   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4001c018
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    228          
    229            //--- Reset registers ---
    230          #if FAST_MODE_PLUS
    231            I2CPADCFG |= ((0x1<<0)|(0x1<<2));
    232            I2C0SCLL   = I2SCLL_HS_SCLL;
    233            I2C0SCLH   = I2SCLH_HS_SCLH;
    234          #else
    235            I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
   \   0000002C   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4002c07c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF030 0x0005      BICS     R0,R0,#0x5
   \   00000034   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4002c07c
   \   00000036   0x6008             STR      R0,[R1, #+0]
    236            I2C0SCLL   = I2SCLL_SCLL;
   \   00000038   0x2080             MOVS     R0,#+128
   \   0000003A   0x....             LDR.N    R1,??DataTable3_9  ;; 0x4001c014
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    237            I2C0SCLH   = I2SCLH_SCLH;
   \   0000003E   0x2080             MOVS     R0,#+128
   \   00000040   0x....             LDR.N    R1,??DataTable3_10  ;; 0x4001c010
   \   00000042   0x6008             STR      R0,[R1, #+0]
    238          #endif
    239          
    240            // Install interrupt handler 
    241            CSP_IntVectReg(CSP_INT_CTRL_NBR_MAIN,CSP_INT_SRC_NBR_I2C_00,LPC17xx_I2C0_IntHandler,0);
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x....             LDR.N    R2,??DataTable3_11
   \   00000048   0x210A             MOVS     R1,#+10
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       CSP_IntVectReg
    242            CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_I2C_00);  
   \   00000050   0x210A             MOVS     R1,#+10
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       CSP_IntEn
    243          
    244            I2C0CONSET = I2CONSET_I2EN;
   \   00000058   0x2040             MOVS     R0,#+64
   \   0000005A   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4001c000
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    245            
    246            g_pI2cSem = (OS_SEM *)Mem_PoolBlkGet((MEM_POOL    *)&m_BoxPool,
    247                                            (CPU_SIZE_T   ) sizeof(OS_SEM),
    248                                            (LIB_ERR     *)&lib_err);
   \   0000005E   0x466A             MOV      R2,SP
   \   00000060   0x2128             MOVS     R1,#+40
   \   00000062   0x....             LDR.N    R0,??DataTable3_12
   \   00000064   0x.... 0x....      BL       Mem_PoolBlkGet
   \   00000068   0x....             LDR.N    R1,??DataTable3_3
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    249            if(!g_pI2cSem){
   \   0000006C   0x....             LDR.N    R0,??DataTable3_3
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD005             BEQ.N    ??I2c0Init_0
    250              return;
    251            }
    252            
    253            if(BSP_OS_SemCreate((BSP_OS_SEM *)g_pI2cSem,
    254                                      (BSP_OS_SEM_VAL)1,
    255                                      (CPU_CHAR *)0)==DEF_FAIL){  
   \                     ??I2c0Init_1: (+1)
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x....             LDR.N    R0,??DataTable3_3
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       BSP_OS_SemCreate
    256            }
    257            return;
   \                     ??I2c0Init_0: (+1)
   \   00000080   0xBD01             POP      {R0,PC}          ;; return
    258          }
    259          
    260          /*******************************************************************************************************
    261          ** 函数名称: I2cSend
    262          ** 功能描述:
    263          ** 输 　 入:
    264          **
    265          ** 输　  出:
    266          **
    267          ** 全局变量:
    268          ** 调用模块:
    269          **
    270          ** 作　  者: John Tonny
    271          ** 日　  期: 2005年05月01日
    272          **------------------------------------------------------------------------------------------------------
    273          ** 修 改 人:
    274          ** 日　  期:
    275          **------------------------------------------------------------------------------------------------------
    276          *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    277          uint8_t I2cSend(uint8_t slaveAddr, uint8_t *txBuf,uint8_t txLen,uint8_t *rxBuf, uint8_t rxLen)
    278          {
   \                     I2cSend: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    279            CPU_BOOLEAN ucRet;
    280            
    281            CPU_SR_ALLOC();
   \   0000000E   0xF05F 0x0A00      MOVS     R10,#+0
    282            
    283            if(!g_pI2cSem){
   \   00000012   0x....             LDR.N    R0,??DataTable3_3
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD101             BNE.N    ??I2cSend_0
    284              return FALSE;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE044             B.N      ??I2cSend_1
    285            }
    286            
    287            if(BSP_OS_SemWait(g_pI2cSem,25)==DEF_FAIL){
   \                     ??I2cSend_0: (+1)
   \   0000001E   0x2119             MOVS     R1,#+25
   \   00000020   0x....             LDR.N    R0,??DataTable3_3
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x.... 0x....      BL       BSP_OS_SemWait
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD101             BNE.N    ??I2cSend_2
    288              return FALSE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE03B             B.N      ??I2cSend_1
    289            }
    290            
    291            OS_ENTER_CRITICAL();
   \                     ??I2cSend_2: (+1)
   \   00000030   0x.... 0x....      BL       CPU_SR_Save
   \   00000034   0x4682             MOV      R10,R0
   \   00000036   0x.... 0x....      BL       CPU_IntDisMeasStart
    292            g_usrI2c.slaveAddr=slaveAddr;
   \   0000003A   0x....             LDR.N    R0,??DataTable3
   \   0000003C   0x7005             STRB     R5,[R0, #+0]
    293            g_usrI2c.txBuff=txBuf;
   \   0000003E   0x....             LDR.N    R0,??DataTable3
   \   00000040   0x6046             STR      R6,[R0, #+4]
    294            g_usrI2c.txSz=txLen;
   \   00000042   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000044   0x....             LDR.N    R0,??DataTable3
   \   00000046   0x6087             STR      R7,[R0, #+8]
    295            g_usrI2c.rxBuff=rxBuf;
   \   00000048   0x....             LDR.N    R0,??DataTable3
   \   0000004A   0xF8C0 0x800C      STR      R8,[R0, #+12]
    296            g_usrI2c.rxSz=rxLen;
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x....             LDR.N    R0,??DataTable3
   \   00000052   0x6104             STR      R4,[R0, #+16]
    297            g_usrI2c.status=I2C_STATUS_BUSY;
   \   00000054   0x2005             MOVS     R0,#+5
   \   00000056   0x....             LDR.N    R1,??DataTable3
   \   00000058   0x7608             STRB     R0,[R1, #+24]
    298            OS_EXIT_CRITICAL();
   \   0000005A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005E   0x4650             MOV      R0,R10
   \   00000060   0x.... 0x....      BL       CPU_SR_Restore
    299          	
    300            I2C0CONSET = I2CONSET_STA;														 
   \   00000064   0x2020             MOVS     R0,#+32
   \   00000066   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4001c000
   \   00000068   0x6008             STR      R0,[R1, #+0]
    301            ucRet=BSP_OS_SemWait(g_pI2cSem,25);
   \   0000006A   0x2119             MOVS     R1,#+25
   \   0000006C   0x....             LDR.N    R0,??DataTable3_3
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       BSP_OS_SemWait
   \   00000074   0x4681             MOV      R9,R0
    302            I2C0CONCLR = I2CONCLR_STAC;
   \   00000076   0x2020             MOVS     R0,#+32
   \   00000078   0x....             LDR.N    R1,??DataTable3_5  ;; 0x4001c018
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    303            BSP_OS_SemPost(g_pI2cSem);
   \   0000007C   0x....             LDR.N    R0,??DataTable3_3
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x.... 0x....      BL       BSP_OS_SemPost
    304            if(ucRet==DEF_FAIL){
   \   00000084   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000088   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000008C   0xD101             BNE.N    ??I2cSend_3
    305              return FALSE;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE00A             B.N      ??I2cSend_1
    306            }
    307            if(g_usrI2c.txSz || g_usrI2c.rxSz){
   \                     ??I2cSend_3: (+1)
   \   00000092   0x....             LDR.N    R0,??DataTable3
   \   00000094   0x6880             LDR      R0,[R0, #+8]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD103             BNE.N    ??I2cSend_4
   \   0000009A   0x....             LDR.N    R0,??DataTable3
   \   0000009C   0x6900             LDR      R0,[R0, #+16]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD001             BEQ.N    ??I2cSend_5
    308              return FALSE;
   \                     ??I2cSend_4: (+1)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xE000             B.N      ??I2cSend_1
    309            }
    310            return TRUE;
   \                     ??I2cSend_5: (+1)
   \   000000A6   0x2001             MOVS     R0,#+1
   \                     ??I2cSend_1: (+1)
   \   000000A8   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    311          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     g_usrI2c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4001C004         DC32     0x4001c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4001C008         DC32     0x4001c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     g_pI2cSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4001C000         DC32     0x4001c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4001C018         DC32     0x4001c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4002C004         DC32     0x4002c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4002C07C         DC32     0x4002c07c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x4001C014         DC32     0x4001c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4001C010         DC32     0x4001c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     LPC17xx_I2C0_IntHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     m_BoxPool
    312          
    313          
    314          /******************************************************************************
    315          **                            End Of File
    316          ******************************************************************************/
    317          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   I2c0Init
         8   -> BSP_OS_SemCreate
         8   -> CSP_IntEn
         8   -> CSP_IntVectReg
         8   -> Mem_PoolBlkGet
       0   I2c0Start
       0   I2c0Stop
      32   I2cSend
        32   -> BSP_OS_SemPost
        32   -> BSP_OS_SemWait
        32   -> CPU_IntDisMeasStart
        32   -> CPU_IntDisMeasStop
        32   -> CPU_SR_Restore
        32   -> CPU_SR_Save
      16   LPC17xx_I2C0_IntHandler
        16   -> BSP_OS_SemPost


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     130  I2c0Init
       4  I2c0Start
      24  I2c0Stop
     172  I2cSend
     292  LPC17xx_I2C0_IntHandler
       4  g_pI2cSem
      28  g_usrI2c

 
  32 bytes in section .bss
 674 bytes in section .text
 
 674 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
