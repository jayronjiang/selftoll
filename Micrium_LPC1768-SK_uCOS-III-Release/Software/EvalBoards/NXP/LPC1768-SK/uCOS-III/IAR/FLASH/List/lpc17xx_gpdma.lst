###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:06
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_gpdma.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_gpdma.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_gpdma.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_gpdma.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_gpdma.c
      1          /**
      2           * @file	: lpc17xx_gpdma.c
      3           * @brief	: Contains all functions support for GPDMA firmware library on LPC17xx
      4           * @version	: 1.0
      5           * @date	: 20. Apr. 2009
      6           * @author	: HieuNguyen
      7           **************************************************************************
      8           * Software that is described herein is for illustrative purposes only
      9           * which provides customers with programming information regarding the
     10           * products. This software is supplied "AS IS" without any warranties.
     11           * NXP Semiconductors assumes no responsibility or liability for the
     12           * use of the software, conveys no license or title under any patent,
     13           * copyright, or mask work right to the product. NXP Semiconductors
     14           * reserves the right to make changes in the software without
     15           * notification. NXP Semiconductors also make no representation or
     16           * warranty that such application will be suitable for the specified
     17           * use without further testing or modification.
     18           **********************************************************************/
     19          
     20          /* Peripheral group ----------------------------------------------------------- */
     21          /** @addtogroup GPDMA
     22           * @{
     23           */
     24          
     25          /* Includes ------------------------------------------------------------------- */
     26          #include "lpc17xx_gpdma.h"
     27          #include "lpc17xx_clkpwr.h"
     28          
     29          /* If this source file built with example, the LPC17xx FW library configuration
     30           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     31           * otherwise the default FW library configuration file must be included instead
     32           */
     33          #ifdef __BUILD_WITH_EXAMPLE__
     34          #include "lpc17xx_libcfg.h"
     35          #else
     36          #include "lpc17xx_libcfg_default.h"
     37          #endif /* __BUILD_WITH_EXAMPLE__ */
     38          
     39          #ifdef _GPDMA
     40          
     41          
     42          /* Private Variables ---------------------------------------------------------- */
     43          /** @defgroup GPDMA_Private_Variables
     44           * @{
     45           */
     46          
     47          /**
     48           * @brief Lookup Table of Connection Type matched with
     49           * Peripheral Data (FIFO) register base address
     50           */
     51          #ifdef __IAR_SYSTEMS_ICC__

   \                                 In section .data, align 4
     52          volatile const void *GPDMA_LUTPerAddr[] = {
   \                     GPDMA_LUTPerAddr:
   \   00000000   0x40088008         DC32 40088008H, 40088008H, 40030008H, 40030008H, 40034004H, 400A8008H
   \              0x40088008   
   \              0x40030008   
   \              0x40030008   
   \              0x40034004   
   \              0x400A8008   
   \   00000018   0x400A800C         DC32 400A800CH, 4008C000H, 4000C000H, 4000C000H, 40010000H, 40010000H
   \              0x4008C000   
   \              0x4000C000   
   \              0x4000C000   
   \              0x40010000   
   \              0x40010000   
   \   00000030   0x40098000         DC32 40098000H, 40098000H, 4009C000H, 4009C000H, 40004018H, 4000401CH
   \              0x40098000   
   \              0x4009C000   
   \              0x4009C000   
   \              0x40004018   
   \              0x4000401C   
   \   00000048   0x40008018         DC32 40008018H, 4000801CH, 40090018H, 4009001CH, 40094018H, 4009401CH
   \              0x4000801C   
   \              0x40090018   
   \              0x4009001C   
   \              0x40094018   
   \              0x4009401C   
     53          		(&LPC_SSP0->DR),				// SSP0 Tx
     54          		(&LPC_SSP0->DR),				// SSP0 Rx
     55          		(&LPC_SSP1->DR),				// SSP1 Tx
     56          		(&LPC_SSP1->DR),				// SSP1 Rx
     57          		(&LPC_ADC->ADGDR),			// ADC
     58          		(&LPC_I2S->I2STXFIFO), 		// I2S Tx
     59          		(&LPC_I2S->I2SRXFIFO), 		// I2S Rx
     60          		(&LPC_DAC->DACR),				// DAC
     61          		(&LPC_UART0->/*RBTHDLR.*/THR),	// UART0 Tx
     62          		(&LPC_UART0->/*RBTHDLR.*/RBR),	// UART0 Rx
     63          		(&LPC_UART1->/*RBTHDLR.*/THR),	// UART1 Tx
     64          		(&LPC_UART1->/*RBTHDLR.*/RBR),	// UART1 Rx
     65          		(&LPC_UART2->/*RBTHDLR.*/THR),	// UART2 Tx
     66          		(&LPC_UART2->/*RBTHDLR.*/RBR),	// UART2 Rx
     67          		(&LPC_UART3->/*RBTHDLR.*/THR),	// UART3 Tx
     68          		(&LPC_UART3->/*RBTHDLR.*/RBR),	// UART3 Rx
     69          		(&LPC_TIM0->MR0),				// MAT0.0
     70          		(&LPC_TIM0->MR1),				// MAT0.1
     71          		(&LPC_TIM1->MR0),				// MAT1.0
     72          		(&LPC_TIM1->MR1),				// MAT1.1
     73          		(&LPC_TIM2->MR0),				// MAT2.0
     74          		(&LPC_TIM2->MR1),				// MAT2.1
     75          		(&LPC_TIM3->MR0),				// MAT3.0
     76          		(&LPC_TIM3->MR1),				// MAT3.1
     77          };
     78          #else
     79          const uint32_t GPDMA_LUTPerAddr[] = {
     80          		((uint32_t)&LPC_SSP0->DR),				// SSP0 Tx
     81          		((uint32_t)&LPC_SSP0->DR),				// SSP0 Rx
     82          		((uint32_t)&LPC_SSP1->DR),				// SSP1 Tx
     83          		((uint32_t)&LPC_SSP1->DR),				// SSP1 Rx
     84          		((uint32_t)&LPC_ADC->ADGDR),			// ADC
     85          		((uint32_t)&LPC_I2S->I2STXFIFO), 		// I2S Tx
     86          		((uint32_t)&LPC_I2S->I2SRXFIFO), 		// I2S Rx
     87          		((uint32_t)&LPC_DAC->DACR),				// DAC
     88          		((uint32_t)&LPC_UART0->/*RBTHDLR.*/THR),	// UART0 Tx
     89          		((uint32_t)&LPC_UART0->/*RBTHDLR.*/RBR),	// UART0 Rx
     90          		((uint32_t)&LPC_UART1->/*RBTHDLR.*/THR),	// UART1 Tx
     91          		((uint32_t)&LPC_UART1->/*RBTHDLR.*/RBR),	// UART1 Rx
     92          		((uint32_t)&LPC_UART2->/*RBTHDLR.*/THR),	// UART2 Tx
     93          		((uint32_t)&LPC_UART2->/*RBTHDLR.*/RBR),	// UART2 Rx
     94          		((uint32_t)&LPC_UART3->/*RBTHDLR.*/THR),	// UART3 Tx
     95          		((uint32_t)&LPC_UART3->/*RBTHDLR.*/RBR),	// UART3 Rx
     96          		((uint32_t)&LPC_TIM0->MR0),				// MAT0.0
     97          		((uint32_t)&LPC_TIM0->MR1),				// MAT0.1
     98          		((uint32_t)&LPC_TIM1->MR0),				// MAT1.0
     99          		((uint32_t)&LPC_TIM1->MR1),				// MAT1.1
    100          		((uint32_t)&LPC_TIM2->MR0),				// MAT2.0
    101          		((uint32_t)&LPC_TIM2->MR1),				// MAT2.1
    102          		((uint32_t)&LPC_TIM3->MR0),				// MAT3.0
    103          		((uint32_t)&LPC_TIM3->MR1),				// MAT3.1
    104          };
    105          #endif
    106          /**
    107           * @brief Lookup Table of GPDMA Channel Number matched with
    108           * GPDMA channel pointer
    109           */

   \                                 In section .data, align 4
    110          const LPC_GPDMACH_TypeDef *pGPDMACh[8] = {
   \                     pGPDMACh:
   \   00000000   0x50004100         DC32 50004100H, 50004120H, 50004140H, 50004160H, 50004180H, 500041A0H
   \              0x50004120   
   \              0x50004140   
   \              0x50004160   
   \              0x50004180   
   \              0x500041A0   
   \   00000018   0x500041C0         DC32 500041C0H, 500041E0H
   \              0x500041E0   
    111          		LPC_GPDMACH0,	// GPDMA Channel 0
    112          		LPC_GPDMACH1,	// GPDMA Channel 1
    113          		LPC_GPDMACH2,	// GPDMA Channel 2
    114          		LPC_GPDMACH3,	// GPDMA Channel 3
    115          		LPC_GPDMACH4,	// GPDMA Channel 4
    116          		LPC_GPDMACH5,	// GPDMA Channel 5
    117          		LPC_GPDMACH6,	// GPDMA Channel 6
    118          		LPC_GPDMACH7,	// GPDMA Channel 7
    119          };
    120          /**
    121           * @brief Optimized Peripheral Source and Destination burst size
    122           */

   \                                 In section .rodata, align 4
    123          const uint8_t GPDMA_LUTPerBurst[] = {
   \                     GPDMA_LUTPerBurst:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x01    
   \              0x01 0x04    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00               DC8 0
    124          		GPDMA_BSIZE_4,				// SSP0 Tx
    125          		GPDMA_BSIZE_4,				// SSP0 Rx
    126          		GPDMA_BSIZE_4,				// SSP1 Tx
    127          		GPDMA_BSIZE_4,				// SSP1 Rx
    128          		GPDMA_BSIZE_4,				// ADC
    129          		GPDMA_BSIZE_32, 			// I2S channel 0
    130          		GPDMA_BSIZE_32, 			// I2S channel 1
    131          		GPDMA_BSIZE_1,				// DAC
    132          		GPDMA_BSIZE_1,				// UART0 Tx
    133          		GPDMA_BSIZE_1,				// UART0 Rx
    134          		GPDMA_BSIZE_1,				// UART1 Tx
    135          		GPDMA_BSIZE_1,				// UART1 Rx
    136          		GPDMA_BSIZE_1,				// UART2 Tx
    137          		GPDMA_BSIZE_1,				// UART2 Rx
    138          		GPDMA_BSIZE_1,				// UART3 Tx
    139          		GPDMA_BSIZE_1,				// UART3 Rx
    140          		GPDMA_BSIZE_1,				// MAT0.0
    141          		GPDMA_BSIZE_1,				// MAT0.1
    142          		GPDMA_BSIZE_1,				// MAT1.0
    143          		GPDMA_BSIZE_1,				// MAT1.1
    144          		GPDMA_BSIZE_1,				// MAT2.0
    145          		GPDMA_BSIZE_1,				// MAT2.1
    146          		GPDMA_BSIZE_1,				// MAT3.0
    147          		GPDMA_BSIZE_1,				// MAT3.1
    148          };
    149          /**
    150           * @brief Optimized Peripheral Source and Destination transfer width
    151           */

   \                                 In section .rodata, align 4
    152          const uint8_t GPDMA_LUTPerWid[] = {
   \                     GPDMA_LUTPerWid:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02         
   \   00000017   0x02               DC8 2
    153          		GPDMA_WIDTH_BYTE,				// SSP0 Tx
    154          		GPDMA_WIDTH_BYTE,				// SSP0 Rx
    155          		GPDMA_WIDTH_BYTE,				// SSP1 Tx
    156          		GPDMA_WIDTH_BYTE,				// SSP1 Rx
    157          		GPDMA_WIDTH_WORD,				// ADC
    158          		GPDMA_WIDTH_WORD, 				// I2S channel 0
    159          		GPDMA_WIDTH_WORD, 				// I2S channel 1
    160          		GPDMA_WIDTH_BYTE,				// DAC
    161          		GPDMA_WIDTH_BYTE,				// UART0 Tx
    162          		GPDMA_WIDTH_BYTE,				// UART0 Rx
    163          		GPDMA_WIDTH_BYTE,				// UART1 Tx
    164          		GPDMA_WIDTH_BYTE,				// UART1 Rx
    165          		GPDMA_WIDTH_BYTE,				// UART2 Tx
    166          		GPDMA_WIDTH_BYTE,				// UART2 Rx
    167          		GPDMA_WIDTH_BYTE,				// UART3 Tx
    168          		GPDMA_WIDTH_BYTE,				// UART3 Rx
    169          		GPDMA_WIDTH_WORD,				// MAT0.0
    170          		GPDMA_WIDTH_WORD,				// MAT0.1
    171          		GPDMA_WIDTH_WORD,				// MAT1.0
    172          		GPDMA_WIDTH_WORD,				// MAT1.1
    173          		GPDMA_WIDTH_WORD,				// MAT2.0
    174          		GPDMA_WIDTH_WORD,				// MAT2.1
    175          		GPDMA_WIDTH_WORD,				// MAT3.0
    176          		GPDMA_WIDTH_WORD,				// MAT3.1
    177          };
    178          
    179          /** Interrupt Call-back function pointer data for each GPDMA channel */

   \                                 In section .bss, align 4
    180          static fnGPDMACbs_Type *_apfnGPDMACbs[8] = {
   \                     _apfnGPDMACbs:
   \   00000000                      DS8 32
    181          		NULL, 	// GPDMA Call-back function pointer for Channel 0
    182          		NULL, 	// GPDMA Call-back function pointer for Channel 1
    183          		NULL, 	// GPDMA Call-back function pointer for Channel 2
    184          		NULL, 	// GPDMA Call-back function pointer for Channel 3
    185          		NULL, 	// GPDMA Call-back function pointer for Channel 4
    186          		NULL, 	// GPDMA Call-back function pointer for Channel 5
    187          		NULL, 	// GPDMA Call-back function pointer for Channel 6
    188          		NULL, 	// GPDMA Call-back function pointer for Channel 7
    189          };
    190          
    191          /**
    192           * @}
    193           */
    194          
    195          /* Public Functions ----------------------------------------------------------- */
    196          /** @addtogroup GPDMA_Public_Functions
    197           * @{
    198           */
    199          
    200          /********************************************************************//**
    201           * @brief 		Initialize GPDMA controller
    202           * @param 		None
    203           * @return 		None
    204           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    205          void GPDMA_Init(void)
    206          {
   \                     GPDMA_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    207          	/* Enable GPDMA clock */
    208          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCGPDMA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x5000      MOVS     R0,#+536870912
   \   00000008   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    209          
    210          	// Reset all channel configuration register
    211          	LPC_GPDMACH0->DMACCConfig = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable3  ;; 0x50004110
   \   00000010   0x6008             STR      R0,[R1, #+0]
    212          	LPC_GPDMACH1->DMACCConfig = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable3_1  ;; 0x50004130
   \   00000016   0x6008             STR      R0,[R1, #+0]
    213          	LPC_GPDMACH2->DMACCConfig = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable3_2  ;; 0x50004150
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    214          	LPC_GPDMACH3->DMACCConfig = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable3_3  ;; 0x50004170
   \   00000022   0x6008             STR      R0,[R1, #+0]
    215          	LPC_GPDMACH4->DMACCConfig = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable3_4  ;; 0x50004190
   \   00000028   0x6008             STR      R0,[R1, #+0]
    216          	LPC_GPDMACH5->DMACCConfig = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable3_5  ;; 0x500041b0
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    217          	LPC_GPDMACH6->DMACCConfig = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable3_6  ;; 0x500041d0
   \   00000034   0x6008             STR      R0,[R1, #+0]
    218          	LPC_GPDMACH7->DMACCConfig = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable3_7  ;; 0x500041f0
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    219          
    220          	/* Clear all DMA interrupt and error flag */
    221          	LPC_GPDMA->DMACIntTCClear = 0xFF;
   \   0000003C   0x20FF             MOVS     R0,#+255
   \   0000003E   0x....             LDR.N    R1,??DataTable3_8  ;; 0x50004008
   \   00000040   0x6008             STR      R0,[R1, #+0]
    222          	LPC_GPDMA->DMACIntErrClr = 0xFF;
   \   00000042   0x20FF             MOVS     R0,#+255
   \   00000044   0x....             LDR.N    R1,??DataTable3_9  ;; 0x50004010
   \   00000046   0x6008             STR      R0,[R1, #+0]
    223          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    224          
    225          /********************************************************************//**
    226           * @brief 		Setup GPDMA channel peripheral according to the specified
    227           *               parameters in the GPDMAChannelConfig.
    228           * @param[in]	GPDMAChannelConfig Pointer to a GPDMA_CH_CFG_Type
    229           * 									structure that contains the configuration
    230           * 									information for the specified GPDMA channel peripheral.
    231           * @param[in]	pfnGPDMACbs			Pointer to a GPDMA interrupt call-back function
    232           * @return		ERROR if selected channel is enabled before
    233           * 				or SUCCESS if channel is configured successfully
    234           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    235          Status GPDMA_Setup(GPDMA_Channel_CFG_Type *GPDMAChannelConfig, fnGPDMACbs_Type *pfnGPDMACbs)
    236          {
   \                     GPDMA_Setup: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x0002             MOVS     R2,R0
    237          	LPC_GPDMACH_TypeDef *pDMAch;
    238          	uint32_t tmp1, tmp2;
    239          
    240          	if (LPC_GPDMA->DMACEnbldChns & (GPDMA_DMACEnbldChns_Ch(GPDMAChannelConfig->ChannelNum))) {
   \   00000004   0x....             LDR.N    R0,??DataTable3_10  ;; 0x5000401c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2601             MOVS     R6,#+1
   \   0000000A   0x6817             LDR      R7,[R2, #+0]
   \   0000000C   0x40BE             LSLS     R6,R6,R7
   \   0000000E   0x4030             ANDS     R0,R6,R0
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD001             BEQ.N    ??GPDMA_Setup_0
    241          		// This channel is enabled, return ERROR, need to release this channel first
    242          		return ERROR;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE10E             B.N      ??GPDMA_Setup_1
    243          	}
    244          
    245          	// Get Channel pointer
    246          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[GPDMAChannelConfig->ChannelNum];
   \                     ??GPDMA_Setup_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable3_11
   \   0000001A   0x6816             LDR      R6,[R2, #+0]
   \   0000001C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000020   0x0003             MOVS     R3,R0
    247          
    248          	// Setup call back function for this channel
    249          	_apfnGPDMACbs[GPDMAChannelConfig->ChannelNum] = pfnGPDMACbs;
   \   00000022   0x....             LDR.N    R0,??DataTable3_12
   \   00000024   0x6816             LDR      R6,[R2, #+0]
   \   00000026   0xF840 0x1026      STR      R1,[R0, R6, LSL #+2]
    250          
    251          	// Reset the Interrupt status
    252          	LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(GPDMAChannelConfig->ChannelNum);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x6816             LDR      R6,[R2, #+0]
   \   0000002E   0x40B0             LSLS     R0,R0,R6
   \   00000030   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   00000034   0x....             LDR.N    R6,??DataTable3_8  ;; 0x50004008
   \   00000036   0x6030             STR      R0,[R6, #+0]
    253          	LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(GPDMAChannelConfig->ChannelNum);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x6816             LDR      R6,[R2, #+0]
   \   0000003C   0x40B0             LSLS     R0,R0,R6
   \   0000003E   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   00000042   0x....             LDR.N    R6,??DataTable3_9  ;; 0x50004010
   \   00000044   0x6030             STR      R0,[R6, #+0]
    254          
    255          	// Clear DMA configure
    256          	pDMAch->DMACCControl = 0x00;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x60D8             STR      R0,[R3, #+12]
    257          	pDMAch->DMACCConfig = 0x00;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6118             STR      R0,[R3, #+16]
    258          
    259          	/* Assign Linker List Item value */
    260          	pDMAch->DMACCLLI = GPDMAChannelConfig->DMALLI;
   \   0000004E   0x6A10             LDR      R0,[R2, #+32]
   \   00000050   0x6098             STR      R0,[R3, #+8]
    261          
    262          	/* Set value to Channel Control Registers */
    263          	switch (GPDMAChannelConfig->TransferType)
   \   00000052   0x6950             LDR      R0,[R2, #+20]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD005             BEQ.N    ??GPDMA_Setup_2
   \   00000058   0x2802             CMP      R0,#+2
   \   0000005A   0xD044             BEQ.N    ??GPDMA_Setup_3
   \   0000005C   0xD319             BCC.N    ??GPDMA_Setup_4
   \   0000005E   0x2803             CMP      R0,#+3
   \   00000060   0xD06B             BEQ.N    ??GPDMA_Setup_5
   \   00000062   0xE097             B.N      ??GPDMA_Setup_6
    264          	{
    265          	// Memory to memory
    266          	case GPDMA_TRANSFERTYPE_M2M:
    267          		// Assign physical source and destination address
    268          		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_2: (+1)
   \   00000064   0x68D0             LDR      R0,[R2, #+12]
   \   00000066   0x6018             STR      R0,[R3, #+0]
    269          		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   00000068   0x6910             LDR      R0,[R2, #+16]
   \   0000006A   0x6058             STR      R0,[R3, #+4]
    270          		pDMAch->DMACCControl
    271          				= GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize) \
    272          						| GPDMA_DMACCxControl_SBSize(GPDMA_BSIZE_32) \
    273          						| GPDMA_DMACCxControl_DBSize(GPDMA_BSIZE_32) \
    274          						| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth) \
    275          						| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth) \
    276          						| GPDMA_DMACCxControl_SI \
    277          						| GPDMA_DMACCxControl_DI \
    278          						| GPDMA_DMACCxControl_I;
   \   0000006C   0x6850             LDR      R0,[R2, #+4]
   \   0000006E   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000070   0x0D00             LSRS     R0,R0,#+20
   \   00000072   0x6896             LDR      R6,[R2, #+8]
   \   00000074   0x04B6             LSLS     R6,R6,#+18
   \   00000076   0xF416 0x16E0      ANDS     R6,R6,#0x1C0000
   \   0000007A   0x4330             ORRS     R0,R6,R0
   \   0000007C   0x6896             LDR      R6,[R2, #+8]
   \   0000007E   0x0576             LSLS     R6,R6,#+21
   \   00000080   0xF416 0x0660      ANDS     R6,R6,#0xE00000
   \   00000084   0x4330             ORRS     R0,R6,R0
   \   00000086   0xF040 0x400C      ORR      R0,R0,#0x8C000000
   \   0000008A   0xF450 0x3010      ORRS     R0,R0,#0x24000
   \   0000008E   0x60D8             STR      R0,[R3, #+12]
    279          		break;
   \   00000090   0xE082             B.N      ??GPDMA_Setup_7
    280          	// Memory to peripheral
    281          	case GPDMA_TRANSFERTYPE_M2P:
    282          		// Assign physical source
    283          		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_4: (+1)
   \   00000092   0x68D0             LDR      R0,[R2, #+12]
   \   00000094   0x6018             STR      R0,[R3, #+0]
    284          		// Assign peripheral destination address
    285          		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000096   0x....             LDR.N    R0,??DataTable3_13
   \   00000098   0x69D6             LDR      R6,[R2, #+28]
   \   0000009A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000009E   0x6058             STR      R0,[R3, #+4]
    286          		pDMAch->DMACCControl
    287          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    288          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    289          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    290          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    291          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    292          						| GPDMA_DMACCxControl_SI \
    293          						| GPDMA_DMACCxControl_I;
   \   000000A0   0x6850             LDR      R0,[R2, #+4]
   \   000000A2   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000A4   0x0D00             LSRS     R0,R0,#+20
   \   000000A6   0x....             LDR.N    R6,??DataTable3_14
   \   000000A8   0x69D7             LDR      R7,[R2, #+28]
   \   000000AA   0x5DF6             LDRB     R6,[R6, R7]
   \   000000AC   0x0336             LSLS     R6,R6,#+12
   \   000000AE   0xF416 0x46E0      ANDS     R6,R6,#0x7000
   \   000000B2   0x4330             ORRS     R0,R6,R0
   \   000000B4   0x....             LDR.N    R6,??DataTable3_14
   \   000000B6   0x69D7             LDR      R7,[R2, #+28]
   \   000000B8   0x5DF6             LDRB     R6,[R6, R7]
   \   000000BA   0x03F6             LSLS     R6,R6,#+15
   \   000000BC   0xF416 0x3660      ANDS     R6,R6,#0x38000
   \   000000C0   0x4330             ORRS     R0,R6,R0
   \   000000C2   0x....             LDR.N    R6,??DataTable3_15
   \   000000C4   0x69D7             LDR      R7,[R2, #+28]
   \   000000C6   0x5DF6             LDRB     R6,[R6, R7]
   \   000000C8   0x04B6             LSLS     R6,R6,#+18
   \   000000CA   0xF416 0x16E0      ANDS     R6,R6,#0x1C0000
   \   000000CE   0x4330             ORRS     R0,R6,R0
   \   000000D0   0x....             LDR.N    R6,??DataTable3_15
   \   000000D2   0x69D7             LDR      R7,[R2, #+28]
   \   000000D4   0x5DF6             LDRB     R6,[R6, R7]
   \   000000D6   0x0576             LSLS     R6,R6,#+21
   \   000000D8   0xF416 0x0660      ANDS     R6,R6,#0xE00000
   \   000000DC   0x4330             ORRS     R0,R6,R0
   \   000000DE   0xF050 0x4004      ORRS     R0,R0,#0x84000000
   \   000000E2   0x60D8             STR      R0,[R3, #+12]
    294          		break;
   \   000000E4   0xE058             B.N      ??GPDMA_Setup_7
    295          	// Peripheral to memory
    296          	case GPDMA_TRANSFERTYPE_P2M:
    297          		// Assign peripheral source address
    298          		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_3: (+1)
   \   000000E6   0x....             LDR.N    R0,??DataTable3_13
   \   000000E8   0x6996             LDR      R6,[R2, #+24]
   \   000000EA   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000EE   0x6018             STR      R0,[R3, #+0]
    299          		// Assign memory destination address
    300          		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   000000F0   0x6910             LDR      R0,[R2, #+16]
   \   000000F2   0x6058             STR      R0,[R3, #+4]
    301          		pDMAch->DMACCControl
    302          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    303          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    304          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    305          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    306          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    307          						| GPDMA_DMACCxControl_DI \
    308          						| GPDMA_DMACCxControl_I;
   \   000000F4   0x6850             LDR      R0,[R2, #+4]
   \   000000F6   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000F8   0x0D00             LSRS     R0,R0,#+20
   \   000000FA   0x....             LDR.N    R6,??DataTable3_14
   \   000000FC   0x6997             LDR      R7,[R2, #+24]
   \   000000FE   0x5DF6             LDRB     R6,[R6, R7]
   \   00000100   0x0336             LSLS     R6,R6,#+12
   \   00000102   0xF416 0x46E0      ANDS     R6,R6,#0x7000
   \   00000106   0x4330             ORRS     R0,R6,R0
   \   00000108   0x....             LDR.N    R6,??DataTable3_14
   \   0000010A   0x6997             LDR      R7,[R2, #+24]
   \   0000010C   0x5DF6             LDRB     R6,[R6, R7]
   \   0000010E   0x03F6             LSLS     R6,R6,#+15
   \   00000110   0xF416 0x3660      ANDS     R6,R6,#0x38000
   \   00000114   0x4330             ORRS     R0,R6,R0
   \   00000116   0x....             LDR.N    R6,??DataTable3_15
   \   00000118   0x6997             LDR      R7,[R2, #+24]
   \   0000011A   0x5DF6             LDRB     R6,[R6, R7]
   \   0000011C   0x04B6             LSLS     R6,R6,#+18
   \   0000011E   0xF416 0x16E0      ANDS     R6,R6,#0x1C0000
   \   00000122   0x4330             ORRS     R0,R6,R0
   \   00000124   0x....             LDR.N    R6,??DataTable3_15
   \   00000126   0x6997             LDR      R7,[R2, #+24]
   \   00000128   0x5DF6             LDRB     R6,[R6, R7]
   \   0000012A   0x0576             LSLS     R6,R6,#+21
   \   0000012C   0xF416 0x0660      ANDS     R6,R6,#0xE00000
   \   00000130   0x4330             ORRS     R0,R6,R0
   \   00000132   0xF050 0x4008      ORRS     R0,R0,#0x88000000
   \   00000136   0x60D8             STR      R0,[R3, #+12]
    309          		break;
   \   00000138   0xE02E             B.N      ??GPDMA_Setup_7
    310          	// Peripheral to peripheral
    311          	case GPDMA_TRANSFERTYPE_P2P:
    312          		// Assign peripheral source address
    313          		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_5: (+1)
   \   0000013A   0x....             LDR.N    R0,??DataTable3_13
   \   0000013C   0x6996             LDR      R6,[R2, #+24]
   \   0000013E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000142   0x6018             STR      R0,[R3, #+0]
    314          		// Assign peripheral destination address
    315          		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000144   0x....             LDR.N    R0,??DataTable3_13
   \   00000146   0x69D6             LDR      R6,[R2, #+28]
   \   00000148   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000014C   0x6058             STR      R0,[R3, #+4]
    316          		pDMAch->DMACCControl
    317          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    318          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    319          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    320          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    321          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    322          						| GPDMA_DMACCxControl_I;
   \   0000014E   0x6850             LDR      R0,[R2, #+4]
   \   00000150   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000152   0x0D00             LSRS     R0,R0,#+20
   \   00000154   0x....             LDR.N    R6,??DataTable3_14
   \   00000156   0x6997             LDR      R7,[R2, #+24]
   \   00000158   0x5DF6             LDRB     R6,[R6, R7]
   \   0000015A   0x0336             LSLS     R6,R6,#+12
   \   0000015C   0xF416 0x46E0      ANDS     R6,R6,#0x7000
   \   00000160   0x4330             ORRS     R0,R6,R0
   \   00000162   0x....             LDR.N    R6,??DataTable3_14
   \   00000164   0x69D7             LDR      R7,[R2, #+28]
   \   00000166   0x5DF6             LDRB     R6,[R6, R7]
   \   00000168   0x03F6             LSLS     R6,R6,#+15
   \   0000016A   0xF416 0x3660      ANDS     R6,R6,#0x38000
   \   0000016E   0x4330             ORRS     R0,R6,R0
   \   00000170   0x....             LDR.N    R6,??DataTable3_15
   \   00000172   0x6997             LDR      R7,[R2, #+24]
   \   00000174   0x5DF6             LDRB     R6,[R6, R7]
   \   00000176   0x04B6             LSLS     R6,R6,#+18
   \   00000178   0xF416 0x16E0      ANDS     R6,R6,#0x1C0000
   \   0000017C   0x4330             ORRS     R0,R6,R0
   \   0000017E   0x....             LDR.N    R6,??DataTable3_15
   \   00000180   0x69D7             LDR      R7,[R2, #+28]
   \   00000182   0x5DF6             LDRB     R6,[R6, R7]
   \   00000184   0x0576             LSLS     R6,R6,#+21
   \   00000186   0xF416 0x0660      ANDS     R6,R6,#0xE00000
   \   0000018A   0x4330             ORRS     R0,R6,R0
   \   0000018C   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000190   0x60D8             STR      R0,[R3, #+12]
    323          		break;
   \   00000192   0xE001             B.N      ??GPDMA_Setup_7
    324          	// Do not support any more transfer type, return ERROR
    325          	default:
    326          		return ERROR;
   \                     ??GPDMA_Setup_6: (+1)
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0xE04E             B.N      ??GPDMA_Setup_1
    327          		break;
    328          	}
    329          
    330          	/* Re-Configure DMA Request Select for source peripheral */
    331          	if (GPDMAChannelConfig->SrcConn > 15)
   \                     ??GPDMA_Setup_7: (+1)
   \   00000198   0x6990             LDR      R0,[R2, #+24]
   \   0000019A   0x2810             CMP      R0,#+16
   \   0000019C   0xD309             BCC.N    ??GPDMA_Setup_8
    332          	{
    333          		DMAREQSEL |= (1<<(GPDMAChannelConfig->SrcConn - 16));
   \   0000019E   0x....             LDR.N    R0,??DataTable3_16  ;; 0x4000c1c4
   \   000001A0   0x6800             LDR      R0,[R0, #+0]
   \   000001A2   0x2601             MOVS     R6,#+1
   \   000001A4   0x6997             LDR      R7,[R2, #+24]
   \   000001A6   0x3F10             SUBS     R7,R7,#+16
   \   000001A8   0x40BE             LSLS     R6,R6,R7
   \   000001AA   0x4330             ORRS     R0,R6,R0
   \   000001AC   0x....             LDR.N    R6,??DataTable3_16  ;; 0x4000c1c4
   \   000001AE   0x6030             STR      R0,[R6, #+0]
   \   000001B0   0xE008             B.N      ??GPDMA_Setup_9
    334          	} else {
    335          		DMAREQSEL &= ~(1<<(GPDMAChannelConfig->SrcConn - 8));
   \                     ??GPDMA_Setup_8: (+1)
   \   000001B2   0x....             LDR.N    R0,??DataTable3_16  ;; 0x4000c1c4
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x2601             MOVS     R6,#+1
   \   000001B8   0x6997             LDR      R7,[R2, #+24]
   \   000001BA   0x3F08             SUBS     R7,R7,#+8
   \   000001BC   0x40BE             LSLS     R6,R6,R7
   \   000001BE   0x43B0             BICS     R0,R0,R6
   \   000001C0   0x....             LDR.N    R6,??DataTable3_16  ;; 0x4000c1c4
   \   000001C2   0x6030             STR      R0,[R6, #+0]
    336          	}
    337          
    338          	/* Re-Configure DMA Request Select for Destination peripheral */
    339          	if (GPDMAChannelConfig->DstConn > 15)
   \                     ??GPDMA_Setup_9: (+1)
   \   000001C4   0x69D0             LDR      R0,[R2, #+28]
   \   000001C6   0x2810             CMP      R0,#+16
   \   000001C8   0xD309             BCC.N    ??GPDMA_Setup_10
    340          	{
    341          		DMAREQSEL |= (1<<(GPDMAChannelConfig->DstConn - 16));
   \   000001CA   0x....             LDR.N    R0,??DataTable3_16  ;; 0x4000c1c4
   \   000001CC   0x6800             LDR      R0,[R0, #+0]
   \   000001CE   0x2601             MOVS     R6,#+1
   \   000001D0   0x69D7             LDR      R7,[R2, #+28]
   \   000001D2   0x3F10             SUBS     R7,R7,#+16
   \   000001D4   0x40BE             LSLS     R6,R6,R7
   \   000001D6   0x4330             ORRS     R0,R6,R0
   \   000001D8   0x....             LDR.N    R6,??DataTable3_16  ;; 0x4000c1c4
   \   000001DA   0x6030             STR      R0,[R6, #+0]
   \   000001DC   0xE008             B.N      ??GPDMA_Setup_11
    342          	} else {
    343          		DMAREQSEL &= ~(1<<(GPDMAChannelConfig->DstConn - 8));
   \                     ??GPDMA_Setup_10: (+1)
   \   000001DE   0x....             LDR.N    R0,??DataTable3_16  ;; 0x4000c1c4
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0x2601             MOVS     R6,#+1
   \   000001E4   0x69D7             LDR      R7,[R2, #+28]
   \   000001E6   0x3F08             SUBS     R7,R7,#+8
   \   000001E8   0x40BE             LSLS     R6,R6,R7
   \   000001EA   0x43B0             BICS     R0,R0,R6
   \   000001EC   0x....             LDR.N    R6,??DataTable3_16  ;; 0x4000c1c4
   \   000001EE   0x6030             STR      R0,[R6, #+0]
    344          	}
    345          
    346          	/* Enable DMA channels, little endian */
    347          	LPC_GPDMA->DMACConfig = GPDMA_DMACConfig_E;
   \                     ??GPDMA_Setup_11: (+1)
   \   000001F0   0x2001             MOVS     R0,#+1
   \   000001F2   0x....             LDR.N    R6,??DataTable3_17  ;; 0x50004030
   \   000001F4   0x6030             STR      R0,[R6, #+0]
    348          	while (!(LPC_GPDMA->DMACConfig & GPDMA_DMACConfig_E));
   \                     ??GPDMA_Setup_12: (+1)
   \   000001F6   0x....             LDR.N    R0,??DataTable3_17  ;; 0x50004030
   \   000001F8   0x6800             LDR      R0,[R0, #+0]
   \   000001FA   0x07C0             LSLS     R0,R0,#+31
   \   000001FC   0xD5FB             BPL.N    ??GPDMA_Setup_12
    349          
    350          	// Calculate absolute value for Connection number
    351          	tmp1 = GPDMAChannelConfig->SrcConn;
   \   000001FE   0x6990             LDR      R0,[R2, #+24]
   \   00000200   0x0004             MOVS     R4,R0
    352          	tmp1 = ((tmp1 > 15) ? (tmp1 - 8) : tmp1);
   \   00000202   0x2C10             CMP      R4,#+16
   \   00000204   0xD301             BCC.N    ??GPDMA_Setup_13
   \   00000206   0x3C08             SUBS     R4,R4,#+8
   \   00000208   0xE7FF             B.N      ??GPDMA_Setup_14
    353          	tmp2 = GPDMAChannelConfig->DstConn;
   \                     ??GPDMA_Setup_13: (+1)
   \                     ??GPDMA_Setup_14: (+1)
   \   0000020A   0x69D0             LDR      R0,[R2, #+28]
   \   0000020C   0x0005             MOVS     R5,R0
    354          	tmp2 = ((tmp2 > 15) ? (tmp2 - 8) : tmp2);
   \   0000020E   0x2D10             CMP      R5,#+16
   \   00000210   0xD301             BCC.N    ??GPDMA_Setup_15
   \   00000212   0x3D08             SUBS     R5,R5,#+8
   \   00000214   0xE7FF             B.N      ??GPDMA_Setup_16
    355          
    356          	// Configure DMA Channel, enable Error Counter and Terminate counter
    357          	pDMAch->DMACCConfig = GPDMA_DMACCxConfig_IE | GPDMA_DMACCxConfig_ITC /*| GPDMA_DMACCxConfig_E*/ \
    358          		| GPDMA_DMACCxConfig_TransferType((uint32_t)GPDMAChannelConfig->TransferType) \
    359          		| GPDMA_DMACCxConfig_SrcPeripheral(tmp1) \
    360          		| GPDMA_DMACCxConfig_DestPeripheral(tmp2);
   \                     ??GPDMA_Setup_15: (+1)
   \                     ??GPDMA_Setup_16: (+1)
   \   00000216   0x6950             LDR      R0,[R2, #+20]
   \   00000218   0x02C0             LSLS     R0,R0,#+11
   \   0000021A   0xF410 0x5060      ANDS     R0,R0,#0x3800
   \   0000021E   0x0066             LSLS     R6,R4,#+1
   \   00000220   0xF016 0x063E      ANDS     R6,R6,#0x3E
   \   00000224   0x4330             ORRS     R0,R6,R0
   \   00000226   0x01AE             LSLS     R6,R5,#+6
   \   00000228   0xF416 0x66F8      ANDS     R6,R6,#0x7C0
   \   0000022C   0x4330             ORRS     R0,R6,R0
   \   0000022E   0xF450 0x4040      ORRS     R0,R0,#0xC000
   \   00000232   0x6118             STR      R0,[R3, #+16]
    361          
    362          	return SUCCESS;
   \   00000234   0x2001             MOVS     R0,#+1
   \                     ??GPDMA_Setup_1: (+1)
   \   00000236   0xBCF0             POP      {R4-R7}
   \   00000238   0x4770             BX       LR               ;; return
    363          }
    364          
    365          
    366          /*********************************************************************//**
    367           * @brief		Enable/Disable DMA channel
    368           * @param[in]	channelNum	GPDMA channel, should be in range from 0 to 7
    369           * @param[in]	NewState	New State of this command, should be:
    370           * 					- ENABLE.
    371           * 					- DISABLE.
    372           * @return		None
    373           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    374          void GPDMA_ChannelCmd(uint8_t channelNum, FunctionalState NewState)
    375          {
    376          	LPC_GPDMACH_TypeDef *pDMAch;
    377          
    378          	// Get Channel pointer
    379          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[channelNum];
   \                     GPDMA_ChannelCmd: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable3_11
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000008   0x001A             MOVS     R2,R3
    380          
    381          	if (NewState == ENABLE) {
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD104             BNE.N    ??GPDMA_ChannelCmd_0
    382          		pDMAch->DMACCConfig |= GPDMA_DMACCxConfig_E;
   \   00000010   0x6913             LDR      R3,[R2, #+16]
   \   00000012   0xF053 0x0301      ORRS     R3,R3,#0x1
   \   00000016   0x6113             STR      R3,[R2, #+16]
   \   00000018   0xE003             B.N      ??GPDMA_ChannelCmd_1
    383          	} else {
    384          		pDMAch->DMACCConfig &= ~GPDMA_DMACCxConfig_E;
   \                     ??GPDMA_ChannelCmd_0: (+1)
   \   0000001A   0x6913             LDR      R3,[R2, #+16]
   \   0000001C   0x085B             LSRS     R3,R3,#+1
   \   0000001E   0x005B             LSLS     R3,R3,#+1
   \   00000020   0x6113             STR      R3,[R2, #+16]
    385          	}
    386          }
   \                     ??GPDMA_ChannelCmd_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    387          
    388          /*********************************************************************//**
    389           * @brief		Standard GPDMA interrupt handler, this function will check
    390           * 				all interrupt status of GPDMA channels, then execute the call
    391           * 				back function id they're already installed
    392           * @param[in]	None
    393           * @return		None
    394           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    395          void GPDMA_IntHandler(void)
    396          {
   \                     GPDMA_IntHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    397          	uint32_t tmp;
    398          	// Scan interrupt pending
    399          	for (tmp = 0; tmp <= 7; tmp++) {
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??GPDMA_IntHandler_0: (+1)
   \   00000006   0x2C08             CMP      R4,#+8
   \   00000008   0xD236             BCS.N    ??GPDMA_IntHandler_1
    400          		if (LPC_GPDMA->DMACIntStat & GPDMA_DMACIntStat_Ch(tmp)) {
   \   0000000A   0x....             LDR.N    R0,??DataTable3_18  ;; 0x50004000
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x40A1             LSLS     R1,R1,R4
   \   00000012   0x4008             ANDS     R0,R1,R0
   \   00000014   0x0600             LSLS     R0,R0,#+24
   \   00000016   0xD02D             BEQ.N    ??GPDMA_IntHandler_2
    401          			// Check counter terminal status
    402          			if (LPC_GPDMA->DMACIntTCStat & GPDMA_DMACIntTCStat_Ch(tmp)) {
   \   00000018   0x....             LDR.N    R0,??DataTable3_19  ;; 0x50004004
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x40A1             LSLS     R1,R1,R4
   \   00000020   0x4008             ANDS     R0,R1,R0
   \   00000022   0x0600             LSLS     R0,R0,#+24
   \   00000024   0xD00F             BEQ.N    ??GPDMA_IntHandler_3
    403          				// Clear terminate counter Interrupt pending
    404          				LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(tmp);
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x40A0             LSLS     R0,R0,R4
   \   0000002A   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   0000002E   0x....             LDR.N    R1,??DataTable3_8  ;; 0x50004008
   \   00000030   0x6008             STR      R0,[R1, #+0]
    405          				// Execute call-back function if it is already installed
    406          				if(_apfnGPDMACbs[tmp] != NULL) {
   \   00000032   0x....             LDR.N    R0,??DataTable3_12
   \   00000034   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD004             BEQ.N    ??GPDMA_IntHandler_3
    407          					_apfnGPDMACbs[tmp](GPDMA_STAT_INTTC);
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable3_12
   \   00000040   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000044   0x4788             BLX      R1
    408          				}
    409          			}
    410          			// Check error terminal status
    411          			if (LPC_GPDMA->DMACIntErrStat & GPDMA_DMACIntErrStat_Ch(tmp)) {
   \                     ??GPDMA_IntHandler_3: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable3_20  ;; 0x5000400c
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x40A1             LSLS     R1,R1,R4
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x0600             LSLS     R0,R0,#+24
   \   00000052   0xD00F             BEQ.N    ??GPDMA_IntHandler_2
    412          				// Clear error counter Interrupt pending
    413          				LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(tmp);
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x40A0             LSLS     R0,R0,R4
   \   00000058   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   0000005C   0x....             LDR.N    R1,??DataTable3_9  ;; 0x50004010
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    414          				// Execute call-back function if it is already installed
    415          				if(_apfnGPDMACbs[tmp] != NULL) {
   \   00000060   0x....             LDR.N    R0,??DataTable3_12
   \   00000062   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD004             BEQ.N    ??GPDMA_IntHandler_2
    416          					_apfnGPDMACbs[tmp](GPDMA_STAT_INTERR);
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x....             LDR.N    R1,??DataTable3_12
   \   0000006E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000072   0x4788             BLX      R1
    417          				}
    418          			}
    419          		}
    420          	}
   \                     ??GPDMA_IntHandler_2: (+1)
   \   00000074   0x1C64             ADDS     R4,R4,#+1
   \   00000076   0xE7C6             B.N      ??GPDMA_IntHandler_0
    421          }
   \                     ??GPDMA_IntHandler_1: (+1)
   \   00000078   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x50004110         DC32     0x50004110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x50004130         DC32     0x50004130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x50004150         DC32     0x50004150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x50004170         DC32     0x50004170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x50004190         DC32     0x50004190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x500041B0         DC32     0x500041b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x500041D0         DC32     0x500041d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x500041F0         DC32     0x500041f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x50004008         DC32     0x50004008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x50004010         DC32     0x50004010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x5000401C         DC32     0x5000401c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     pGPDMACh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     _apfnGPDMACbs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     GPDMA_LUTPerAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     GPDMA_LUTPerBurst

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     GPDMA_LUTPerWid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x4000C1C4         DC32     0x4000c1c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x50004030         DC32     0x50004030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x50004000         DC32     0x50004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x50004004         DC32     0x50004004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x5000400C         DC32     0x5000400c
    422          
    423          
    424          /**
    425           * @}
    426           */
    427          
    428          #endif /* _GPDMA */
    429          
    430          /**
    431           * @}
    432           */
    433          
    434          /* --------------------------------- End Of File ------------------------------ */
    435          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GPDMA_ChannelCmd
       8   GPDMA_Init
         8   -> CLKPWR_ConfigPPWR
       8   GPDMA_IntHandler
         8   -- Indirect call
      16   GPDMA_Setup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      36  GPDMA_ChannelCmd
      74  GPDMA_Init
     122  GPDMA_IntHandler
      96  GPDMA_LUTPerAddr
      24  GPDMA_LUTPerBurst
      24  GPDMA_LUTPerWid
     570  GPDMA_Setup
      32  _apfnGPDMACbs
      32  pGPDMACh

 
  32 bytes in section .bss
 128 bytes in section .data
  48 bytes in section .rodata
 886 bytes in section .text
 
 886 bytes of CODE  memory
  48 bytes of CONST memory
 160 bytes of DATA  memory

Errors: none
Warnings: none
