###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:07
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_i2s.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_i2s.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_i2s.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_i2s.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_i2s.c
      1          /**
      2           * @file	: lpc17xx_i2s.c
      3           * @brief	: Contains all functions support for I2S firmware library on LPC17xx
      4           * @version	: 1.0
      5           * @date	: 13. May. 2009
      6           * @author	: NguyenCao
      7           **************************************************************************
      8           * Software that is described herein is for illustrative purposes only
      9           * which provides customers with programming information regarding the
     10           * products. This software is supplied "AS IS" without any warranties.
     11           * NXP Semiconductors assumes no responsibility or liability for the
     12           * use of the software, conveys no license or title under any patent,
     13           * copyright, or mask work right to the product. NXP Semiconductors
     14           * reserves the right to make changes in the software without
     15           * notification. NXP Semiconductors also make no representation or
     16           * warranty that such application will be suitable for the specified
     17           * use without further testing or modification.
     18           **********************************************************************/
     19          
     20          /* Peripheral group ----------------------------------------------------------- */
     21          /** @addtogroup I2S
     22           * @{
     23           */
     24          
     25          /* Includes ------------------------------------------------------------------- */
     26          #include "lpc17xx_i2s.h"
     27          #include "lpc17xx_clkpwr.h"
     28          
     29          
     30          /* If this source file built with example, the LPC17xx FW library configuration
     31           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     32           * otherwise the default FW library configuration file must be included instead
     33           */
     34          #ifdef __BUILD_WITH_EXAMPLE__
     35          #include "lpc17xx_libcfg.h"
     36          #else
     37          #include "lpc17xx_libcfg_default.h"
     38          #endif /* __BUILD_WITH_EXAMPLE__ */
     39          
     40          
     41          #ifdef _I2S
     42          
     43          /* Private Variables ---------------------------------------------------------- */

   \                                 In section .bss, align 4
     44          static fnI2SCbs_Type *_apfnI2SCbs[2] = {
   \                     _apfnI2SCbs:
   \   00000000                      DS8 8
     45          		NULL, 	// I2S transmit Call-back function pointer
     46          		NULL, 	// I2S receive Call-back function pointer
     47          };
     48          
     49          
     50          /* Private Functions ---------------------------------------------------------- */
     51          /** @defgroup I2S_Private_Functions
     52           * @{
     53           */
     54          
     55          /********************************************************************//**
     56           * @brief		Get I2S wordwidth value
     57           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
     58           * @param[in]	TRMode is the I2S mode, should be:
     59           * 				- I2S_TX_MODE: transmit mode
     60           * 				- I2S_RX_MODE: receive mode
     61           * @return 		The wordwidth value, should be: 8,16 or 32
     62           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          uint8_t I2S_GetWordWidth(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_GetWordWidth: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     64          	uint8_t value;
     65          
     66          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_GetWordWidth_0
   \   0000000E   0x2142             MOVS     R1,#+66
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
     67          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_GetWordWidth_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_GetWordWidth_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_GetWordWidth_1
   \   00000024   0x2143             MOVS     R1,#+67
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
     68          
     69          	if (TRMode == I2S_TX_MODE) {
   \                     ??I2S_GetWordWidth_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD104             BNE.N    ??I2S_GetWordWidth_2
     70          		value = (I2Sx->I2SDAO) & 0x03; /* get wordwidth bit */
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xE003             B.N      ??I2S_GetWordWidth_3
     71          	} else {
     72          		value = (I2Sx->I2SDAI) & 0x03; /* get wordwidth bit */
   \                     ??I2S_GetWordWidth_2: (+1)
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000044   0x0006             MOVS     R6,R0
     73          	}
     74          	switch (value) {
   \                     ??I2S_GetWordWidth_3: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD002             BEQ.N    ??I2S_GetWordWidth_4
   \   0000004C   0x2E01             CMP      R6,#+1
   \   0000004E   0xD002             BEQ.N    ??I2S_GetWordWidth_5
   \   00000050   0xE003             B.N      ??I2S_GetWordWidth_6
     75          	case I2S_WORDWIDTH_8:
     76          		return 8;
   \                     ??I2S_GetWordWidth_4: (+1)
   \   00000052   0x2008             MOVS     R0,#+8
   \   00000054   0xE002             B.N      ??I2S_GetWordWidth_7
     77          		break;
     78          	case I2S_WORDWIDTH_16:
     79          		return 16;
   \                     ??I2S_GetWordWidth_5: (+1)
   \   00000056   0x2010             MOVS     R0,#+16
   \   00000058   0xE000             B.N      ??I2S_GetWordWidth_7
     80          		break;
     81          	default:
     82          		return 32;
   \                     ??I2S_GetWordWidth_6: (+1)
   \   0000005A   0x2020             MOVS     R0,#+32
   \                     ??I2S_GetWordWidth_7: (+1)
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
     83          	}
     84          }
     85          /********************************************************************//**
     86           * @brief		Get I2S channel value
     87           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
     88           * @param[in]	TRMode is the I2S mode, should be:
     89           * 				- I2S_TX_MODE: transmit mode
     90           * 				- I2S_RX_MODE: receive mode
     91           * @return 		The channel value, should be: 1(mono) or 2(stereo)
     92           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          uint8_t I2S_GetChannel(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_GetChannel: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     94          	uint8_t value;
     95          
     96          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_GetChannel_0
   \   0000000E   0x2160             MOVS     R1,#+96
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
     97          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_GetChannel_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_GetChannel_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_GetChannel_1
   \   00000024   0x2161             MOVS     R1,#+97
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
     98          
     99          	if (TRMode == I2S_TX_MODE) {
   \                     ??I2S_GetChannel_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD104             BNE.N    ??I2S_GetChannel_2
    100          		value = (I2Sx->I2SDAO) & 0x04; /* get bit[2] */
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xE003             B.N      ??I2S_GetChannel_3
    101          	} else {
    102          		value = (I2Sx->I2SDAI) & 0x04; /* get bit[2] */
   \                     ??I2S_GetChannel_2: (+1)
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000044   0x0006             MOVS     R6,R0
    103          	}
    104          	switch (value) {
   \                     ??I2S_GetChannel_3: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E01             CMP      R6,#+1
   \   0000004A   0xD101             BNE.N    ??I2S_GetChannel_4
    105          	case I2S_MONO:
    106          		return 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xE000             B.N      ??I2S_GetChannel_5
    107          		break;
    108          	default:
    109          		return 2;
   \                     ??I2S_GetChannel_4: (+1)
   \   00000050   0x2002             MOVS     R0,#+2
   \                     ??I2S_GetChannel_5: (+1)
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    110          	}
    111          }
    112          
    113          /**
    114           * @}
    115           */
    116          
    117          
    118          /* Public Functions ----------------------------------------------------------- */
    119          /** @addtogroup I2S_Public_Functions
    120           * @{
    121           */
    122          
    123          /********************************************************************//**
    124           * @brief		Initialize I2S
    125           * 					- Turn on power and clock
    126           * 					- Setup I2S pin select
    127           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    128           * @return 		none
    129           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          void I2S_Init(LPC_I2S_TypeDef *I2Sx) {
   \                     I2S_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    131          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_Init_0
   \   0000000C   0x2183             MOVS     R1,#+131
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    132          
    133          	// Turn on power and clock
    134          	CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCI2S, ENABLE);
   \                     ??I2S_Init_0: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    135          	LPC_I2S->I2SDAI = LPC_I2S->I2SDAO = 0x00;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x400a8000
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x400a8004
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    136          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    137          
    138          /********************************************************************//**
    139           * @brief		Configuration I2S, setting:
    140           * 					- master/slave mode
    141           * 					- wordwidth value
    142           * 					- channel mode
    143           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    144           * @param[in]	TRMode: transmit/receive mode, should be:
    145           * 					- I2S_TX_MODE: transmit mode
    146           * 					- I2S_RX_MODE: receive mode
    147           * @param[in]	ConfigStruct pointer to I2S_CFG_Type structure
    148           *              which will be initialized.
    149           * @return 		none
    150           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          void I2S_Config(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, I2S_CFG_Type* ConfigStruct)
    152          {
   \                     I2S_Config: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    153          	uint32_t bps, config;
    154          
    155          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD004             BEQ.N    ??I2S_Config_0
   \   00000012   0x219B             MOVS     R1,#+155
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    156          
    157          	CHECK_PARAM(PARAM_I2S_WORDWIDTH(ConfigStruct->wordwidth));
   \                     ??I2S_Config_0: (+1)
   \   0000001C   0x7830             LDRB     R0,[R6, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD00A             BEQ.N    ??I2S_Config_1
   \   00000022   0x7830             LDRB     R0,[R6, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD007             BEQ.N    ??I2S_Config_1
   \   00000028   0x7830             LDRB     R0,[R6, #+0]
   \   0000002A   0x2803             CMP      R0,#+3
   \   0000002C   0xD004             BEQ.N    ??I2S_Config_1
   \   0000002E   0x219D             MOVS     R1,#+157
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000034   0x.... 0x....      BL       check_failed
    158          	CHECK_PARAM(PARAM_I2S_CHANNEL(ConfigStruct->mono));
   \                     ??I2S_Config_1: (+1)
   \   00000038   0x7870             LDRB     R0,[R6, #+1]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD007             BEQ.N    ??I2S_Config_2
   \   0000003E   0x7870             LDRB     R0,[R6, #+1]
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD004             BEQ.N    ??I2S_Config_2
   \   00000044   0x219E             MOVS     R1,#+158
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000004A   0x.... 0x....      BL       check_failed
    159          	CHECK_PARAM(PARAM_I2S_STOP(ConfigStruct->stop));
   \                     ??I2S_Config_2: (+1)
   \   0000004E   0x78B0             LDRB     R0,[R6, #+2]
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD007             BEQ.N    ??I2S_Config_3
   \   00000054   0x78B0             LDRB     R0,[R6, #+2]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD004             BEQ.N    ??I2S_Config_3
   \   0000005A   0x219F             MOVS     R1,#+159
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000060   0x.... 0x....      BL       check_failed
    160          	CHECK_PARAM(PARAM_I2S_RESET(ConfigStruct->reset));
   \                     ??I2S_Config_3: (+1)
   \   00000064   0x78F0             LDRB     R0,[R6, #+3]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD007             BEQ.N    ??I2S_Config_4
   \   0000006A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD004             BEQ.N    ??I2S_Config_4
   \   00000070   0x21A0             MOVS     R1,#+160
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000076   0x.... 0x....      BL       check_failed
    161          	CHECK_PARAM(PARAM_I2S_WS_SEL(ConfigStruct->ws_sel));
   \                     ??I2S_Config_4: (+1)
   \   0000007A   0x7930             LDRB     R0,[R6, #+4]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD009             BEQ.N    ??I2S_Config_5
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x7130             STRB     R0,[R6, #+4]
   \   00000084   0x7930             LDRB     R0,[R6, #+4]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD104             BNE.N    ??I2S_Config_5
   \   0000008A   0x21A1             MOVS     R1,#+161
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000090   0x.... 0x....      BL       check_failed
    162          	CHECK_PARAM(PARAM_I2S_MUTE(ConfigStruct->mute));
   \                     ??I2S_Config_5: (+1)
   \   00000094   0x7970             LDRB     R0,[R6, #+5]
   \   00000096   0x2801             CMP      R0,#+1
   \   00000098   0xD007             BEQ.N    ??I2S_Config_6
   \   0000009A   0x7970             LDRB     R0,[R6, #+5]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD004             BEQ.N    ??I2S_Config_6
   \   000000A0   0x21A2             MOVS     R1,#+162
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000A6   0x.... 0x....      BL       check_failed
    163          
    164          	/* Setup clock */
    165          	bps = (ConfigStruct->wordwidth +1)*8;
   \                     ??I2S_Config_6: (+1)
   \   000000AA   0x7830             LDRB     R0,[R6, #+0]
   \   000000AC   0x1C40             ADDS     R0,R0,#+1
   \   000000AE   0x00C0             LSLS     R0,R0,#+3
   \   000000B0   0x0007             MOVS     R7,R0
    166          
    167          	/* Calculate audio config */
    168          	config = (bps - 1)<<6 | (ConfigStruct->ws_sel)<<5 | (ConfigStruct->reset)<<4 |
    169          		(ConfigStruct->stop)<<3 | (ConfigStruct->mono)<<2 | (ConfigStruct->wordwidth);
   \   000000B2   0x1E78             SUBS     R0,R7,#+1
   \   000000B4   0x7931             LDRB     R1,[R6, #+4]
   \   000000B6   0x0149             LSLS     R1,R1,#+5
   \   000000B8   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000000BC   0x78F1             LDRB     R1,[R6, #+3]
   \   000000BE   0xEA50 0x1001      ORRS     R0,R0,R1, LSL #+4
   \   000000C2   0x78B1             LDRB     R1,[R6, #+2]
   \   000000C4   0xEA50 0x00C1      ORRS     R0,R0,R1, LSL #+3
   \   000000C8   0x7871             LDRB     R1,[R6, #+1]
   \   000000CA   0xEA50 0x0081      ORRS     R0,R0,R1, LSL #+2
   \   000000CE   0x7831             LDRB     R1,[R6, #+0]
   \   000000D0   0x4308             ORRS     R0,R1,R0
   \   000000D2   0x4680             MOV      R8,R0
    170          
    171          	if(TRMode == I2S_RX_MODE){
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x2D01             CMP      R5,#+1
   \   000000D8   0xD104             BNE.N    ??I2S_Config_7
    172          		LPC_I2S->I2SDAI = config;
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x400a8004
   \   000000DE   0xF8C0 0x8000      STR      R8,[R0, #+0]
   \   000000E2   0xE003             B.N      ??I2S_Config_8
    173          	}else{
    174          		LPC_I2S->I2SDAO = config;
   \                     ??I2S_Config_7: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   000000E8   0xF8C0 0x8000      STR      R8,[R0, #+0]
    175          	}
    176          }
   \                     ??I2S_Config_8: (+1)
   \   000000EC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    177          
    178          /********************************************************************//**
    179           * @brief		DeInitial both I2S transmit or receive
    180           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    181           * @return 		none
    182           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    183          void I2S_DeInit(LPC_I2S_TypeDef *I2Sx) {
   \                     I2S_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    184          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_DeInit_0
   \   0000000C   0x21B8             MOVS     R1,#+184
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    185          
    186          	// Turn off power and clock
    187          	CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCI2S, DISABLE);
   \                     ??I2S_DeInit_0: (+1)
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    188          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    189          
    190          /********************************************************************//**
    191           * @brief		Get I2S Buffer Level
    192           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    193           * @param[in]	TRMode: Transmit/receive mode, should be:
    194           * 					- I2S_TX_MODE: transmit mode
    195           * 					- I2S_RX_MODE: receive mode
    196           * @return 		current level of Transmit/Receive Buffer
    197           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    198          uint8_t I2S_GetLevel(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode)
    199          {
   \                     I2S_GetLevel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    200          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_GetLevel_0
   \   0000000E   0x21C8             MOVS     R1,#+200
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    201          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_GetLevel_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_GetLevel_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_GetLevel_1
   \   00000024   0x21C9             MOVS     R1,#+201
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    202          
    203          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_GetLevel_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD103             BNE.N    ??I2S_GetLevel_2
    204          	{
    205          		return ((I2Sx->I2SSTATE >> 16) & 0xFF);
   \   00000034   0x6920             LDR      R0,[R4, #+16]
   \   00000036   0x0C00             LSRS     R0,R0,#+16
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xE002             B.N      ??I2S_GetLevel_3
    206          	}
    207          	else
    208          	{
    209          		return ((I2Sx->I2SSTATE >> 8) & 0xFF);
   \                     ??I2S_GetLevel_2: (+1)
   \   0000003C   0x6920             LDR      R0,[R4, #+16]
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??I2S_GetLevel_3: (+1)
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    210          	}
    211          }
    212          /********************************************************************//**
    213           * @brief		I2S Start: clear all STOP,RESET and MUTE bit, ready to operate
    214           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    215           * @return 		none
    216           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    217          void I2S_Start(LPC_I2S_TypeDef *I2Sx)
    218          {
    219          	//Clear STOP,RESET and MUTE bit
    220          	I2Sx->I2SDAO &= ~I2S_DAI_RESET;
   \                     I2S_Start: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0xF031 0x0110      BICS     R1,R1,#0x10
   \   00000006   0x6001             STR      R1,[R0, #+0]
    221          	I2Sx->I2SDAI &= ~I2S_DAI_RESET;
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0xF031 0x0110      BICS     R1,R1,#0x10
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    222          	I2Sx->I2SDAO &= ~I2S_DAI_STOP;
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF031 0x0108      BICS     R1,R1,#0x8
   \   00000016   0x6001             STR      R1,[R0, #+0]
    223          	I2Sx->I2SDAI &= ~I2S_DAI_STOP;
   \   00000018   0x6841             LDR      R1,[R0, #+4]
   \   0000001A   0xF031 0x0108      BICS     R1,R1,#0x8
   \   0000001E   0x6041             STR      R1,[R0, #+4]
    224          	I2Sx->I2SDAO &= ~I2S_DAI_MUTE;
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0xF431 0x4100      BICS     R1,R1,#0x8000
   \   00000026   0x6001             STR      R1,[R0, #+0]
    225          }
   \   00000028   0x4770             BX       LR               ;; return
    226          /********************************************************************//**
    227           * @brief		I2S Send data
    228           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    229           * @param[in]	BufferData pointer to uint32_t is the data will be send
    230           * @return 		none
    231           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    232          void I2S_Send(LPC_I2S_TypeDef *I2Sx, uint32_t BufferData) {
   \                     I2S_Send: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    233          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_Send_0
   \   0000000E   0x21E9             MOVS     R1,#+233
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    234          	CHECK_PARAM(PARAM_I2S_DATA(BufferData));
    235          
    236          	I2Sx->I2STXFIFO = BufferData;
   \                     ??I2S_Send_0: (+1)
   \   00000018   0x60A5             STR      R5,[R4, #+8]
    237          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    238          
    239          /********************************************************************//**
    240           * @brief		I2S Receive Data
    241           * @param[in]	I2Sx pointer to LPC_I2S_TypeDef
    242           * @return 		received value
    243           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          uint32_t I2S_Receive(LPC_I2S_TypeDef* I2Sx) {
   \                     I2S_Receive: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    245          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_Receive_0
   \   0000000C   0x21F5             MOVS     R1,#+245
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    246          
    247          	return (I2Sx->I2SRXFIFO);
   \                     ??I2S_Receive_0: (+1)
   \   00000016   0x68E0             LDR      R0,[R4, #+12]
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    248          
    249          }
    250          /********************************************************************//**
    251           * @brief		I2S Pause
    252           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    253           * @param[in]	TRMode is transmit/receive mode, should be:
    254           * 				- I2S_TX_MODE: transmit mode
    255           * 				- I2S_RX_MODE: receive mode
    256           * @return 		none
    257           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    258          void I2S_Pause(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Pause: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    259          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Pause_0
   \   0000000E   0xF240 0x1103      MOVW     R1,#+259
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    260          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Pause_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Pause_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Pause_1
   \   00000026   0xF44F 0x7182      MOV      R1,#+260
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002E   0x.... 0x....      BL       check_failed
    261          
    262          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Pause_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD104             BNE.N    ??I2S_Pause_2
    263          	{
    264          		I2Sx->I2SDAO |= I2S_DAO_STOP;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0xE003             B.N      ??I2S_Pause_3
    265          	} else //Receive mode
    266          	{
    267          		I2Sx->I2SDAI |= I2S_DAI_STOP;
   \                     ??I2S_Pause_2: (+1)
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000048   0x6060             STR      R0,[R4, #+4]
    268          	}
    269          }
   \                     ??I2S_Pause_3: (+1)
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    270          /********************************************************************//**
    271           * @brief		I2S Mute
    272           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    273           * @param[in]	TRMode is transmit/receive mode, should be:
    274           * 				- I2S_TX_MODE: transmit mode
    275           * 				- I2S_RX_MODE: receive mode
    276           * @return 		none
    277           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    278          void I2S_Mute(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Mute: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    279          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Mute_0
   \   0000000E   0xF240 0x1117      MOVW     R1,#+279
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    280          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Mute_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Mute_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Mute_1
   \   00000026   0xF44F 0x718C      MOV      R1,#+280
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002E   0x.... 0x....      BL       check_failed
    281          
    282          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Mute_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD104             BNE.N    ??I2S_Mute_2
    283          	{
    284          		I2Sx->I2SDAO |= I2S_DAO_MUTE;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0xE003             B.N      ??I2S_Mute_3
    285          	} else //Receive mode
    286          	{
    287          		I2Sx->I2SDAI |= I2S_DAI_MUTE;
   \                     ??I2S_Mute_2: (+1)
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000048   0x6060             STR      R0,[R4, #+4]
    288          	}
    289          }
   \                     ??I2S_Mute_3: (+1)
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    290          
    291          /********************************************************************//**
    292           * @brief		I2S Stop
    293           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    294           * @param[in]	TRMode is transmit/receive mode, should be:
    295           * 				- I2S_TX_MODE: transmit mode
    296           * 				- I2S_RX_MODE: receive mode
    297           * @return 		none
    298           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    299          void I2S_Stop(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Stop: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    300          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Stop_0
   \   0000000E   0xF44F 0x7196      MOV      R1,#+300
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    301          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Stop_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Stop_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Stop_1
   \   00000026   0xF240 0x112D      MOVW     R1,#+301
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002E   0x.... 0x....      BL       check_failed
    302          
    303          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Stop_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD10C             BNE.N    ??I2S_Stop_2
    304          	{
    305          		I2Sx->I2SDAO &= ~I2S_DAO_MUTE;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   0000003E   0x6020             STR      R0,[R4, #+0]
    306          		I2Sx->I2SDAO |= I2S_DAO_STOP;
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000046   0x6020             STR      R0,[R4, #+0]
    307          		I2Sx->I2SDAO |= I2S_DAO_RESET;
   \   00000048   0x6820             LDR      R0,[R4, #+0]
   \   0000004A   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000004E   0x6020             STR      R0,[R4, #+0]
   \   00000050   0xE007             B.N      ??I2S_Stop_3
    308          	} else //Receive mode
    309          	{
    310          		I2Sx->I2SDAI |= I2S_DAI_STOP;
   \                     ??I2S_Stop_2: (+1)
   \   00000052   0x6860             LDR      R0,[R4, #+4]
   \   00000054   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000058   0x6060             STR      R0,[R4, #+4]
    311          		I2Sx->I2SDAI |= I2S_DAI_RESET;
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000060   0x6060             STR      R0,[R4, #+4]
    312          	}
    313          }
   \                     ??I2S_Stop_3: (+1)
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    314          
    315          /********************************************************************//**
    316           * @brief		Set frequency for I2S
    317           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    318           * @param[in]	Freq is the frequency for I2S will be set. It can range
    319           * 				from 16-96 kHz(16, 22.05, 32, 44.1, 48, 96kHz)
    320           * @param[in]	TRMode is transmit/receive mode, should be:
    321           * 				- I2S_TX_MODE: transmit mode
    322           * 				- I2S_RX_MODE: receive mode
    323           * @return 		Status: ERROR or SUCCESS
    324           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    325          Status I2S_FreqConfig(LPC_I2S_TypeDef *I2Sx, uint32_t Freq, uint8_t TRMode) {
   \                     I2S_FreqConfig: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x0015             MOVS     R5,R2
    326          
    327          	/* Calculate bit rate
    328          	 * The formula is:
    329          	 *      bit_rate = channel*wordwidth - 1
    330          	 * 48kHz sample rate for 16 bit stereo date requires
    331          	 * a bit rate of 48000*16*2=1536MHz (MCLK)
    332          	 */
    333          	uint32_t i2sPclk;
    334          	uint64_t divider;
    335          	uint8_t bitrate, channel, wordwidth;
    336          	uint32_t x, y;
    337          	uint16_t dif;
    338          	uint16_t error;
    339          	uint8_t x_divide, y_divide;
    340          	uint16_t ErrorOptimal = 0xFFFF;
   \   0000000C   0xF64F 0x77FF      MOVW     R7,#+65535
    341          
    342          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD005             BEQ.N    ??I2S_FreqConfig_0
   \   00000018   0xF44F 0x71AB      MOV      R1,#+342
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000020   0x.... 0x....      BL       check_failed
    343          	CHECK_PARAM(PRAM_I2S_FREQ(Freq));
   \                     ??I2S_FreqConfig_0: (+1)
   \   00000024   0xF5B9 0x5F7A      CMP      R9,#+16000
   \   00000028   0xD303             BCC.N    ??I2S_FreqConfig_1
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable18_3  ;; 0x17701
   \   0000002E   0x4581             CMP      R9,R0
   \   00000030   0xD305             BCC.N    ??I2S_FreqConfig_2
   \                     ??I2S_FreqConfig_1: (+1)
   \   00000032   0xF240 0x1157      MOVW     R1,#+343
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000003A   0x.... 0x....      BL       check_failed
    344          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_FreqConfig_2: (+1)
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD008             BEQ.N    ??I2S_FreqConfig_3
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D01             CMP      R5,#+1
   \   00000048   0xD005             BEQ.N    ??I2S_FreqConfig_3
   \   0000004A   0xF44F 0x71AC      MOV      R1,#+344
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000052   0x.... 0x....      BL       check_failed
    345          
    346          	i2sPclk = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_I2S);
   \                     ??I2S_FreqConfig_3: (+1)
   \   00000056   0x2036             MOVS     R0,#+54
   \   00000058   0x.... 0x....      BL       CLKPWR_GetPCLK
   \   0000005C   0x9001             STR      R0,[SP, #+4]
    347          	if(TRMode == I2S_TX_MODE)
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD10C             BNE.N    ??I2S_FreqConfig_4
    348          	{
    349          		channel = I2S_GetChannel(I2Sx,I2S_TX_MODE);
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       I2S_GetChannel
   \   0000006C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    350          		wordwidth = I2S_GetWordWidth(I2Sx,I2S_TX_MODE);
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       I2S_GetWordWidth
   \   00000078   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   0000007C   0xE00B             B.N      ??I2S_FreqConfig_5
    351          	}
    352          	else
    353          	{
    354          		channel = I2S_GetChannel(I2Sx,I2S_RX_MODE);
   \                     ??I2S_FreqConfig_4: (+1)
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       I2S_GetChannel
   \   00000086   0xF88D 0x0003      STRB     R0,[SP, #+3]
    355          		wordwidth = I2S_GetWordWidth(I2Sx,I2S_RX_MODE);
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x.... 0x....      BL       I2S_GetWordWidth
   \   00000092   0xF88D 0x0002      STRB     R0,[SP, #+2]
    356          	}
    357          	bitrate = channel * wordwidth - 1;
   \                     ??I2S_FreqConfig_5: (+1)
   \   00000096   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000009A   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   0000009E   0x4348             MULS     R0,R1,R0
   \   000000A0   0x1E40             SUBS     R0,R0,#+1
   \   000000A2   0xF88D 0x0000      STRB     R0,[SP, #+0]
    358          	if (TRMode == I2S_TX_MODE)// Transmitter
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD103             BNE.N    ??I2S_FreqConfig_6
    359          	{
    360          		I2Sx->I2STXBITRATE = bitrate;
   \   000000AC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B0   0x62A0             STR      R0,[R4, #+40]
   \   000000B2   0xE002             B.N      ??I2S_FreqConfig_7
    361          	} else //Receiver
    362          	{
    363          		I2Sx->I2SRXBITRATE = bitrate;
   \                     ??I2S_FreqConfig_6: (+1)
   \   000000B4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B8   0x62E0             STR      R0,[R4, #+44]
    364          	}
    365          	/* Calculate X and Y divider
    366          	 * The MCLK rate for the I2S transmitter is determined by the value
    367          	 * in the I2STXRATE/I2SRXRATE register. The required I2STXRATE/I2SRXRATE
    368          	 * setting depends on the desired audio sample rate desired, the format
    369          	 * (stereo/mono) used, and the data size.
    370          	 * The formula is:
    371          	 * 		I2S_MCLK = PCLK * (X/Y) / 2
    372          	 * We have:
    373          	 * 		I2S_MCLK = Freq * bit_rate;
    374          	 * So: (X/Y) = (Freq * bit_rate)/PCLK*2
    375          	 * We use a loop function to chose the most suitable X,Y value
    376          	 */
    377          
    378          	divider = ((uint64_t)(Freq *( bitrate+1)* 2)<<16) / i2sPclk;
   \                     ??I2S_FreqConfig_7: (+1)
   \   000000BA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0xFB00 0xF009      MUL      R0,R0,R9
   \   000000C4   0x0040             LSLS     R0,R0,#+1
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x0409             LSLS     R1,R1,#+16
   \   000000CA   0xEA41 0x4110      ORR      R1,R1,R0, LSR #+16
   \   000000CE   0x0400             LSLS     R0,R0,#+16
   \   000000D0   0x9A01             LDR      R2,[SP, #+4]
   \   000000D2   0x2300             MOVS     R3,#+0
   \   000000D4   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000D8   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
    379          	for (y = 255; y > 0; y--) {
   \   000000DC   0x20FF             MOVS     R0,#+255
   \   000000DE   0x0006             MOVS     R6,R0
   \                     ??I2S_FreqConfig_8: (+1)
   \   000000E0   0x2E00             CMP      R6,#+0
   \   000000E2   0xD023             BEQ.N    ??I2S_FreqConfig_9
    380          		x = y * divider;
   \   000000E4   0xE9DD 0x0104      LDRD     R0,R1,[SP, #+16]
   \   000000E8   0xFB00 0xF006      MUL      R0,R0,R6
   \   000000EC   0x9002             STR      R0,[SP, #+8]
    381          		dif = x & 0xFFFF;
   \   000000EE   0x9802             LDR      R0,[SP, #+8]
   \   000000F0   0x4682             MOV      R10,R0
    382          		if(dif>0x8000) error = 0x10000-dif;
   \   000000F2   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000F6   0xF5BA 0x4F00      CMP      R10,#+32768
   \   000000FA   0xDD03             BLE.N    ??I2S_FreqConfig_10
   \   000000FC   0xF1DA 0x0000      RSBS     R0,R10,#+0
   \   00000100   0x4680             MOV      R8,R0
   \   00000102   0xE000             B.N      ??I2S_FreqConfig_11
    383          		else error = dif;
   \                     ??I2S_FreqConfig_10: (+1)
   \   00000104   0x46D0             MOV      R8,R10
    384          		if (error == 0)
   \                     ??I2S_FreqConfig_11: (+1)
   \   00000106   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000010A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000010E   0xD102             BNE.N    ??I2S_FreqConfig_12
    385          		{
    386          			y_divide = y;
   \   00000110   0x0030             MOVS     R0,R6
   \   00000112   0x4683             MOV      R11,R0
    387          			break;
   \   00000114   0xE00A             B.N      ??I2S_FreqConfig_9
    388          		}
    389          		else if (error < ErrorOptimal)
   \                     ??I2S_FreqConfig_12: (+1)
   \   00000116   0x4640             MOV      R0,R8
   \   00000118   0x0039             MOVS     R1,R7
   \   0000011A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000011C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000011E   0x4288             CMP      R0,R1
   \   00000120   0xD202             BCS.N    ??I2S_FreqConfig_13
    390          		{
    391          			ErrorOptimal = error;
   \   00000122   0x4647             MOV      R7,R8
    392          			y_divide = y;
   \   00000124   0x0030             MOVS     R0,R6
   \   00000126   0x4683             MOV      R11,R0
    393          		}
    394          	}
   \                     ??I2S_FreqConfig_13: (+1)
   \   00000128   0x1E76             SUBS     R6,R6,#+1
   \   0000012A   0xE7D9             B.N      ??I2S_FreqConfig_8
    395          	x_divide = (y_divide * Freq *( bitrate+1)* 2)/i2sPclk;
   \                     ??I2S_FreqConfig_9: (+1)
   \   0000012C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000130   0xFB09 0xF00B      MUL      R0,R9,R11
   \   00000134   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000138   0x1C49             ADDS     R1,R1,#+1
   \   0000013A   0x4348             MULS     R0,R1,R0
   \   0000013C   0x0040             LSLS     R0,R0,#+1
   \   0000013E   0x9901             LDR      R1,[SP, #+4]
   \   00000140   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000144   0xF88D 0x0001      STRB     R0,[SP, #+1]
    396          	if (TRMode == I2S_TX_MODE)// Transmitter
   \   00000148   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014A   0x2D00             CMP      R5,#+0
   \   0000014C   0xD107             BNE.N    ??I2S_FreqConfig_14
    397          	{
    398          		I2Sx->I2STXRATE = y_divide | (x_divide << 8);
   \   0000014E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000152   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000156   0xEA5B 0x2000      ORRS     R0,R11,R0, LSL #+8
   \   0000015A   0x6220             STR      R0,[R4, #+32]
   \   0000015C   0xE006             B.N      ??I2S_FreqConfig_15
    399          	} else //Receiver
    400          	{
    401          		I2Sx->I2SRXRATE = y_divide | (x_divide << 8);
   \                     ??I2S_FreqConfig_14: (+1)
   \   0000015E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000162   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000166   0xEA5B 0x2000      ORRS     R0,R11,R0, LSL #+8
   \   0000016A   0x6260             STR      R0,[R4, #+36]
    402          	}
    403          	return SUCCESS;
   \                     ??I2S_FreqConfig_15: (+1)
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0xB007             ADD      SP,SP,#+28
   \   00000170   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    404          }
    405          /********************************************************************//**
    406           * @brief		I2S set bitrate
    407           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    408           * @param[in]	bitrate value will be set
    409           * @param[in]	TRMode is transmit/receive mode, should be:
    410           * 				- I2S_TX_MODE: transmit mode
    411           * 				- I2S_RX_MODE: receive mode
    412           * @return 		none
    413           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    414          void I2S_SetBitRate(LPC_I2S_TypeDef *I2Sx, uint8_t bitrate, uint8_t TRMode)
    415          {
   \                     I2S_SetBitRate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    416          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??I2S_SetBitRate_0
   \   00000010   0xF44F 0x71D0      MOV      R1,#+416
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    417          	CHECK_PARAM(PARAM_I2S_BITRATE(bitrate));
   \                     ??I2S_SetBitRate_0: (+1)
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xD002             BEQ.N    ??I2S_SetBitRate_1
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D41             CMP      R5,#+65
   \   00000026   0xDB05             BLT.N    ??I2S_SetBitRate_2
   \                     ??I2S_SetBitRate_1: (+1)
   \   00000028   0xF240 0x11A1      MOVW     R1,#+417
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000030   0x.... 0x....      BL       check_failed
    418          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_SetBitRate_2: (+1)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E00             CMP      R6,#+0
   \   00000038   0xD008             BEQ.N    ??I2S_SetBitRate_3
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x2E01             CMP      R6,#+1
   \   0000003E   0xD005             BEQ.N    ??I2S_SetBitRate_3
   \   00000040   0xF44F 0x71D1      MOV      R1,#+418
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000048   0x.... 0x....      BL       check_failed
    419          
    420          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_SetBitRate_3: (+1)
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD103             BNE.N    ??I2S_SetBitRate_4
    421          	{
    422          		I2Sx->I2STXBITRATE = (bitrate -1);
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x1E68             SUBS     R0,R5,#+1
   \   00000056   0x62A0             STR      R0,[R4, #+40]
   \   00000058   0xE002             B.N      ??I2S_SetBitRate_5
    423          	}
    424          	else
    425          	{
    426          		I2Sx->I2SRXBITRATE = (bitrate -1);
   \                     ??I2S_SetBitRate_4: (+1)
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x1E68             SUBS     R0,R5,#+1
   \   0000005E   0x62E0             STR      R0,[R4, #+44]
    427          	}
    428          }
   \                     ??I2S_SetBitRate_5: (+1)
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
    429          /********************************************************************//**
    430           * @brief		Configuration operating mode for I2S
    431           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    432           * @param[in]	ModeConfig pointer to I2S_MODEConf_Type will be used to
    433           * 				configure, should be:
    434           * @param[in]	TRMode is transmit/receive mode, should be:
    435           * 				- I2S_TX_MODE: transmit mode
    436           * 				- I2S_RX_MODE: receive mode
    437           * @return 		none
    438           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    439          void I2S_ModeConfig(LPC_I2S_TypeDef *I2Sx, I2S_MODEConf_Type* ModeConfig,
    440          		uint8_t TRMode)
    441          {
   \                     I2S_ModeConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    442          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??I2S_ModeConfig_0
   \   00000010   0xF44F 0x71DD      MOV      R1,#+442
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    443          	CHECK_PARAM(PARAM_I2S_CLKSEL(ModeConfig->clksel));
   \                     ??I2S_ModeConfig_0: (+1)
   \   0000001C   0x7828             LDRB     R0,[R5, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??I2S_ModeConfig_1
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD005             BEQ.N    ??I2S_ModeConfig_1
   \   00000028   0xF240 0x11BB      MOVW     R1,#+443
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000030   0x.... 0x....      BL       check_failed
    444          	CHECK_PARAM(PARAM_I2S_4PIN(ModeConfig->fpin));
   \                     ??I2S_ModeConfig_1: (+1)
   \   00000034   0x7868             LDRB     R0,[R5, #+1]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD007             BEQ.N    ??I2S_ModeConfig_2
   \   0000003A   0x7868             LDRB     R0,[R5, #+1]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD004             BEQ.N    ??I2S_ModeConfig_2
   \   00000040   0xF44F 0x71DE      MOV      R1,#+444
   \   00000044   0x....             LDR.N    R0,??DataTable18_1
   \   00000046   0x.... 0x....      BL       check_failed
    445          	CHECK_PARAM(PARAM_I2S_MCLK(ModeConfig->mcena));
   \                     ??I2S_ModeConfig_2: (+1)
   \   0000004A   0x78A8             LDRB     R0,[R5, #+2]
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD007             BEQ.N    ??I2S_ModeConfig_3
   \   00000050   0x78A8             LDRB     R0,[R5, #+2]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD004             BEQ.N    ??I2S_ModeConfig_3
   \   00000056   0xF240 0x11BD      MOVW     R1,#+445
   \   0000005A   0x....             LDR.N    R0,??DataTable18_1
   \   0000005C   0x.... 0x....      BL       check_failed
    446          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_ModeConfig_3: (+1)
   \   00000060   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD007             BEQ.N    ??I2S_ModeConfig_4
   \   00000066   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000068   0x2E01             CMP      R6,#+1
   \   0000006A   0xD004             BEQ.N    ??I2S_ModeConfig_4
   \   0000006C   0xF44F 0x71DF      MOV      R1,#+446
   \   00000070   0x....             LDR.N    R0,??DataTable18_1
   \   00000072   0x.... 0x....      BL       check_failed
    447          
    448          	if (TRMode == I2S_TX_MODE) {
   \                     ??I2S_ModeConfig_4: (+1)
   \   00000076   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD119             BNE.N    ??I2S_ModeConfig_5
    449          		I2Sx->I2STXMODE &= ~0x0F; //clear bit 3:0 in I2STXMODE register
   \   0000007C   0x6B20             LDR      R0,[R4, #+48]
   \   0000007E   0x0900             LSRS     R0,R0,#+4
   \   00000080   0x0100             LSLS     R0,R0,#+4
   \   00000082   0x6320             STR      R0,[R4, #+48]
    450          		if (ModeConfig->clksel == I2S_CLKSEL_1) {
   \   00000084   0x7828             LDRB     R0,[R5, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xD103             BNE.N    ??I2S_ModeConfig_6
    451          			I2Sx->I2STXMODE |= 0x02;
   \   0000008A   0x6B20             LDR      R0,[R4, #+48]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x6320             STR      R0,[R4, #+48]
    452          		}
    453          		if (ModeConfig->fpin == I2S_4PIN_ENABLE) {
   \                     ??I2S_ModeConfig_6: (+1)
   \   00000092   0x7868             LDRB     R0,[R5, #+1]
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xD103             BNE.N    ??I2S_ModeConfig_7
    454          			I2Sx->I2STXMODE |= (1 << 2);
   \   00000098   0x6B20             LDR      R0,[R4, #+48]
   \   0000009A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000009E   0x6320             STR      R0,[R4, #+48]
    455          		}
    456          		if (ModeConfig->mcena == I2S_MCLK_ENABLE) {
   \                     ??I2S_ModeConfig_7: (+1)
   \   000000A0   0x78A8             LDRB     R0,[R5, #+2]
   \   000000A2   0x2801             CMP      R0,#+1
   \   000000A4   0xD11D             BNE.N    ??I2S_ModeConfig_8
    457          			I2Sx->I2STXMODE |= (1 << 3);
   \   000000A6   0x6B20             LDR      R0,[R4, #+48]
   \   000000A8   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AC   0x6320             STR      R0,[R4, #+48]
   \   000000AE   0xE018             B.N      ??I2S_ModeConfig_8
    458          		}
    459          	} else {
    460          		I2Sx->I2SRXMODE &= ~0x0F; //clear bit 3:0 in I2STXMODE register
   \                     ??I2S_ModeConfig_5: (+1)
   \   000000B0   0x6B60             LDR      R0,[R4, #+52]
   \   000000B2   0x0900             LSRS     R0,R0,#+4
   \   000000B4   0x0100             LSLS     R0,R0,#+4
   \   000000B6   0x6360             STR      R0,[R4, #+52]
    461          		if (ModeConfig->clksel == I2S_CLKSEL_1) {
   \   000000B8   0x7828             LDRB     R0,[R5, #+0]
   \   000000BA   0x2802             CMP      R0,#+2
   \   000000BC   0xD103             BNE.N    ??I2S_ModeConfig_9
    462          			I2Sx->I2SRXMODE |= 0x02;
   \   000000BE   0x6B60             LDR      R0,[R4, #+52]
   \   000000C0   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000C4   0x6360             STR      R0,[R4, #+52]
    463          		}
    464          		if (ModeConfig->fpin == I2S_4PIN_ENABLE) {
   \                     ??I2S_ModeConfig_9: (+1)
   \   000000C6   0x7868             LDRB     R0,[R5, #+1]
   \   000000C8   0x2801             CMP      R0,#+1
   \   000000CA   0xD103             BNE.N    ??I2S_ModeConfig_10
    465          			I2Sx->I2SRXMODE |= (1 << 2);
   \   000000CC   0x6B60             LDR      R0,[R4, #+52]
   \   000000CE   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000D2   0x6360             STR      R0,[R4, #+52]
    466          		}
    467          		if (ModeConfig->mcena == I2S_MCLK_ENABLE) {
   \                     ??I2S_ModeConfig_10: (+1)
   \   000000D4   0x78A8             LDRB     R0,[R5, #+2]
   \   000000D6   0x2801             CMP      R0,#+1
   \   000000D8   0xD103             BNE.N    ??I2S_ModeConfig_8
    468          			I2Sx->I2SRXMODE |= (1 << 3);
   \   000000DA   0x6B60             LDR      R0,[R4, #+52]
   \   000000DC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000E0   0x6360             STR      R0,[R4, #+52]
    469          		}
    470          	}
    471          }
   \                     ??I2S_ModeConfig_8: (+1)
   \   000000E2   0xBD70             POP      {R4-R6,PC}       ;; return
    472          
    473          /********************************************************************//**
    474           * @brief		Configure DMA operation for I2S
    475           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    476           * @param[in]	DMAConfig pointer to I2S_DMAConf_Type will be used to configure
    477           * @param[in]	TRMode is transmit/receive mode, should be:
    478           * 				- I2S_TX_MODE: transmit mode
    479           * 				- I2S_RX_MODE: receive mode
    480           * @return 		none
    481           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    482          void I2S_DMAConfig(LPC_I2S_TypeDef *I2Sx, I2S_DMAConf_Type* DMAConfig,
    483          		uint8_t TRMode)
    484          {
   \                     I2S_DMAConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    485          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_DMAConfig_0
   \   0000000E   0xF240 0x11E5      MOVW     R1,#+485
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    486          	CHECK_PARAM(PARAM_I2S_DMA(DMAConfig->DMAIndex));
   \                     ??I2S_DMAConfig_0: (+1)
   \   00000018   0x7828             LDRB     R0,[R5, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_DMAConfig_1
   \   0000001E   0x7828             LDRB     R0,[R5, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_DMAConfig_1
   \   00000024   0xF44F 0x71F3      MOV      R1,#+486
   \   00000028   0x....             LDR.N    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    487          	CHECK_PARAM(PARAM_I2S_DMA_DEPTH(DMAConfig->depth));
    488          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_DMAConfig_1: (+1)
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E00             CMP      R6,#+0
   \   00000032   0xD007             BEQ.N    ??I2S_DMAConfig_2
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E01             CMP      R6,#+1
   \   00000038   0xD004             BEQ.N    ??I2S_DMAConfig_2
   \   0000003A   0xF44F 0x71F4      MOV      R1,#+488
   \   0000003E   0x....             LDR.N    R0,??DataTable18_1
   \   00000040   0x.... 0x....      BL       check_failed
    489          
    490          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_DMAConfig_2: (+1)
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x2E01             CMP      R6,#+1
   \   00000048   0xD10C             BNE.N    ??I2S_DMAConfig_3
    491          		if (DMAConfig->DMAIndex == I2S_DMA_1) {
   \   0000004A   0x7828             LDRB     R0,[R5, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD104             BNE.N    ??I2S_DMAConfig_4
    492          			LPC_I2S->I2SDMA1 = (DMAConfig->depth) << 8;
   \   00000050   0x7868             LDRB     R0,[R5, #+1]
   \   00000052   0x0200             LSLS     R0,R0,#+8
   \   00000054   0x....             LDR.N    R1,??DataTable18_4  ;; 0x400a8014
   \   00000056   0x6008             STR      R0,[R1, #+0]
   \   00000058   0xE010             B.N      ??I2S_DMAConfig_5
    493          		} else {
    494          			LPC_I2S->I2SDMA2 = (DMAConfig->depth) << 8;
   \                     ??I2S_DMAConfig_4: (+1)
   \   0000005A   0x7868             LDRB     R0,[R5, #+1]
   \   0000005C   0x0200             LSLS     R0,R0,#+8
   \   0000005E   0x....             LDR.N    R1,??DataTable18_5  ;; 0x400a8018
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE00B             B.N      ??I2S_DMAConfig_5
    495          		}
    496          	} else {
    497          		if (DMAConfig->DMAIndex == I2S_DMA_1) {
   \                     ??I2S_DMAConfig_3: (+1)
   \   00000064   0x7828             LDRB     R0,[R5, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD104             BNE.N    ??I2S_DMAConfig_6
    498          			LPC_I2S->I2SDMA1 = (DMAConfig->depth) << 16;
   \   0000006A   0x7868             LDRB     R0,[R5, #+1]
   \   0000006C   0x0400             LSLS     R0,R0,#+16
   \   0000006E   0x....             LDR.N    R1,??DataTable18_4  ;; 0x400a8014
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE003             B.N      ??I2S_DMAConfig_5
    499          		} else {
    500          			LPC_I2S->I2SDMA2 = (DMAConfig->depth) << 16;
   \                     ??I2S_DMAConfig_6: (+1)
   \   00000074   0x7868             LDRB     R0,[R5, #+1]
   \   00000076   0x0400             LSLS     R0,R0,#+16
   \   00000078   0x....             LDR.N    R1,??DataTable18_5  ;; 0x400a8018
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    501          		}
    502          	}
    503          }
   \                     ??I2S_DMAConfig_5: (+1)
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    504          
    505          /********************************************************************//**
    506           * @brief		Enable/Disable DMA operation for I2S
    507           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    508           * @param[in]	DMAIndex chose what DMA is used, should be:
    509           * 				- I2S_DMA_1: DMA1
    510           * 				- I2S_DMA_2: DMA2
    511           * @param[in]	TRMode is transmit/receive mode, should be:
    512           * 				- I2S_TX_MODE: transmit mode
    513           * 				- I2S_RX_MODE: receive mode
    514           * @param[in]	NewState is new state of DMA operation, should be:
    515           * 				- ENABLE
    516           * 				- DISABLE
    517           * @return 		none
    518           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    519          void I2S_DMACmd(LPC_I2S_TypeDef *I2Sx, uint8_t DMAIndex, uint8_t TRMode,
    520          		FunctionalState NewState)
    521          {
   \                     I2S_DMACmd: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    522          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   0000000A   0x....             LDR.N    R0,??DataTable18  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??I2S_DMACmd_0
   \   00000010   0xF240 0x210A      MOVW     R1,#+522
   \   00000014   0x....             LDR.N    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    523          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??I2S_DMACmd_0: (+1)
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD007             BEQ.N    ??I2S_DMACmd_1
   \   00000020   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000022   0x2F01             CMP      R7,#+1
   \   00000024   0xD004             BEQ.N    ??I2S_DMACmd_1
   \   00000026   0xF240 0x210B      MOVW     R1,#+523
   \   0000002A   0x....             LDR.N    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    524          	CHECK_PARAM(PARAM_I2S_DMA(DMAIndex));
   \                     ??I2S_DMACmd_1: (+1)
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xD007             BEQ.N    ??I2S_DMACmd_2
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D01             CMP      R5,#+1
   \   0000003A   0xD004             BEQ.N    ??I2S_DMACmd_2
   \   0000003C   0xF44F 0x7103      MOV      R1,#+524
   \   00000040   0x....             LDR.N    R0,??DataTable18_1
   \   00000042   0x.... 0x....      BL       check_failed
    525          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_DMACmd_2: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD007             BEQ.N    ??I2S_DMACmd_3
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0x2E01             CMP      R6,#+1
   \   00000050   0xD004             BEQ.N    ??I2S_DMACmd_3
   \   00000052   0xF240 0x210D      MOVW     R1,#+525
   \   00000056   0x....             LDR.N    R0,??DataTable18_1
   \   00000058   0x.... 0x....      BL       check_failed
    526          
    527          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_DMACmd_3: (+1)
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E01             CMP      R6,#+1
   \   00000060   0xD11C             BNE.N    ??I2S_DMACmd_4
    528          		if (DMAIndex == I2S_DMA_1) {
   \   00000062   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000064   0x2D00             CMP      R5,#+0
   \   00000066   0xD10C             BNE.N    ??I2S_DMACmd_5
    529          			if (NewState == ENABLE)
   \   00000068   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   0x2F01             CMP      R7,#+1
   \   0000006C   0xD104             BNE.N    ??I2S_DMACmd_6
    530          				I2Sx->I2SDMA1 |= 0x01;
   \   0000006E   0x6960             LDR      R0,[R4, #+20]
   \   00000070   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000074   0x6160             STR      R0,[R4, #+20]
   \   00000076   0xE02D             B.N      ??I2S_DMACmd_7
    531          			else
    532          				I2Sx->I2SDMA1 &= ~0x01;
   \                     ??I2S_DMACmd_6: (+1)
   \   00000078   0x6960             LDR      R0,[R4, #+20]
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0x0040             LSLS     R0,R0,#+1
   \   0000007E   0x6160             STR      R0,[R4, #+20]
   \   00000080   0xE028             B.N      ??I2S_DMACmd_7
    533          		} else {
    534          			if (NewState == ENABLE)
   \                     ??I2S_DMACmd_5: (+1)
   \   00000082   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000084   0x2F01             CMP      R7,#+1
   \   00000086   0xD104             BNE.N    ??I2S_DMACmd_8
    535          				I2Sx->I2SDMA2 |= 0x01;
   \   00000088   0x69A0             LDR      R0,[R4, #+24]
   \   0000008A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000008E   0x61A0             STR      R0,[R4, #+24]
   \   00000090   0xE020             B.N      ??I2S_DMACmd_7
    536          			else
    537          				I2Sx->I2SDMA2 &= ~0x01;
   \                     ??I2S_DMACmd_8: (+1)
   \   00000092   0x69A0             LDR      R0,[R4, #+24]
   \   00000094   0x0840             LSRS     R0,R0,#+1
   \   00000096   0x0040             LSLS     R0,R0,#+1
   \   00000098   0x61A0             STR      R0,[R4, #+24]
   \   0000009A   0xE01B             B.N      ??I2S_DMACmd_7
    538          		}
    539          	} else {
    540          		if (DMAIndex == I2S_DMA_1) {
   \                     ??I2S_DMACmd_4: (+1)
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x2D00             CMP      R5,#+0
   \   000000A0   0xD10C             BNE.N    ??I2S_DMACmd_9
    541          			if (NewState == ENABLE)
   \   000000A2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000A4   0x2F01             CMP      R7,#+1
   \   000000A6   0xD104             BNE.N    ??I2S_DMACmd_10
    542          				I2Sx->I2SDMA1 |= 0x02;
   \   000000A8   0x6960             LDR      R0,[R4, #+20]
   \   000000AA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000AE   0x6160             STR      R0,[R4, #+20]
   \   000000B0   0xE010             B.N      ??I2S_DMACmd_7
    543          			else
    544          				I2Sx->I2SDMA1 &= ~0x02;
   \                     ??I2S_DMACmd_10: (+1)
   \   000000B2   0x6960             LDR      R0,[R4, #+20]
   \   000000B4   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000B8   0x6160             STR      R0,[R4, #+20]
   \   000000BA   0xE00B             B.N      ??I2S_DMACmd_7
    545          		} else {
    546          			if (NewState == ENABLE)
   \                     ??I2S_DMACmd_9: (+1)
   \   000000BC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BE   0x2F01             CMP      R7,#+1
   \   000000C0   0xD104             BNE.N    ??I2S_DMACmd_11
    547          				I2Sx->I2SDMA2 |= 0x02;
   \   000000C2   0x69A0             LDR      R0,[R4, #+24]
   \   000000C4   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000C8   0x61A0             STR      R0,[R4, #+24]
   \   000000CA   0xE003             B.N      ??I2S_DMACmd_7
    548          			else
    549          				I2Sx->I2SDMA2 &= ~0x02;
   \                     ??I2S_DMACmd_11: (+1)
   \   000000CC   0x69A0             LDR      R0,[R4, #+24]
   \   000000CE   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000D2   0x61A0             STR      R0,[R4, #+24]
    550          		}
    551          	}
    552          }
   \                     ??I2S_DMACmd_7: (+1)
   \   000000D4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    553          
    554          /********************************************************************//**
    555           * @brief		Configure IRQ for I2S
    556           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    557           * @param[in]	TRMode is transmit/receive mode, should be:
    558           * 				- I2S_TX_MODE: transmit mode
    559           * 				- I2S_RX_MODE: receive mode
    560           * @param[in]	level: is the FIFO level that triggers IRQ request
    561           * @param[in]	pfnI2SCbs: the pointer to call-back function handle this interrupt
    562           * @return 		none
    563           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    564          void I2S_IRQConfig(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, uint8_t level,  fnI2SCbs_Type *pfnI2SCbs) {
   \                     I2S_IRQConfig: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    565          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   0000000A   0x....             LDR.N    R0,??DataTable18  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??I2S_IRQConfig_0
   \   00000010   0xF240 0x2135      MOVW     R1,#+565
   \   00000014   0x....             LDR.N    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    566          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_IRQConfig_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD007             BEQ.N    ??I2S_IRQConfig_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD004             BEQ.N    ??I2S_IRQConfig_1
   \   00000026   0xF240 0x2136      MOVW     R1,#+566
   \   0000002A   0x....             LDR.N    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    567          	CHECK_PARAM(PARAM_I2S_IRQ_LEVEL(level));
    568          
    569          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_IRQConfig_1: (+1)
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD105             BNE.N    ??I2S_IRQConfig_2
    570          		I2Sx->I2SIRQ |= (level << 8);
   \   00000036   0x69E0             LDR      R0,[R4, #+28]
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0xEA50 0x2006      ORRS     R0,R0,R6, LSL #+8
   \   0000003E   0x61E0             STR      R0,[R4, #+28]
   \   00000040   0xE004             B.N      ??I2S_IRQConfig_3
    571          	} else {
    572          		I2Sx->I2SIRQ |= (level << 16);
   \                     ??I2S_IRQConfig_2: (+1)
   \   00000042   0x69E0             LDR      R0,[R4, #+28]
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0xEA50 0x4006      ORRS     R0,R0,R6, LSL #+16
   \   0000004A   0x61E0             STR      R0,[R4, #+28]
    573          	}
    574          	//setup Call-Back funtion for receive interrupt
    575          	_apfnI2SCbs[TRMode] = pfnI2SCbs;
   \                     ??I2S_IRQConfig_3: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable18_6
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0xF840 0x7025      STR      R7,[R0, R5, LSL #+2]
    576          }
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    577          
    578          /********************************************************************//**
    579           * @brief		Enable/Disable IRQ for I2S
    580           * @param[in]	I2Sx: I2S peripheral selected, should be: I2S
    581           * @param[in]	TRMode is transmit/receive mode, should be:
    582           * 				- I2S_TX_MODE: transmit mode
    583           * 				- I2S_RX_MODE: receive mode
    584           * @param[in]	NewState is new state of DMA operation, should be:
    585           * 				- ENABLE
    586           * 				- DISABLE
    587           * @return 		none
    588           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    589          void I2S_IRQCmd(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, FunctionalState NewState) {
   \                     I2S_IRQCmd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    590          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_IRQCmd_0
   \   0000000E   0xF240 0x214E      MOVW     R1,#+590
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    591          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??I2S_IRQCmd_0: (+1)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_IRQCmd_1
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0x2E01             CMP      R6,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_IRQCmd_1
   \   00000024   0xF240 0x214F      MOVW     R1,#+591
   \   00000028   0x....             LDR.N    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    592          
    593          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_IRQCmd_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xD10C             BNE.N    ??I2S_IRQCmd_2
    594          		if (NewState == ENABLE)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E01             CMP      R6,#+1
   \   00000038   0xD104             BNE.N    ??I2S_IRQCmd_3
    595          			I2Sx->I2SIRQ |= 0x01;
   \   0000003A   0x69E0             LDR      R0,[R4, #+28]
   \   0000003C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000040   0x61E0             STR      R0,[R4, #+28]
   \   00000042   0xE010             B.N      ??I2S_IRQCmd_4
    596          		else
    597          			I2Sx->I2SIRQ &= ~0x01;
   \                     ??I2S_IRQCmd_3: (+1)
   \   00000044   0x69E0             LDR      R0,[R4, #+28]
   \   00000046   0x0840             LSRS     R0,R0,#+1
   \   00000048   0x0040             LSLS     R0,R0,#+1
   \   0000004A   0x61E0             STR      R0,[R4, #+28]
   \   0000004C   0xE00B             B.N      ??I2S_IRQCmd_4
    598          		//Enable DMA
    599          
    600          	} else {
    601          		if (NewState == ENABLE)
   \                     ??I2S_IRQCmd_2: (+1)
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E01             CMP      R6,#+1
   \   00000052   0xD104             BNE.N    ??I2S_IRQCmd_5
    602          			I2Sx->I2SIRQ |= 0x02;
   \   00000054   0x69E0             LDR      R0,[R4, #+28]
   \   00000056   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000005A   0x61E0             STR      R0,[R4, #+28]
   \   0000005C   0xE003             B.N      ??I2S_IRQCmd_4
    603          		else
    604          			I2Sx->I2SIRQ &= ~0x02;
   \                     ??I2S_IRQCmd_5: (+1)
   \   0000005E   0x69E0             LDR      R0,[R4, #+28]
   \   00000060   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000064   0x61E0             STR      R0,[R4, #+28]
    605          	}
    606          }
   \                     ??I2S_IRQCmd_4: (+1)
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
    607          /*********************************************************************//**
    608           * @brief		Standard I2S interrupt handler, this function will check
    609           * 				all interrupt status of I2S channels, then execute the call
    610           * 				back function if they're already installed
    611           * @param[in]	None
    612           * @return		None
    613           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    614          void I2S_IntHandler(void)
    615          {
   \                     I2S_IntHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    616          	uint8_t rx_level,
    617          			tx_level,
    618          			tx_depth_irq,
    619          			rx_depth_irq;
    620          
    621          
    622          	if((LPC_I2S->I2SIRQ)& 0x01){ //receive interrupt
   \   00000002   0x....             LDR.N    R0,??DataTable18_7  ;; 0x400a801c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD511             BPL.N    ??I2S_IntHandler_0
    623          		rx_level = ((LPC_I2S->I2SSTATE)>>8)&0xFF;
   \   0000000A   0x....             LDR.N    R0,??DataTable18_8  ;; 0x400a8010
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0A00             LSRS     R0,R0,#+8
   \   00000010   0x0004             MOVS     R4,R0
    624          		rx_depth_irq = ((LPC_I2S->I2SIRQ)>>8)&0xFF;
   \   00000012   0x....             LDR.N    R0,??DataTable18_7  ;; 0x400a801c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x0A00             LSRS     R0,R0,#+8
   \   00000018   0x0007             MOVS     R7,R0
    625          
    626          		if (rx_level >= rx_depth_irq)//receive interrupt
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x0039             MOVS     R1,R7
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD31A             BCC.N    ??I2S_IntHandler_1
    627          		{
    628          			_apfnI2SCbs[1]();
   \   00000026   0x....             LDR.N    R0,??DataTable18_6
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
   \   0000002C   0xE016             B.N      ??I2S_IntHandler_1
    629          		}
    630          	}
    631          	else if(((LPC_I2S->I2SIRQ)>>1)& 0x01)
   \                     ??I2S_IntHandler_0: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable18_7  ;; 0x400a801c
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD010             BEQ.N    ??I2S_IntHandler_1
    632          	{
    633          		tx_level = ((LPC_I2S->I2SSTATE)>>16)&0xFF;
   \   0000003A   0x....             LDR.N    R0,??DataTable18_8  ;; 0x400a8010
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0C00             LSRS     R0,R0,#+16
   \   00000040   0x0005             MOVS     R5,R0
    634          		tx_depth_irq = ((LPC_I2S->I2SIRQ)>>16)&0xFF;
   \   00000042   0x....             LDR.N    R0,??DataTable18_7  ;; 0x400a801c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x0C00             LSRS     R0,R0,#+16
   \   00000048   0x0006             MOVS     R6,R0
    635          		if(tx_level <= tx_depth_irq)//transmit interrupt
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD302             BCC.N    ??I2S_IntHandler_1
    636          		{
    637          			_apfnI2SCbs[0]();
   \   00000056   0x....             LDR.N    R0,??DataTable18_6
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x4780             BLX      R0
    638          		}
    639          	}
    640          }
   \                     ??I2S_IntHandler_1: (+1)
   \   0000005C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x400A8000         DC32     0x400a8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x400A8004         DC32     0x400a8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x00017701         DC32     0x17701

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x400A8014         DC32     0x400a8014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x400A8018         DC32     0x400a8018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     _apfnI2SCbs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x400A801C         DC32     0x400a801c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x400A8010         DC32     0x400a8010

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 0D0H, 0C2H, 0CFH, 0EEH, 0C4H
   \              0x5C 0xD0    
   \              0xC2 0xCF    
   \              0xEE 0xC4    
   \   00000008   0xBF 0x5C          DC8 0BFH, 5CH, 0D2H, 0C6H, 0BDH, 0BBH, 0D7H, 0CAH
   \              0xD2 0xC6    
   \              0xBD 0xBB    
   \              0xD7 0xCA    
   \   00000010   0xC1 0xCF          DC8 0C1H, 0CFH, 4CH, 48H, 54H, 5CH, 0D7H, 0D4H
   \              0x4C 0x48    
   \              0x54 0x5C    
   \              0xD7 0xD4    
   \   00000018   0xD6 0xFA          DC8 0D6H, 0FAH, 0BDH, 0C9H, 0B7H, 0D1H, 0BBH, 0FAH
   \              0xBD 0xC9    
   \              0xB7 0xD1    
   \              0xBB 0xFA    
   \   00000020   0x5C 0xC8          DC8 5CH, 0C8H, 0EDH, 0BCH, 0FEH, 5CH, 4DH, 69H
   \              0xED 0xBC    
   \              0xFE 0x5C    
   \              0x4D 0x69    
   \   00000028   0x63 0x72          DC8 63H, 72H, 69H, 75H, 6DH, 5FH, 4CH, 50H
   \              0x69 0x75    
   \              0x6D 0x5F    
   \              0x4C 0x50    
   \   00000030   0x43 0x31          DC8 43H, 31H, 37H, 36H, 38H, 2DH, 53H, 4BH
   \              0x37 0x36    
   \              0x38 0x2D    
   \              0x53 0x4B    
   \   00000038   0x5F 0x75          DC8 5FH, 75H, 43H, 4FH, 53H, 2DH, 49H, 49H
   \              0x43 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \   00000040   0x49 0x2D          DC8 49H, 2DH, 52H, 65H, 6CH, 65H, 61H, 73H
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \   00000048   0x65 0x5C          DC8 65H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000050   0x72 0x65          DC8 72H, 65H, 5CH, 45H, 76H, 61H, 6CH, 42H
   \              0x5C 0x45    
   \              0x76 0x61    
   \              0x6C 0x42    
   \   00000058   0x6F 0x61          DC8 6FH, 61H, 72H, 64H, 73H, 5CH, 4EH, 58H
   \              0x72 0x64    
   \              0x73 0x5C    
   \              0x4E 0x58    
   \   00000060   0x50 0x5C          DC8 50H, 5CH, 4CH, 50H, 43H, 31H, 37H, 36H
   \              0x4C 0x50    
   \              0x43 0x31    
   \              0x37 0x36    
   \   00000068   0x38 0x2D          DC8 38H, 2DH, 53H, 4BH, 5CH, 4CH, 50H, 43H
   \              0x53 0x4B    
   \              0x5C 0x4C    
   \              0x50 0x43    
   \   00000070   0x31 0x37          DC8 31H, 37H, 58H, 58H, 43H, 4DH, 53H, 49H
   \              0x58 0x58    
   \              0x43 0x4D    
   \              0x53 0x49    
   \   00000078   0x53 0x5C          DC8 53H, 5CH, 44H, 72H, 69H, 76H, 65H, 72H
   \              0x44 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \   00000080   0x73 0x5C          DC8 73H, 5CH, 73H, 6FH, 75H, 72H, 63H, 65H
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000088   0x5C 0x6C          DC8 5CH, 6CH, 70H, 63H, 31H, 37H, 78H, 78H
   \              0x70 0x63    
   \              0x31 0x37    
   \              0x78 0x78    
   \   00000090   0x5F 0x69          DC8 5FH, 69H, 32H, 73H, 2EH, 63H, 0
   \              0x32 0x73    
   \              0x2E 0x63    
   \              0x00         
   \   00000097   0x00               DC8 0
    641          
    642          /**
    643           * @}
    644           */
    645          
    646          #endif /* _I2S */
    647          
    648          /**
    649           * @}
    650           */
    651          
    652          /* --------------------------------- End Of File ------------------------------ */
    653          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   I2S_Config
        24   -> check_failed
      24   I2S_DMACmd
        24   -> check_failed
      16   I2S_DMAConfig
        16   -> check_failed
       8   I2S_DeInit
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      64   I2S_FreqConfig
        64   -> CLKPWR_GetPCLK
        64   -> I2S_GetChannel
        64   -> I2S_GetWordWidth
        64   -> check_failed
        64 __aeabi_uldivmod
      16   I2S_GetChannel
        16   -> check_failed
      16   I2S_GetLevel
        16   -> check_failed
      16   I2S_GetWordWidth
        16   -> check_failed
      16   I2S_IRQCmd
        16   -> check_failed
      24   I2S_IRQConfig
        24   -> check_failed
       8   I2S_Init
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      24   I2S_IntHandler
        24   -- Indirect call
      16   I2S_ModeConfig
        16   -> check_failed
      16   I2S_Mute
        16   -> check_failed
      16   I2S_Pause
        16   -> check_failed
       8   I2S_Receive
         8   -> check_failed
      16   I2S_Send
        16   -> check_failed
      16   I2S_SetBitRate
        16   -> check_failed
       0   I2S_Start
      16   I2S_Stop
        16   -> check_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
     152  ?_0
     240  I2S_Config
     214  I2S_DMACmd
     126  I2S_DMAConfig
      34  I2S_DeInit
     372  I2S_FreqConfig
      84  I2S_GetChannel
      68  I2S_GetLevel
      94  I2S_GetWordWidth
     104  I2S_IRQCmd
      86  I2S_IRQConfig
      48  I2S_Init
      94  I2S_IntHandler
     228  I2S_ModeConfig
      76  I2S_Mute
      76  I2S_Pause
      26  I2S_Receive
      28  I2S_Send
      98  I2S_SetBitRate
      42  I2S_Start
     100  I2S_Stop
       8  _apfnI2SCbs

 
     8 bytes in section .bss
   152 bytes in section .rodata
 2 274 bytes in section .text
 
 2 274 bytes of CODE  memory
   152 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: 5
