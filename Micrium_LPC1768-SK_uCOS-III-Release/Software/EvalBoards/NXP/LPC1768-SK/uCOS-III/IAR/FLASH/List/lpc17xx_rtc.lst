###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:08
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_rtc.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_rtc.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_rtc.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_rtc.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_rtc.c
      1          /**
      2           * @file	: lpc17xx_rtc.c
      3           * @brief	: Contains all functions support for RTC firmware library on LPC17xx
      4           * @version	: 1.0
      5           * @date	: 23. Apr. 2009
      6           * @author	: HieuNguyen
      7           **************************************************************************
      8           * Software that is described herein is for illustrative purposes only
      9           * which provides customers with programming information regarding the
     10           * products. This software is supplied "AS IS" without any warranties.
     11           * NXP Semiconductors assumes no responsibility or liability for the
     12           * use of the software, conveys no license or title under any patent,
     13           * copyright, or mask work right to the product. NXP Semiconductors
     14           * reserves the right to make changes in the software without
     15           * notification. NXP Semiconductors also make no representation or
     16           * warranty that such application will be suitable for the specified
     17           * use without further testing or modification.
     18           **********************************************************************/
     19          
     20          
     21          /* Peripheral group ----------------------------------------------------------- */
     22          /** @addtogroup RTC
     23           * @{
     24           */
     25          
     26          /* Includes ------------------------------------------------------------------- */
     27          #include "lpc17xx_rtc.h"
     28          #include "lpc17xx_clkpwr.h"
     29          
     30          
     31          /* If this source file built with example, the LPC17xx FW library configuration
     32           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     33           * otherwise the default FW library configuration file must be included instead
     34           */
     35          #ifdef __BUILD_WITH_EXAMPLE__
     36          #include "lpc17xx_libcfg.h"
     37          #else
     38          #include "lpc17xx_libcfg_default.h"
     39          #endif /* __BUILD_WITH_EXAMPLE__ */
     40          
     41          
     42          #ifdef _RTC
     43          
     44          /* Public Functions ----------------------------------------------------------- */
     45          /** @addtogroup RTC_Public_Functions
     46           * @{
     47           */
     48          
     49          /********************************************************************//**
     50           * @brief		Initializes the RTC peripheral.
     51           * @param[in]	RTCx	RTC peripheral selected, should be RTC
     52           * @return 		None
     53           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     54          void RTC_Init (LPC_RTC_TypeDef *RTCx)
     55          {
   \                     RTC_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     56          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_Init_0
   \   0000000C   0x2138             MOVS     R1,#+56
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
     57          
     58          	/* Set up clock and power for RTC module */
     59          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, ENABLE);
   \                     ??RTC_Init_0: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF44F 0x7000      MOV      R0,#+512
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
     60          
     61          	// Clear all register to be default
     62          	RTCx->ILR = 0x00;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7020             STRB     R0,[R4, #+0]
     63          	RTCx->CCR = 0x00;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x7220             STRB     R0,[R4, #+8]
     64          	RTCx->CIIR = 0x00;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x7320             STRB     R0,[R4, #+12]
     65          	RTCx->AMR = 0xFF;
   \   0000002C   0x20FF             MOVS     R0,#+255
   \   0000002E   0x7420             STRB     R0,[R4, #+16]
     66          	RTCx->CALIBRATION = 0x00;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6420             STR      R0,[R4, #+64]
     67          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     68          
     69          
     70          /*********************************************************************//**
     71           * @brief		De-initializes the RTC peripheral registers to their
     72          *                  default reset values.
     73           * @param[in]	RTCx	RTC peripheral selected, should be RTC
     74           * @return 		None
     75           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          void RTC_DeInit(LPC_RTC_TypeDef *RTCx)
     77          {
   \                     RTC_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     78          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_DeInit_0
   \   0000000C   0x214E             MOVS     R1,#+78
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
     79          
     80          	RTCx->CCR = 0x00;
   \                     ??RTC_DeInit_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7220             STRB     R0,[R4, #+8]
     81          	// Disable power and clock for RTC module
     82          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, DISABLE);
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xF44F 0x7000      MOV      R0,#+512
   \   00000020   0x.... 0x....      BL       CLKPWR_ConfigPPWR
     83          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     84          
     85          /*********************************************************************//**
     86           * @brief 		Reset clock tick counter in RTC peripheral
     87           * @param[in]	RTCx	RTC peripheral selected, should be RTC
     88           * @return 		None
     89           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          void RTC_ResetClockTickCounter(LPC_RTC_TypeDef *RTCx)
     91          {
   \                     RTC_ResetClockTickCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     92          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ResetClockTickCounter_0
   \   0000000C   0x215C             MOVS     R1,#+92
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
     93          
     94          	RTCx->CCR |= RTC_CCR_CTCRST;
   \                     ??RTC_ResetClockTickCounter_0: (+1)
   \   00000016   0x7A20             LDRB     R0,[R4, #+8]
   \   00000018   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001C   0x7220             STRB     R0,[R4, #+8]
     95          	RTCx->CCR &= (~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
   \   0000001E   0x7A20             LDRB     R0,[R4, #+8]
   \   00000020   0xF010 0x0011      ANDS     R0,R0,#0x11
   \   00000024   0x7220             STRB     R0,[R4, #+8]
     96          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     97          
     98          /*********************************************************************//**
     99           * @brief 		Start/Stop RTC peripheral
    100           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    101           * @param[in]	NewState New State of this function, should be:
    102           * 				- ENABLE: The time counters are enabled
    103           * 				- DISABLE: The time counters are disabled
    104           * @return 		None
    105           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          void RTC_Cmd (LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
    107          {
   \                     RTC_Cmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    108          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_Cmd_0
   \   0000000E   0x216C             MOVS     R1,#+108
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    109          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_Cmd_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??RTC_Cmd_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??RTC_Cmd_1
   \   00000024   0x216D             MOVS     R1,#+109
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    110          
    111          	if (NewState == ENABLE)
   \                     ??RTC_Cmd_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xD104             BNE.N    ??RTC_Cmd_2
    112          	{
    113          		RTCx->CCR |= RTC_CCR_CLKEN;
   \   00000034   0x7A20             LDRB     R0,[R4, #+8]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x7220             STRB     R0,[R4, #+8]
   \   0000003C   0xE003             B.N      ??RTC_Cmd_3
    114          	}
    115          	else
    116          	{
    117          		RTCx->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
   \                     ??RTC_Cmd_2: (+1)
   \   0000003E   0x7A20             LDRB     R0,[R4, #+8]
   \   00000040   0xF010 0x0012      ANDS     R0,R0,#0x12
   \   00000044   0x7220             STRB     R0,[R4, #+8]
    118          	}
    119          }
   \                     ??RTC_Cmd_3: (+1)
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    120          
    121          
    122          /*********************************************************************//**
    123           * @brief 		Enable/Disable Counter increment interrupt for each time type
    124           * 				in RTC peripheral
    125           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    126           * @param[in]	CntIncrIntType: Counter Increment Interrupt type,
    127           * 				an increment of this type value below will generates
    128           * 				an interrupt, should be:
    129           * 				- RTC_TIMETYPE_SECOND
    130           * 				- RTC_TIMETYPE_MINUTE
    131           * 				- RTC_TIMETYPE_HOUR
    132           * 				- RTC_TIMETYPE_DAYOFWEEK
    133           * 				- RTC_TIMETYPE_DAYOFMONTH
    134           * 				- RTC_TIMETYPE_DAYOFYEAR
    135           * 				- RTC_TIMETYPE_MONTH
    136           * 				- RTC_TIMETYPE_YEAR
    137           * @param[in]	NewState New State of this function, should be:
    138           * 				- ENABLE: Counter Increment interrupt for this
    139           * 					time type are enabled
    140           * 				- DISABLE: Counter Increment interrupt for this
    141           * 					time type are disabled
    142           * @return 		None
    143           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void RTC_CntIncrIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t CntIncrIntType, \
    145          								FunctionalState NewState)
    146          {
   \                     RTC_CntIncrIntConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    147          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_0
   \   00000010   0x2193             MOVS     R1,#+147
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    148          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_CntIncrIntConfig_0: (+1)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD007             BEQ.N    ??RTC_CntIncrIntConfig_1
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E01             CMP      R6,#+1
   \   00000024   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_1
   \   00000026   0x2194             MOVS     R1,#+148
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    149          	CHECK_PARAM(PARAM_RTC_TIMETYPE(CntIncrIntType));
   \                     ??RTC_CntIncrIntConfig_1: (+1)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD012             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD010             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000038   0x2D02             CMP      R5,#+2
   \   0000003A   0xD00E             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   0000003C   0x2D03             CMP      R5,#+3
   \   0000003E   0xD00C             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000040   0x2D04             CMP      R5,#+4
   \   00000042   0xD00A             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000044   0x2D05             CMP      R5,#+5
   \   00000046   0xD008             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000048   0x2D06             CMP      R5,#+6
   \   0000004A   0xD006             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   0000004C   0x2D07             CMP      R5,#+7
   \   0000004E   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000050   0x2195             MOVS     R1,#+149
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000056   0x.... 0x....      BL       check_failed
    150          
    151          	if (NewState ==  ENABLE)
   \                     ??RTC_CntIncrIntConfig_2: (+1)
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E01             CMP      R6,#+1
   \   0000005E   0xD135             BNE.N    ??RTC_CntIncrIntConfig_3
    152          	{
    153          		switch (CntIncrIntType)
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD00B             BEQ.N    ??RTC_CntIncrIntConfig_4
   \   00000064   0x2D02             CMP      R5,#+2
   \   00000066   0xD013             BEQ.N    ??RTC_CntIncrIntConfig_5
   \   00000068   0xD30D             BCC.N    ??RTC_CntIncrIntConfig_6
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD01A             BEQ.N    ??RTC_CntIncrIntConfig_7
   \   0000006E   0xD314             BCC.N    ??RTC_CntIncrIntConfig_8
   \   00000070   0x2D06             CMP      R5,#+6
   \   00000072   0xD021             BEQ.N    ??RTC_CntIncrIntConfig_9
   \   00000074   0xD31B             BCC.N    ??RTC_CntIncrIntConfig_10
   \   00000076   0x2D07             CMP      R5,#+7
   \   00000078   0xD023             BEQ.N    ??RTC_CntIncrIntConfig_11
   \   0000007A   0xE05C             B.N      ??RTC_CntIncrIntConfig_12
    154          		{
    155          		case RTC_TIMETYPE_SECOND:
    156          			RTCx->CIIR |= RTC_CIIR_IMSEC;
   \                     ??RTC_CntIncrIntConfig_4: (+1)
   \   0000007C   0x7B20             LDRB     R0,[R4, #+12]
   \   0000007E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000082   0x7320             STRB     R0,[R4, #+12]
    157          			break;
   \   00000084   0xE057             B.N      ??RTC_CntIncrIntConfig_12
    158          		case RTC_TIMETYPE_MINUTE:
    159          			RTCx->CIIR |= RTC_CIIR_IMMIN;
   \                     ??RTC_CntIncrIntConfig_6: (+1)
   \   00000086   0x7B20             LDRB     R0,[R4, #+12]
   \   00000088   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000008C   0x7320             STRB     R0,[R4, #+12]
    160          			break;
   \   0000008E   0xE052             B.N      ??RTC_CntIncrIntConfig_12
    161          		case RTC_TIMETYPE_HOUR:
    162          			RTCx->CIIR |= RTC_CIIR_IMHOUR;
   \                     ??RTC_CntIncrIntConfig_5: (+1)
   \   00000090   0x7B20             LDRB     R0,[R4, #+12]
   \   00000092   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000096   0x7320             STRB     R0,[R4, #+12]
    163          			break;
   \   00000098   0xE04D             B.N      ??RTC_CntIncrIntConfig_12
    164          		case RTC_TIMETYPE_DAYOFWEEK:
    165          			RTCx->CIIR |= RTC_CIIR_IMDOW;
   \                     ??RTC_CntIncrIntConfig_8: (+1)
   \   0000009A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000009C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000A0   0x7320             STRB     R0,[R4, #+12]
    166          			break;
   \   000000A2   0xE048             B.N      ??RTC_CntIncrIntConfig_12
    167          		case RTC_TIMETYPE_DAYOFMONTH:
    168          			RTCx->CIIR |= RTC_CIIR_IMDOM;
   \                     ??RTC_CntIncrIntConfig_7: (+1)
   \   000000A4   0x7B20             LDRB     R0,[R4, #+12]
   \   000000A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AA   0x7320             STRB     R0,[R4, #+12]
    169          			break;
   \   000000AC   0xE043             B.N      ??RTC_CntIncrIntConfig_12
    170          		case RTC_TIMETYPE_DAYOFYEAR:
    171          			RTCx->CIIR |= RTC_CIIR_IMDOY;
   \                     ??RTC_CntIncrIntConfig_10: (+1)
   \   000000AE   0x7B20             LDRB     R0,[R4, #+12]
   \   000000B0   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000B4   0x7320             STRB     R0,[R4, #+12]
    172          			break;
   \   000000B6   0xE03E             B.N      ??RTC_CntIncrIntConfig_12
    173          		case RTC_TIMETYPE_MONTH:
    174          			RTCx->CIIR |= RTC_CIIR_IMMON;
   \                     ??RTC_CntIncrIntConfig_9: (+1)
   \   000000B8   0x7B20             LDRB     R0,[R4, #+12]
   \   000000BA   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000BE   0x7320             STRB     R0,[R4, #+12]
    175          			break;
   \   000000C0   0xE039             B.N      ??RTC_CntIncrIntConfig_12
    176          		case RTC_TIMETYPE_YEAR:
    177          			RTCx->CIIR |= RTC_CIIR_IMYEAR;
   \                     ??RTC_CntIncrIntConfig_11: (+1)
   \   000000C2   0x7B20             LDRB     R0,[R4, #+12]
   \   000000C4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000C8   0x7320             STRB     R0,[R4, #+12]
    178          			break;
   \   000000CA   0xE034             B.N      ??RTC_CntIncrIntConfig_12
    179          		}
    180          	}
    181          	else
    182          	{
    183          		switch (CntIncrIntType)
   \                     ??RTC_CntIncrIntConfig_3: (+1)
   \   000000CC   0x2D00             CMP      R5,#+0
   \   000000CE   0xD00B             BEQ.N    ??RTC_CntIncrIntConfig_13
   \   000000D0   0x2D02             CMP      R5,#+2
   \   000000D2   0xD013             BEQ.N    ??RTC_CntIncrIntConfig_14
   \   000000D4   0xD30D             BCC.N    ??RTC_CntIncrIntConfig_15
   \   000000D6   0x2D04             CMP      R5,#+4
   \   000000D8   0xD01A             BEQ.N    ??RTC_CntIncrIntConfig_16
   \   000000DA   0xD314             BCC.N    ??RTC_CntIncrIntConfig_17
   \   000000DC   0x2D06             CMP      R5,#+6
   \   000000DE   0xD021             BEQ.N    ??RTC_CntIncrIntConfig_18
   \   000000E0   0xD31B             BCC.N    ??RTC_CntIncrIntConfig_19
   \   000000E2   0x2D07             CMP      R5,#+7
   \   000000E4   0xD023             BEQ.N    ??RTC_CntIncrIntConfig_20
   \   000000E6   0xE026             B.N      ??RTC_CntIncrIntConfig_12
    184          		{
    185          		case RTC_TIMETYPE_SECOND:
    186          			RTCx->CIIR &= (~RTC_CIIR_IMSEC) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_13: (+1)
   \   000000E8   0x7B20             LDRB     R0,[R4, #+12]
   \   000000EA   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   000000EE   0x7320             STRB     R0,[R4, #+12]
    187          			break;
   \   000000F0   0xE021             B.N      ??RTC_CntIncrIntConfig_12
    188          		case RTC_TIMETYPE_MINUTE:
    189          			RTCx->CIIR &= (~RTC_CIIR_IMMIN) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_15: (+1)
   \   000000F2   0x7B20             LDRB     R0,[R4, #+12]
   \   000000F4   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   000000F8   0x7320             STRB     R0,[R4, #+12]
    190          			break;
   \   000000FA   0xE01C             B.N      ??RTC_CntIncrIntConfig_12
    191          		case RTC_TIMETYPE_HOUR:
    192          			RTCx->CIIR &= (~RTC_CIIR_IMHOUR) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_14: (+1)
   \   000000FC   0x7B20             LDRB     R0,[R4, #+12]
   \   000000FE   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000102   0x7320             STRB     R0,[R4, #+12]
    193          			break;
   \   00000104   0xE017             B.N      ??RTC_CntIncrIntConfig_12
    194          		case RTC_TIMETYPE_DAYOFWEEK:
    195          			RTCx->CIIR &= (~RTC_CIIR_IMDOW) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_17: (+1)
   \   00000106   0x7B20             LDRB     R0,[R4, #+12]
   \   00000108   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000010C   0x7320             STRB     R0,[R4, #+12]
    196          			break;
   \   0000010E   0xE012             B.N      ??RTC_CntIncrIntConfig_12
    197          		case RTC_TIMETYPE_DAYOFMONTH:
    198          			RTCx->CIIR &= (~RTC_CIIR_IMDOM) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_16: (+1)
   \   00000110   0x7B20             LDRB     R0,[R4, #+12]
   \   00000112   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000116   0x7320             STRB     R0,[R4, #+12]
    199          			break;
   \   00000118   0xE00D             B.N      ??RTC_CntIncrIntConfig_12
    200          		case RTC_TIMETYPE_DAYOFYEAR:
    201          			RTCx->CIIR &= (~RTC_CIIR_IMDOY) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_19: (+1)
   \   0000011A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000011C   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000120   0x7320             STRB     R0,[R4, #+12]
    202          			break;
   \   00000122   0xE008             B.N      ??RTC_CntIncrIntConfig_12
    203          		case RTC_TIMETYPE_MONTH:
    204          			RTCx->CIIR &= (~RTC_CIIR_IMMON) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_18: (+1)
   \   00000124   0x7B20             LDRB     R0,[R4, #+12]
   \   00000126   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000012A   0x7320             STRB     R0,[R4, #+12]
    205          			break;
   \   0000012C   0xE003             B.N      ??RTC_CntIncrIntConfig_12
    206          		case RTC_TIMETYPE_YEAR:
    207          			RTCx->CIIR &= (~RTC_CIIR_IMYEAR) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_20: (+1)
   \   0000012E   0x7B20             LDRB     R0,[R4, #+12]
   \   00000130   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000134   0x7320             STRB     R0,[R4, #+12]
    208          			break;
    209          		}
    210          	}
    211          }
   \                     ??RTC_CntIncrIntConfig_12: (+1)
   \   00000136   0xBD70             POP      {R4-R6,PC}       ;; return
    212          
    213          
    214          /*********************************************************************//**
    215           * @brief 		Enable/Disable Alarm interrupt for each time type
    216           * 				in RTC peripheral
    217           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    218           * @param[in]	AlarmTimeType: Alarm Time Interrupt type,
    219           * 				an matching of this type value below with current time
    220           * 				in RTC will generates an interrupt, should be:
    221           * 				- RTC_TIMETYPE_SECOND
    222           * 				- RTC_TIMETYPE_MINUTE
    223           * 				- RTC_TIMETYPE_HOUR
    224           * 				- RTC_TIMETYPE_DAYOFWEEK
    225           * 				- RTC_TIMETYPE_DAYOFMONTH
    226           * 				- RTC_TIMETYPE_DAYOFYEAR
    227           * 				- RTC_TIMETYPE_MONTH
    228           * 				- RTC_TIMETYPE_YEAR
    229           * @param[in]	NewState New State of this function, should be:
    230           * 				- ENABLE: Alarm interrupt for this
    231           * 					time type are enabled
    232           * 				- DISABLE: Alarm interrupt for this
    233           * 					time type are disabled
    234           * @return 		None
    235           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          void RTC_AlarmIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t AlarmTimeType, \
    237          								FunctionalState NewState)
    238          {
   \                     RTC_AlarmIntConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    239          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??RTC_AlarmIntConfig_0
   \   00000010   0x21EF             MOVS     R1,#+239
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    240          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_AlarmIntConfig_0: (+1)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD007             BEQ.N    ??RTC_AlarmIntConfig_1
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E01             CMP      R6,#+1
   \   00000024   0xD004             BEQ.N    ??RTC_AlarmIntConfig_1
   \   00000026   0x21F0             MOVS     R1,#+240
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    241          	CHECK_PARAM(PARAM_RTC_TIMETYPE(AlarmTimeType));
   \                     ??RTC_AlarmIntConfig_1: (+1)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD012             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD010             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000038   0x2D02             CMP      R5,#+2
   \   0000003A   0xD00E             BEQ.N    ??RTC_AlarmIntConfig_2
   \   0000003C   0x2D03             CMP      R5,#+3
   \   0000003E   0xD00C             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000040   0x2D04             CMP      R5,#+4
   \   00000042   0xD00A             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000044   0x2D05             CMP      R5,#+5
   \   00000046   0xD008             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000048   0x2D06             CMP      R5,#+6
   \   0000004A   0xD006             BEQ.N    ??RTC_AlarmIntConfig_2
   \   0000004C   0x2D07             CMP      R5,#+7
   \   0000004E   0xD004             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000050   0x21F1             MOVS     R1,#+241
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000056   0x.... 0x....      BL       check_failed
    242          
    243          	if (NewState == ENABLE)
   \                     ??RTC_AlarmIntConfig_2: (+1)
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E01             CMP      R6,#+1
   \   0000005E   0xD135             BNE.N    ??RTC_AlarmIntConfig_3
    244          	{
    245          		switch (AlarmTimeType)
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD00B             BEQ.N    ??RTC_AlarmIntConfig_4
   \   00000064   0x2D02             CMP      R5,#+2
   \   00000066   0xD013             BEQ.N    ??RTC_AlarmIntConfig_5
   \   00000068   0xD30D             BCC.N    ??RTC_AlarmIntConfig_6
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD01A             BEQ.N    ??RTC_AlarmIntConfig_7
   \   0000006E   0xD314             BCC.N    ??RTC_AlarmIntConfig_8
   \   00000070   0x2D06             CMP      R5,#+6
   \   00000072   0xD021             BEQ.N    ??RTC_AlarmIntConfig_9
   \   00000074   0xD31B             BCC.N    ??RTC_AlarmIntConfig_10
   \   00000076   0x2D07             CMP      R5,#+7
   \   00000078   0xD023             BEQ.N    ??RTC_AlarmIntConfig_11
   \   0000007A   0xE05C             B.N      ??RTC_AlarmIntConfig_12
    246          		{
    247          		case RTC_TIMETYPE_SECOND:
    248          			RTCx->AMR &= (~RTC_AMR_AMRSEC) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_4: (+1)
   \   0000007C   0x7C20             LDRB     R0,[R4, #+16]
   \   0000007E   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000082   0x7420             STRB     R0,[R4, #+16]
    249          			break;
   \   00000084   0xE057             B.N      ??RTC_AlarmIntConfig_12
    250          		case RTC_TIMETYPE_MINUTE:
    251          			RTCx->AMR &= (~RTC_AMR_AMRMIN) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_6: (+1)
   \   00000086   0x7C20             LDRB     R0,[R4, #+16]
   \   00000088   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000008C   0x7420             STRB     R0,[R4, #+16]
    252          			break;
   \   0000008E   0xE052             B.N      ??RTC_AlarmIntConfig_12
    253          		case RTC_TIMETYPE_HOUR:
    254          			RTCx->AMR &= (~RTC_AMR_AMRHOUR) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_5: (+1)
   \   00000090   0x7C20             LDRB     R0,[R4, #+16]
   \   00000092   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000096   0x7420             STRB     R0,[R4, #+16]
    255          			break;
   \   00000098   0xE04D             B.N      ??RTC_AlarmIntConfig_12
    256          		case RTC_TIMETYPE_DAYOFWEEK:
    257          			RTCx->AMR &= (~RTC_AMR_AMRDOW) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_8: (+1)
   \   0000009A   0x7C20             LDRB     R0,[R4, #+16]
   \   0000009C   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000A0   0x7420             STRB     R0,[R4, #+16]
    258          			break;
   \   000000A2   0xE048             B.N      ??RTC_AlarmIntConfig_12
    259          		case RTC_TIMETYPE_DAYOFMONTH:
    260          			RTCx->AMR &= (~RTC_AMR_AMRDOM) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_7: (+1)
   \   000000A4   0x7C20             LDRB     R0,[R4, #+16]
   \   000000A6   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000AA   0x7420             STRB     R0,[R4, #+16]
    261          			break;
   \   000000AC   0xE043             B.N      ??RTC_AlarmIntConfig_12
    262          		case RTC_TIMETYPE_DAYOFYEAR:
    263          			RTCx->AMR &= (~RTC_AMR_AMRDOY) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_10: (+1)
   \   000000AE   0x7C20             LDRB     R0,[R4, #+16]
   \   000000B0   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000000B4   0x7420             STRB     R0,[R4, #+16]
    264          			break;
   \   000000B6   0xE03E             B.N      ??RTC_AlarmIntConfig_12
    265          		case RTC_TIMETYPE_MONTH:
    266          			RTCx->AMR &= (~RTC_AMR_AMRMON) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_9: (+1)
   \   000000B8   0x7C20             LDRB     R0,[R4, #+16]
   \   000000BA   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000000BE   0x7420             STRB     R0,[R4, #+16]
    267          			break;
   \   000000C0   0xE039             B.N      ??RTC_AlarmIntConfig_12
    268          		case RTC_TIMETYPE_YEAR:
    269          			RTCx->AMR &= (~RTC_AMR_AMRYEAR) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_11: (+1)
   \   000000C2   0x7C20             LDRB     R0,[R4, #+16]
   \   000000C4   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000C8   0x7420             STRB     R0,[R4, #+16]
    270          			break;
   \   000000CA   0xE034             B.N      ??RTC_AlarmIntConfig_12
    271          		}
    272          	}
    273          	else
    274          	{
    275          		switch (AlarmTimeType)
   \                     ??RTC_AlarmIntConfig_3: (+1)
   \   000000CC   0x2D00             CMP      R5,#+0
   \   000000CE   0xD00B             BEQ.N    ??RTC_AlarmIntConfig_13
   \   000000D0   0x2D02             CMP      R5,#+2
   \   000000D2   0xD013             BEQ.N    ??RTC_AlarmIntConfig_14
   \   000000D4   0xD30D             BCC.N    ??RTC_AlarmIntConfig_15
   \   000000D6   0x2D04             CMP      R5,#+4
   \   000000D8   0xD01A             BEQ.N    ??RTC_AlarmIntConfig_16
   \   000000DA   0xD314             BCC.N    ??RTC_AlarmIntConfig_17
   \   000000DC   0x2D06             CMP      R5,#+6
   \   000000DE   0xD021             BEQ.N    ??RTC_AlarmIntConfig_18
   \   000000E0   0xD31B             BCC.N    ??RTC_AlarmIntConfig_19
   \   000000E2   0x2D07             CMP      R5,#+7
   \   000000E4   0xD023             BEQ.N    ??RTC_AlarmIntConfig_20
   \   000000E6   0xE026             B.N      ??RTC_AlarmIntConfig_12
    276          		{
    277          		case RTC_TIMETYPE_SECOND:
    278          			RTCx->AMR |= (RTC_AMR_AMRSEC);
   \                     ??RTC_AlarmIntConfig_13: (+1)
   \   000000E8   0x7C20             LDRB     R0,[R4, #+16]
   \   000000EA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000EE   0x7420             STRB     R0,[R4, #+16]
    279          			break;
   \   000000F0   0xE021             B.N      ??RTC_AlarmIntConfig_12
    280          		case RTC_TIMETYPE_MINUTE:
    281          			RTCx->AMR |= (RTC_AMR_AMRMIN);
   \                     ??RTC_AlarmIntConfig_15: (+1)
   \   000000F2   0x7C20             LDRB     R0,[R4, #+16]
   \   000000F4   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000F8   0x7420             STRB     R0,[R4, #+16]
    282          			break;
   \   000000FA   0xE01C             B.N      ??RTC_AlarmIntConfig_12
    283          		case RTC_TIMETYPE_HOUR:
    284          			RTCx->AMR |= (RTC_AMR_AMRHOUR);
   \                     ??RTC_AlarmIntConfig_14: (+1)
   \   000000FC   0x7C20             LDRB     R0,[R4, #+16]
   \   000000FE   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000102   0x7420             STRB     R0,[R4, #+16]
    285          			break;
   \   00000104   0xE017             B.N      ??RTC_AlarmIntConfig_12
    286          		case RTC_TIMETYPE_DAYOFWEEK:
    287          			RTCx->AMR |= (RTC_AMR_AMRDOW);
   \                     ??RTC_AlarmIntConfig_17: (+1)
   \   00000106   0x7C20             LDRB     R0,[R4, #+16]
   \   00000108   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000010C   0x7420             STRB     R0,[R4, #+16]
    288          			break;
   \   0000010E   0xE012             B.N      ??RTC_AlarmIntConfig_12
    289          		case RTC_TIMETYPE_DAYOFMONTH:
    290          			RTCx->AMR |= (RTC_AMR_AMRDOM);
   \                     ??RTC_AlarmIntConfig_16: (+1)
   \   00000110   0x7C20             LDRB     R0,[R4, #+16]
   \   00000112   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000116   0x7420             STRB     R0,[R4, #+16]
    291          			break;
   \   00000118   0xE00D             B.N      ??RTC_AlarmIntConfig_12
    292          		case RTC_TIMETYPE_DAYOFYEAR:
    293          			RTCx->AMR |= (RTC_AMR_AMRDOY);
   \                     ??RTC_AlarmIntConfig_19: (+1)
   \   0000011A   0x7C20             LDRB     R0,[R4, #+16]
   \   0000011C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000120   0x7420             STRB     R0,[R4, #+16]
    294          			break;
   \   00000122   0xE008             B.N      ??RTC_AlarmIntConfig_12
    295          		case RTC_TIMETYPE_MONTH:
    296          			RTCx->AMR |= (RTC_AMR_AMRMON);
   \                     ??RTC_AlarmIntConfig_18: (+1)
   \   00000124   0x7C20             LDRB     R0,[R4, #+16]
   \   00000126   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000012A   0x7420             STRB     R0,[R4, #+16]
    297          			break;
   \   0000012C   0xE003             B.N      ??RTC_AlarmIntConfig_12
    298          		case RTC_TIMETYPE_YEAR:
    299          			RTCx->AMR |= (RTC_AMR_AMRYEAR);
   \                     ??RTC_AlarmIntConfig_20: (+1)
   \   0000012E   0x7C20             LDRB     R0,[R4, #+16]
   \   00000130   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000134   0x7420             STRB     R0,[R4, #+16]
    300          			break;
    301          		}
    302          	}
    303          }
   \                     ??RTC_AlarmIntConfig_12: (+1)
   \   00000136   0xBD70             POP      {R4-R6,PC}       ;; return
    304          
    305          
    306          /*********************************************************************//**
    307           * @brief 		Set current time value for each time type in RTC peripheral
    308           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    309           * @param[in]	Timetype: Time Type, should be:
    310           * 				- RTC_TIMETYPE_SECOND
    311           * 				- RTC_TIMETYPE_MINUTE
    312           * 				- RTC_TIMETYPE_HOUR
    313           * 				- RTC_TIMETYPE_DAYOFWEEK
    314           * 				- RTC_TIMETYPE_DAYOFMONTH
    315           * 				- RTC_TIMETYPE_DAYOFYEAR
    316           * 				- RTC_TIMETYPE_MONTH
    317           * 				- RTC_TIMETYPE_YEAR
    318           * @param[in]	TimeValue Time value to set
    319           * @return 		None
    320           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    321          void RTC_SetTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t TimeValue)
    322          {
   \                     RTC_SetTime: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    323          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??RTC_SetTime_0
   \   00000010   0xF240 0x1143      MOVW     R1,#+323
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    324          	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
   \                     ??RTC_SetTime_0: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD013             BEQ.N    ??RTC_SetTime_1
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD011             BEQ.N    ??RTC_SetTime_1
   \   00000024   0x2D02             CMP      R5,#+2
   \   00000026   0xD00F             BEQ.N    ??RTC_SetTime_1
   \   00000028   0x2D03             CMP      R5,#+3
   \   0000002A   0xD00D             BEQ.N    ??RTC_SetTime_1
   \   0000002C   0x2D04             CMP      R5,#+4
   \   0000002E   0xD00B             BEQ.N    ??RTC_SetTime_1
   \   00000030   0x2D05             CMP      R5,#+5
   \   00000032   0xD009             BEQ.N    ??RTC_SetTime_1
   \   00000034   0x2D06             CMP      R5,#+6
   \   00000036   0xD007             BEQ.N    ??RTC_SetTime_1
   \   00000038   0x2D07             CMP      R5,#+7
   \   0000003A   0xD005             BEQ.N    ??RTC_SetTime_1
   \   0000003C   0xF44F 0x71A2      MOV      R1,#+324
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000044   0x.... 0x....      BL       check_failed
    325          
    326          	switch ( Timetype)
   \                     ??RTC_SetTime_1: (+1)
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD00B             BEQ.N    ??RTC_SetTime_2
   \   0000004C   0x2D02             CMP      R5,#+2
   \   0000004E   0xD023             BEQ.N    ??RTC_SetTime_3
   \   00000050   0xD315             BCC.N    ??RTC_SetTime_4
   \   00000052   0x2D04             CMP      R5,#+4
   \   00000054   0xD03A             BEQ.N    ??RTC_SetTime_5
   \   00000056   0xD32C             BCC.N    ??RTC_SetTime_6
   \   00000058   0x2D06             CMP      R5,#+6
   \   0000005A   0xD056             BEQ.N    ??RTC_SetTime_7
   \   0000005C   0xD345             BCC.N    ??RTC_SetTime_8
   \   0000005E   0x2D07             CMP      R5,#+7
   \   00000060   0xD062             BEQ.N    ??RTC_SetTime_9
   \   00000062   0xE06F             B.N      ??RTC_SetTime_10
    327          	{
    328          	case RTC_TIMETYPE_SECOND:
    329          		CHECK_PARAM(TimeValue < RTC_SECOND_MAX);
   \                     ??RTC_SetTime_2: (+1)
   \   00000064   0x2E3B             CMP      R6,#+59
   \   00000066   0xD305             BCC.N    ??RTC_SetTime_11
   \   00000068   0xF240 0x1149      MOVW     R1,#+329
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000070   0x.... 0x....      BL       check_failed
    330          
    331          		RTCx->SEC = TimeValue & RTC_SEC_MASK;
   \                     ??RTC_SetTime_11: (+1)
   \   00000074   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000078   0xF884 0x0020      STRB     R0,[R4, #+32]
    332          		break;
   \   0000007C   0xE062             B.N      ??RTC_SetTime_10
    333          
    334          	case RTC_TIMETYPE_MINUTE:
    335          		CHECK_PARAM(TimeValue < RTC_MINUTE_MAX);
   \                     ??RTC_SetTime_4: (+1)
   \   0000007E   0x2E3B             CMP      R6,#+59
   \   00000080   0xD305             BCC.N    ??RTC_SetTime_12
   \   00000082   0xF240 0x114F      MOVW     R1,#+335
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000008A   0x.... 0x....      BL       check_failed
    336          
    337          		RTCx->MIN = TimeValue & RTC_MIN_MASK;
   \                     ??RTC_SetTime_12: (+1)
   \   0000008E   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000092   0xF884 0x0024      STRB     R0,[R4, #+36]
    338          		break;
   \   00000096   0xE055             B.N      ??RTC_SetTime_10
    339          
    340          	case RTC_TIMETYPE_HOUR:
    341          		CHECK_PARAM(TimeValue < RTC_HOUR_MAX);
   \                     ??RTC_SetTime_3: (+1)
   \   00000098   0x2E17             CMP      R6,#+23
   \   0000009A   0xD305             BCC.N    ??RTC_SetTime_13
   \   0000009C   0xF240 0x1155      MOVW     R1,#+341
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000A4   0x.... 0x....      BL       check_failed
    342          
    343          		RTCx->HOUR = TimeValue & RTC_HOUR_MASK;
   \                     ??RTC_SetTime_13: (+1)
   \   000000A8   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000AC   0xF884 0x0028      STRB     R0,[R4, #+40]
    344          		break;
   \   000000B0   0xE048             B.N      ??RTC_SetTime_10
    345          
    346          	case RTC_TIMETYPE_DAYOFWEEK:
    347          		CHECK_PARAM(TimeValue < RTC_DAYOFWEEK_MAX);
   \                     ??RTC_SetTime_6: (+1)
   \   000000B2   0x2E06             CMP      R6,#+6
   \   000000B4   0xD305             BCC.N    ??RTC_SetTime_14
   \   000000B6   0xF240 0x115B      MOVW     R1,#+347
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000BE   0x.... 0x....      BL       check_failed
    348          
    349          		RTCx->DOW = TimeValue & RTC_DOW_MASK;
   \                     ??RTC_SetTime_14: (+1)
   \   000000C2   0xF016 0x0007      ANDS     R0,R6,#0x7
   \   000000C6   0xF884 0x0030      STRB     R0,[R4, #+48]
    350          		break;
   \   000000CA   0xE03B             B.N      ??RTC_SetTime_10
    351          
    352          	case RTC_TIMETYPE_DAYOFMONTH:
    353          		CHECK_PARAM((TimeValue < RTC_DAYOFMONTH_MAX) \
    354          				&& (TimeValue > RTC_DAYOFMONTH_MIN));
   \                     ??RTC_SetTime_5: (+1)
   \   000000CC   0x2E1F             CMP      R6,#+31
   \   000000CE   0xD201             BCS.N    ??RTC_SetTime_15
   \   000000D0   0x2E02             CMP      R6,#+2
   \   000000D2   0xD205             BCS.N    ??RTC_SetTime_16
   \                     ??RTC_SetTime_15: (+1)
   \   000000D4   0xF240 0x1161      MOVW     R1,#+353
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000DC   0x.... 0x....      BL       check_failed
    355          
    356          		RTCx->DOM = TimeValue & RTC_DOM_MASK;
   \                     ??RTC_SetTime_16: (+1)
   \   000000E0   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000E4   0xF884 0x002C      STRB     R0,[R4, #+44]
    357          		break;
   \   000000E8   0xE02C             B.N      ??RTC_SetTime_10
    358          
    359          	case RTC_TIMETYPE_DAYOFYEAR:
    360          		CHECK_PARAM((TimeValue > RTC_DAYOFYEAR_MIN) \
    361          				&& (TimeValue < RTC_DAYOFYEAR_MAX));
   \                     ??RTC_SetTime_8: (+1)
   \   000000EA   0x2E02             CMP      R6,#+2
   \   000000EC   0xD302             BCC.N    ??RTC_SetTime_17
   \   000000EE   0xF5B6 0x7FB7      CMP      R6,#+366
   \   000000F2   0xD305             BCC.N    ??RTC_SetTime_18
   \                     ??RTC_SetTime_17: (+1)
   \   000000F4   0xF44F 0x71B4      MOV      R1,#+360
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000FC   0x.... 0x....      BL       check_failed
    362          
    363          		RTCx->DOY = TimeValue & RTC_DOY_MASK;
   \                     ??RTC_SetTime_18: (+1)
   \   00000100   0x0030             MOVS     R0,R6
   \   00000102   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000104   0x0DC0             LSRS     R0,R0,#+23
   \   00000106   0x86A0             STRH     R0,[R4, #+52]
    364          		break;
   \   00000108   0xE01C             B.N      ??RTC_SetTime_10
    365          
    366          	case RTC_TIMETYPE_MONTH:
    367          		CHECK_PARAM((TimeValue > RTC_MONTH_MIN) \
    368          				&& (TimeValue < RTC_MONTH_MAX));
   \                     ??RTC_SetTime_7: (+1)
   \   0000010A   0x2E02             CMP      R6,#+2
   \   0000010C   0xD301             BCC.N    ??RTC_SetTime_19
   \   0000010E   0x2E0C             CMP      R6,#+12
   \   00000110   0xD305             BCC.N    ??RTC_SetTime_20
   \                     ??RTC_SetTime_19: (+1)
   \   00000112   0xF240 0x116F      MOVW     R1,#+367
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000011A   0x.... 0x....      BL       check_failed
    369          
    370          		RTCx->MONTH = TimeValue & RTC_MONTH_MASK;
   \                     ??RTC_SetTime_20: (+1)
   \   0000011E   0xF016 0x000F      ANDS     R0,R6,#0xF
   \   00000122   0xF884 0x0038      STRB     R0,[R4, #+56]
    371          		break;
   \   00000126   0xE00D             B.N      ??RTC_SetTime_10
    372          
    373          	case RTC_TIMETYPE_YEAR:
    374          		CHECK_PARAM(TimeValue < RTC_YEAR_MAX);
   \                     ??RTC_SetTime_9: (+1)
   \   00000128   0xF640 0x70FF      MOVW     R0,#+4095
   \   0000012C   0x4286             CMP      R6,R0
   \   0000012E   0xD305             BCC.N    ??RTC_SetTime_21
   \   00000130   0xF44F 0x71BB      MOV      R1,#+374
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000138   0x.... 0x....      BL       check_failed
    375          
    376          		RTCx->YEAR = TimeValue & RTC_YEAR_MASK;
   \                     ??RTC_SetTime_21: (+1)
   \   0000013C   0x0030             MOVS     R0,R6
   \   0000013E   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000140   0x0D00             LSRS     R0,R0,#+20
   \   00000142   0x87A0             STRH     R0,[R4, #+60]
    377          		break;
    378          	}
    379          }
   \                     ??RTC_SetTime_10: (+1)
   \   00000144   0xBD70             POP      {R4-R6,PC}       ;; return
    380          
    381          /*********************************************************************//**
    382           * @brief 		Get current time value for each type time type
    383           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    384           * @param[in]	Timetype: Time Type, should be:
    385           * 				- RTC_TIMETYPE_SECOND
    386           * 				- RTC_TIMETYPE_MINUTE
    387           * 				- RTC_TIMETYPE_HOUR
    388           * 				- RTC_TIMETYPE_DAYOFWEEK
    389           * 				- RTC_TIMETYPE_DAYOFMONTH
    390           * 				- RTC_TIMETYPE_DAYOFYEAR
    391           * 				- RTC_TIMETYPE_MONTH
    392           * 				- RTC_TIMETYPE_YEAR
    393           * @return 		Value of time according to specified time type
    394           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    395          uint32_t RTC_GetTime(LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
    396          {
   \                     RTC_GetTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    397          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_GetTime_0
   \   0000000E   0xF240 0x118D      MOVW     R1,#+397
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    398          	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
   \                     ??RTC_GetTime_0: (+1)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD013             BEQ.N    ??RTC_GetTime_1
   \   0000001E   0x2C01             CMP      R4,#+1
   \   00000020   0xD011             BEQ.N    ??RTC_GetTime_1
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xD00F             BEQ.N    ??RTC_GetTime_1
   \   00000026   0x2C03             CMP      R4,#+3
   \   00000028   0xD00D             BEQ.N    ??RTC_GetTime_1
   \   0000002A   0x2C04             CMP      R4,#+4
   \   0000002C   0xD00B             BEQ.N    ??RTC_GetTime_1
   \   0000002E   0x2C05             CMP      R4,#+5
   \   00000030   0xD009             BEQ.N    ??RTC_GetTime_1
   \   00000032   0x2C06             CMP      R4,#+6
   \   00000034   0xD007             BEQ.N    ??RTC_GetTime_1
   \   00000036   0x2C07             CMP      R4,#+7
   \   00000038   0xD005             BEQ.N    ??RTC_GetTime_1
   \   0000003A   0xF44F 0x71C7      MOV      R1,#+398
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000042   0x.... 0x....      BL       check_failed
    399          
    400          	switch (Timetype)
   \                     ??RTC_GetTime_1: (+1)
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD00B             BEQ.N    ??RTC_GetTime_2
   \   0000004A   0x2C02             CMP      R4,#+2
   \   0000004C   0xD013             BEQ.N    ??RTC_GetTime_3
   \   0000004E   0xD30D             BCC.N    ??RTC_GetTime_4
   \   00000050   0x2C04             CMP      R4,#+4
   \   00000052   0xD01A             BEQ.N    ??RTC_GetTime_5
   \   00000054   0xD314             BCC.N    ??RTC_GetTime_6
   \   00000056   0x2C06             CMP      R4,#+6
   \   00000058   0xD020             BEQ.N    ??RTC_GetTime_7
   \   0000005A   0xD31B             BCC.N    ??RTC_GetTime_8
   \   0000005C   0x2C07             CMP      R4,#+7
   \   0000005E   0xD022             BEQ.N    ??RTC_GetTime_9
   \   00000060   0xE025             B.N      ??RTC_GetTime_10
    401          	{
    402          	case RTC_TIMETYPE_SECOND:
    403          		return (RTCx->SEC & RTC_SEC_MASK);
   \                     ??RTC_GetTime_2: (+1)
   \   00000062   0xF895 0x0020      LDRB     R0,[R5, #+32]
   \   00000066   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000006A   0xE021             B.N      ??RTC_GetTime_11
    404          		break;
    405          	case RTC_TIMETYPE_MINUTE:
    406          		return (RTCx->MIN & RTC_MIN_MASK);
   \                     ??RTC_GetTime_4: (+1)
   \   0000006C   0xF895 0x0024      LDRB     R0,[R5, #+36]
   \   00000070   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000074   0xE01C             B.N      ??RTC_GetTime_11
    407          		break;
    408          	case RTC_TIMETYPE_HOUR:
    409          		return (RTCx->HOUR & RTC_HOUR_MASK);
   \                     ??RTC_GetTime_3: (+1)
   \   00000076   0xF895 0x0028      LDRB     R0,[R5, #+40]
   \   0000007A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000007E   0xE017             B.N      ??RTC_GetTime_11
    410          		break;
    411          	case RTC_TIMETYPE_DAYOFWEEK:
    412          		return (RTCx->DOW & RTC_DOW_MASK);
   \                     ??RTC_GetTime_6: (+1)
   \   00000080   0xF895 0x0030      LDRB     R0,[R5, #+48]
   \   00000084   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000088   0xE012             B.N      ??RTC_GetTime_11
    413          		break;
    414          	case RTC_TIMETYPE_DAYOFMONTH:
    415          		return (RTCx->DOM & RTC_DOM_MASK);
   \                     ??RTC_GetTime_5: (+1)
   \   0000008A   0xF895 0x002C      LDRB     R0,[R5, #+44]
   \   0000008E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000092   0xE00D             B.N      ??RTC_GetTime_11
    416          		break;
    417          	case RTC_TIMETYPE_DAYOFYEAR:
    418          		return (RTCx->DOY & RTC_DOY_MASK);
   \                     ??RTC_GetTime_8: (+1)
   \   00000094   0x8EA8             LDRH     R0,[R5, #+52]
   \   00000096   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000098   0x0DC0             LSRS     R0,R0,#+23
   \   0000009A   0xE009             B.N      ??RTC_GetTime_11
    419          		break;
    420          	case RTC_TIMETYPE_MONTH:
    421          		return (RTCx->MONTH & RTC_MONTH_MASK);
   \                     ??RTC_GetTime_7: (+1)
   \   0000009C   0xF895 0x0038      LDRB     R0,[R5, #+56]
   \   000000A0   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   000000A4   0xE004             B.N      ??RTC_GetTime_11
    422          		break;
    423          	case RTC_TIMETYPE_YEAR:
    424          		return (RTCx->YEAR & RTC_YEAR_MASK);
   \                     ??RTC_GetTime_9: (+1)
   \   000000A6   0x8FA8             LDRH     R0,[R5, #+60]
   \   000000A8   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000AA   0x0D00             LSRS     R0,R0,#+20
   \   000000AC   0xE000             B.N      ??RTC_GetTime_11
    425          		break;
    426          	default:
    427          		return (0);
   \                     ??RTC_GetTime_10: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetTime_11: (+1)
   \   000000B0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    428          		break;
    429          	}
    430          }
    431          
    432          
    433          /*********************************************************************//**
    434           * @brief 		Set full of time in RTC peripheral
    435           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    436           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    437           * 				contains time value in full.
    438           * @return 		None
    439           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    440          void RTC_SetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    441          {
   \                     RTC_SetFullTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    442          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_SetFullTime_0
   \   0000000E   0xF44F 0x71DD      MOV      R1,#+442
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    443          
    444          	RTCx->DOM = pFullTime->DOM & RTC_DOM_MASK;
   \                     ??RTC_SetFullTime_0: (+1)
   \   0000001A   0x7B28             LDRB     R0,[R5, #+12]
   \   0000001C   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000020   0xF884 0x002C      STRB     R0,[R4, #+44]
    445          	RTCx->DOW = pFullTime->DOW & RTC_DOW_MASK;
   \   00000024   0x7C28             LDRB     R0,[R5, #+16]
   \   00000026   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000002A   0xF884 0x0030      STRB     R0,[R4, #+48]
    446          	RTCx->DOY = pFullTime->DOY & RTC_DOY_MASK;
   \   0000002E   0x6968             LDR      R0,[R5, #+20]
   \   00000030   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000032   0x0DC0             LSRS     R0,R0,#+23
   \   00000034   0x86A0             STRH     R0,[R4, #+52]
    447          	RTCx->HOUR = pFullTime->HOUR & RTC_HOUR_MASK;
   \   00000036   0x7A28             LDRB     R0,[R5, #+8]
   \   00000038   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003C   0xF884 0x0028      STRB     R0,[R4, #+40]
    448          	RTCx->MIN = pFullTime->MIN & RTC_MIN_MASK;
   \   00000040   0x7928             LDRB     R0,[R5, #+4]
   \   00000042   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000046   0xF884 0x0024      STRB     R0,[R4, #+36]
    449          	RTCx->SEC = pFullTime->SEC & RTC_SEC_MASK;
   \   0000004A   0x7828             LDRB     R0,[R5, #+0]
   \   0000004C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000050   0xF884 0x0020      STRB     R0,[R4, #+32]
    450          	RTCx->MONTH = pFullTime->MONTH & RTC_MONTH_MASK;
   \   00000054   0x7E28             LDRB     R0,[R5, #+24]
   \   00000056   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005A   0xF884 0x0038      STRB     R0,[R4, #+56]
    451          	RTCx->YEAR = pFullTime->YEAR & RTC_YEAR_MASK;
   \   0000005E   0x69E8             LDR      R0,[R5, #+28]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x87A0             STRH     R0,[R4, #+60]
    452          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    453          
    454          
    455          /*********************************************************************//**
    456           * @brief 		Get full of time in RTC peripheral
    457           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    458           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    459           * 				will be stored time in full.
    460           * @return 		None
    461           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    462          void RTC_GetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    463          {
   \                     RTC_GetFullTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    464          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_GetFullTime_0
   \   0000000E   0xF44F 0x71E8      MOV      R1,#+464
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    465          
    466          	pFullTime->DOM = RTCx->DOM & RTC_DOM_MASK;
   \                     ??RTC_GetFullTime_0: (+1)
   \   0000001A   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000001E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000022   0x60E8             STR      R0,[R5, #+12]
    467          	pFullTime->DOW = RTCx->DOW & RTC_DOW_MASK;
   \   00000024   0xF894 0x0030      LDRB     R0,[R4, #+48]
   \   00000028   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000002C   0x6128             STR      R0,[R5, #+16]
    468          	pFullTime->DOY = RTCx->DOY & RTC_DOY_MASK;
   \   0000002E   0x8EA0             LDRH     R0,[R4, #+52]
   \   00000030   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000032   0x0DC0             LSRS     R0,R0,#+23
   \   00000034   0x6168             STR      R0,[R5, #+20]
    469          	pFullTime->HOUR = RTCx->HOUR & RTC_HOUR_MASK;
   \   00000036   0xF894 0x0028      LDRB     R0,[R4, #+40]
   \   0000003A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003E   0x60A8             STR      R0,[R5, #+8]
    470          	pFullTime->MIN = RTCx->MIN & RTC_MIN_MASK;
   \   00000040   0xF894 0x0024      LDRB     R0,[R4, #+36]
   \   00000044   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000048   0x6068             STR      R0,[R5, #+4]
    471          	pFullTime->SEC = RTCx->SEC & RTC_SEC_MASK;
   \   0000004A   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   0000004E   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000052   0x6028             STR      R0,[R5, #+0]
    472          	pFullTime->MONTH = RTCx->MONTH & RTC_MONTH_MASK;
   \   00000054   0xF894 0x0038      LDRB     R0,[R4, #+56]
   \   00000058   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005C   0x61A8             STR      R0,[R5, #+24]
    473          	pFullTime->YEAR = RTCx->YEAR & RTC_YEAR_MASK;
   \   0000005E   0x8FA0             LDRH     R0,[R4, #+60]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x61E8             STR      R0,[R5, #+28]
    474          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    475          
    476          
    477          /*********************************************************************//**
    478           * @brief 		Set alarm time value for each time type
    479           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    480           * @param[in]	Timetype: Time Type, should be:
    481           * 				- RTC_TIMETYPE_SECOND
    482           * 				- RTC_TIMETYPE_MINUTE
    483           * 				- RTC_TIMETYPE_HOUR
    484           * 				- RTC_TIMETYPE_DAYOFWEEK
    485           * 				- RTC_TIMETYPE_DAYOFMONTH
    486           * 				- RTC_TIMETYPE_DAYOFYEAR
    487           * 				- RTC_TIMETYPE_MONTH
    488           * 				- RTC_TIMETYPE_YEAR
    489           * @param[in]	ALValue Alarm time value to set
    490           * @return 		None
    491           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    492          void RTC_SetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t ALValue)
    493          {
   \                     RTC_SetAlarmTime: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    494          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??RTC_SetAlarmTime_0
   \   00000010   0xF44F 0x71F7      MOV      R1,#+494
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    495          
    496          	switch (Timetype)
   \                     ??RTC_SetAlarmTime_0: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD00B             BEQ.N    ??RTC_SetAlarmTime_1
   \   00000020   0x2D02             CMP      R5,#+2
   \   00000022   0xD023             BEQ.N    ??RTC_SetAlarmTime_2
   \   00000024   0xD315             BCC.N    ??RTC_SetAlarmTime_3
   \   00000026   0x2D04             CMP      R5,#+4
   \   00000028   0xD039             BEQ.N    ??RTC_SetAlarmTime_4
   \   0000002A   0xD32C             BCC.N    ??RTC_SetAlarmTime_5
   \   0000002C   0x2D06             CMP      R5,#+6
   \   0000002E   0xD054             BEQ.N    ??RTC_SetAlarmTime_6
   \   00000030   0xD343             BCC.N    ??RTC_SetAlarmTime_7
   \   00000032   0x2D07             CMP      R5,#+7
   \   00000034   0xD05F             BEQ.N    ??RTC_SetAlarmTime_8
   \   00000036   0xE06C             B.N      ??RTC_SetAlarmTime_9
    497          	{
    498          	case RTC_TIMETYPE_SECOND:
    499          		CHECK_PARAM(ALValue < RTC_SECOND_MAX);
   \                     ??RTC_SetAlarmTime_1: (+1)
   \   00000038   0x2E3B             CMP      R6,#+59
   \   0000003A   0xD305             BCC.N    ??RTC_SetAlarmTime_10
   \   0000003C   0xF240 0x11F3      MOVW     R1,#+499
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000044   0x.... 0x....      BL       check_failed
    500          
    501          		RTCx->ALSEC = ALValue & RTC_SEC_MASK;
   \                     ??RTC_SetAlarmTime_10: (+1)
   \   00000048   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   0000004C   0xF884 0x0060      STRB     R0,[R4, #+96]
    502          		break;
   \   00000050   0xE05F             B.N      ??RTC_SetAlarmTime_9
    503          
    504          	case RTC_TIMETYPE_MINUTE:
    505          		CHECK_PARAM(ALValue < RTC_MINUTE_MAX);
   \                     ??RTC_SetAlarmTime_3: (+1)
   \   00000052   0x2E3B             CMP      R6,#+59
   \   00000054   0xD305             BCC.N    ??RTC_SetAlarmTime_11
   \   00000056   0xF240 0x11F9      MOVW     R1,#+505
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000005E   0x.... 0x....      BL       check_failed
    506          
    507          		RTCx->ALMIN = ALValue & RTC_MIN_MASK;
   \                     ??RTC_SetAlarmTime_11: (+1)
   \   00000062   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000066   0xF884 0x0064      STRB     R0,[R4, #+100]
    508          		break;
   \   0000006A   0xE052             B.N      ??RTC_SetAlarmTime_9
    509          
    510          	case RTC_TIMETYPE_HOUR:
    511          		CHECK_PARAM(ALValue < RTC_HOUR_MAX);
   \                     ??RTC_SetAlarmTime_2: (+1)
   \   0000006C   0x2E17             CMP      R6,#+23
   \   0000006E   0xD305             BCC.N    ??RTC_SetAlarmTime_12
   \   00000070   0xF240 0x11FF      MOVW     R1,#+511
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000078   0x.... 0x....      BL       check_failed
    512          
    513          		RTCx->ALHOUR = ALValue & RTC_HOUR_MASK;
   \                     ??RTC_SetAlarmTime_12: (+1)
   \   0000007C   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   00000080   0xF884 0x0068      STRB     R0,[R4, #+104]
    514          		break;
   \   00000084   0xE045             B.N      ??RTC_SetAlarmTime_9
    515          
    516          	case RTC_TIMETYPE_DAYOFWEEK:
    517          		CHECK_PARAM(ALValue < RTC_DAYOFWEEK_MAX);
   \                     ??RTC_SetAlarmTime_5: (+1)
   \   00000086   0x2E06             CMP      R6,#+6
   \   00000088   0xD304             BCC.N    ??RTC_SetAlarmTime_13
   \   0000008A   0xF240 0x2105      MOVW     R1,#+517
   \   0000008E   0x....             LDR.N    R0,??DataTable18_1
   \   00000090   0x.... 0x....      BL       check_failed
    518          
    519          		RTCx->ALDOW = ALValue & RTC_DOW_MASK;
   \                     ??RTC_SetAlarmTime_13: (+1)
   \   00000094   0xF016 0x0007      ANDS     R0,R6,#0x7
   \   00000098   0xF884 0x0070      STRB     R0,[R4, #+112]
    520          		break;
   \   0000009C   0xE039             B.N      ??RTC_SetAlarmTime_9
    521          
    522          	case RTC_TIMETYPE_DAYOFMONTH:
    523          		CHECK_PARAM((ALValue < RTC_DAYOFMONTH_MAX) \
    524          				&& (ALValue > RTC_DAYOFMONTH_MIN));
   \                     ??RTC_SetAlarmTime_4: (+1)
   \   0000009E   0x2E1F             CMP      R6,#+31
   \   000000A0   0xD201             BCS.N    ??RTC_SetAlarmTime_14
   \   000000A2   0x2E02             CMP      R6,#+2
   \   000000A4   0xD204             BCS.N    ??RTC_SetAlarmTime_15
   \                     ??RTC_SetAlarmTime_14: (+1)
   \   000000A6   0xF240 0x210B      MOVW     R1,#+523
   \   000000AA   0x....             LDR.N    R0,??DataTable18_1
   \   000000AC   0x.... 0x....      BL       check_failed
    525          
    526          		RTCx->ALDOM = ALValue & RTC_DOM_MASK;
   \                     ??RTC_SetAlarmTime_15: (+1)
   \   000000B0   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000B4   0xF884 0x006C      STRB     R0,[R4, #+108]
    527          		break;
   \   000000B8   0xE02B             B.N      ??RTC_SetAlarmTime_9
    528          
    529          	case RTC_TIMETYPE_DAYOFYEAR:
    530          		CHECK_PARAM((ALValue > RTC_DAYOFYEAR_MIN) \
    531          				&& (ALValue < RTC_DAYOFYEAR_MAX));
   \                     ??RTC_SetAlarmTime_7: (+1)
   \   000000BA   0x2E02             CMP      R6,#+2
   \   000000BC   0xD302             BCC.N    ??RTC_SetAlarmTime_16
   \   000000BE   0xF5B6 0x7FB7      CMP      R6,#+366
   \   000000C2   0xD304             BCC.N    ??RTC_SetAlarmTime_17
   \                     ??RTC_SetAlarmTime_16: (+1)
   \   000000C4   0xF240 0x2112      MOVW     R1,#+530
   \   000000C8   0x....             LDR.N    R0,??DataTable18_1
   \   000000CA   0x.... 0x....      BL       check_failed
    532          
    533          		RTCx->ALDOY = ALValue & RTC_DOY_MASK;
   \                     ??RTC_SetAlarmTime_17: (+1)
   \   000000CE   0x0030             MOVS     R0,R6
   \   000000D0   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   000000D2   0x0DC0             LSRS     R0,R0,#+23
   \   000000D4   0xF8A4 0x0074      STRH     R0,[R4, #+116]
    534          		break;
   \   000000D8   0xE01B             B.N      ??RTC_SetAlarmTime_9
    535          
    536          	case RTC_TIMETYPE_MONTH:
    537          		CHECK_PARAM((ALValue > RTC_MONTH_MIN) \
    538          				&& (ALValue < RTC_MONTH_MAX));
   \                     ??RTC_SetAlarmTime_6: (+1)
   \   000000DA   0x2E02             CMP      R6,#+2
   \   000000DC   0xD301             BCC.N    ??RTC_SetAlarmTime_18
   \   000000DE   0x2E0C             CMP      R6,#+12
   \   000000E0   0xD304             BCC.N    ??RTC_SetAlarmTime_19
   \                     ??RTC_SetAlarmTime_18: (+1)
   \   000000E2   0xF240 0x2119      MOVW     R1,#+537
   \   000000E6   0x....             LDR.N    R0,??DataTable18_1
   \   000000E8   0x.... 0x....      BL       check_failed
    539          
    540          		RTCx->ALMON = ALValue & RTC_MONTH_MASK;
   \                     ??RTC_SetAlarmTime_19: (+1)
   \   000000EC   0xF016 0x000F      ANDS     R0,R6,#0xF
   \   000000F0   0xF884 0x0078      STRB     R0,[R4, #+120]
    541          		break;
   \   000000F4   0xE00D             B.N      ??RTC_SetAlarmTime_9
    542          
    543          	case RTC_TIMETYPE_YEAR:
    544          		CHECK_PARAM(ALValue < RTC_YEAR_MAX);
   \                     ??RTC_SetAlarmTime_8: (+1)
   \   000000F6   0xF640 0x70FF      MOVW     R0,#+4095
   \   000000FA   0x4286             CMP      R6,R0
   \   000000FC   0xD304             BCC.N    ??RTC_SetAlarmTime_20
   \   000000FE   0xF44F 0x7108      MOV      R1,#+544
   \   00000102   0x....             LDR.N    R0,??DataTable18_1
   \   00000104   0x.... 0x....      BL       check_failed
    545          
    546          		RTCx->ALYEAR = ALValue & RTC_YEAR_MASK;
   \                     ??RTC_SetAlarmTime_20: (+1)
   \   00000108   0x0030             MOVS     R0,R6
   \   0000010A   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000010C   0x0D00             LSRS     R0,R0,#+20
   \   0000010E   0xF8A4 0x007C      STRH     R0,[R4, #+124]
    547          		break;
    548          	}
    549          }
   \                     ??RTC_SetAlarmTime_9: (+1)
   \   00000112   0xBD70             POP      {R4-R6,PC}       ;; return
    550          
    551          
    552          
    553          /*********************************************************************//**
    554           * @brief 		Get alarm time value for each time type
    555           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    556           * @param[in]	Timetype: Time Type, should be:
    557           * 				- RTC_TIMETYPE_SECOND
    558           * 				- RTC_TIMETYPE_MINUTE
    559           * 				- RTC_TIMETYPE_HOUR
    560           * 				- RTC_TIMETYPE_DAYOFWEEK
    561           * 				- RTC_TIMETYPE_DAYOFMONTH
    562           * 				- RTC_TIMETYPE_DAYOFYEAR
    563           * 				- RTC_TIMETYPE_MONTH
    564           * 				- RTC_TIMETYPE_YEAR
    565            * @return 	Value of Alarm time according to specified time type
    566           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    567          uint32_t RTC_GetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
    568          {
   \                     RTC_GetAlarmTime: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    569          	switch (Timetype)
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD00B             BEQ.N    ??RTC_GetAlarmTime_0
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD013             BEQ.N    ??RTC_GetAlarmTime_1
   \   0000000A   0xD30D             BCC.N    ??RTC_GetAlarmTime_2
   \   0000000C   0x2904             CMP      R1,#+4
   \   0000000E   0xD01A             BEQ.N    ??RTC_GetAlarmTime_3
   \   00000010   0xD314             BCC.N    ??RTC_GetAlarmTime_4
   \   00000012   0x2906             CMP      R1,#+6
   \   00000014   0xD021             BEQ.N    ??RTC_GetAlarmTime_5
   \   00000016   0xD31B             BCC.N    ??RTC_GetAlarmTime_6
   \   00000018   0x2907             CMP      R1,#+7
   \   0000001A   0xD023             BEQ.N    ??RTC_GetAlarmTime_7
   \   0000001C   0xE027             B.N      ??RTC_GetAlarmTime_8
    570          	{
    571          	case RTC_TIMETYPE_SECOND:
    572          		return (RTCx->ALSEC & RTC_SEC_MASK);
   \                     ??RTC_GetAlarmTime_0: (+1)
   \   0000001E   0xF892 0x0060      LDRB     R0,[R2, #+96]
   \   00000022   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000026   0xE023             B.N      ??RTC_GetAlarmTime_9
    573          		break;
    574          	case RTC_TIMETYPE_MINUTE:
    575          		return (RTCx->ALMIN & RTC_MIN_MASK);
   \                     ??RTC_GetAlarmTime_2: (+1)
   \   00000028   0xF892 0x0064      LDRB     R0,[R2, #+100]
   \   0000002C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000030   0xE01E             B.N      ??RTC_GetAlarmTime_9
    576          		break;
    577          	case RTC_TIMETYPE_HOUR:
    578          		return (RTCx->ALHOUR & RTC_HOUR_MASK);
   \                     ??RTC_GetAlarmTime_1: (+1)
   \   00000032   0xF892 0x0068      LDRB     R0,[R2, #+104]
   \   00000036   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003A   0xE019             B.N      ??RTC_GetAlarmTime_9
    579          		break;
    580          	case RTC_TIMETYPE_DAYOFWEEK:
    581          		return (RTCx->ALDOW & RTC_DOW_MASK);
   \                     ??RTC_GetAlarmTime_4: (+1)
   \   0000003C   0xF892 0x0070      LDRB     R0,[R2, #+112]
   \   00000040   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000044   0xE014             B.N      ??RTC_GetAlarmTime_9
    582          		break;
    583          	case RTC_TIMETYPE_DAYOFMONTH:
    584          		return (RTCx->ALDOM & RTC_DOM_MASK);
   \                     ??RTC_GetAlarmTime_3: (+1)
   \   00000046   0xF892 0x006C      LDRB     R0,[R2, #+108]
   \   0000004A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000004E   0xE00F             B.N      ??RTC_GetAlarmTime_9
    585          		break;
    586          	case RTC_TIMETYPE_DAYOFYEAR:
    587          		return (RTCx->ALDOY & RTC_DOY_MASK);
   \                     ??RTC_GetAlarmTime_6: (+1)
   \   00000050   0xF8B2 0x0074      LDRH     R0,[R2, #+116]
   \   00000054   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000056   0x0DC0             LSRS     R0,R0,#+23
   \   00000058   0xE00A             B.N      ??RTC_GetAlarmTime_9
    588          		break;
    589          	case RTC_TIMETYPE_MONTH:
    590          		return (RTCx->ALMON & RTC_MONTH_MASK);
   \                     ??RTC_GetAlarmTime_5: (+1)
   \   0000005A   0xF892 0x0078      LDRB     R0,[R2, #+120]
   \   0000005E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000062   0xE005             B.N      ??RTC_GetAlarmTime_9
    591          		break;
    592          	case RTC_TIMETYPE_YEAR:
    593          		return (RTCx->ALYEAR & RTC_YEAR_MASK);
   \                     ??RTC_GetAlarmTime_7: (+1)
   \   00000064   0xF8B2 0x007C      LDRH     R0,[R2, #+124]
   \   00000068   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000006A   0x0D00             LSRS     R0,R0,#+20
   \   0000006C   0xE000             B.N      ??RTC_GetAlarmTime_9
    594          		break;
    595          	default:
    596          		return (0);
   \                     ??RTC_GetAlarmTime_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetAlarmTime_9: (+1)
   \   00000070   0x4770             BX       LR               ;; return
    597          		break;
    598          	}
    599          }
    600          
    601          
    602          /*********************************************************************//**
    603           * @brief 		Set full of alarm time in RTC peripheral
    604           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    605           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    606           * 				contains alarm time value in full.
    607           * @return 		None
    608           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    609          void RTC_SetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    610          {
   \                     RTC_SetFullAlarmTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    611          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_SetFullAlarmTime_0
   \   0000000C   0xF240 0x2163      MOVW     R1,#+611
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    612          
    613          	RTCx->ALDOM = pFullTime->DOM & RTC_DOM_MASK;
   \                     ??RTC_SetFullAlarmTime_0: (+1)
   \   00000016   0x7B28             LDRB     R0,[R5, #+12]
   \   00000018   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000001C   0xF884 0x006C      STRB     R0,[R4, #+108]
    614          	RTCx->ALDOW = pFullTime->DOW & RTC_DOW_MASK;
   \   00000020   0x7C28             LDRB     R0,[R5, #+16]
   \   00000022   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000026   0xF884 0x0070      STRB     R0,[R4, #+112]
    615          	RTCx->ALDOY = pFullTime->DOY & RTC_DOY_MASK;
   \   0000002A   0x6968             LDR      R0,[R5, #+20]
   \   0000002C   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   0000002E   0x0DC0             LSRS     R0,R0,#+23
   \   00000030   0xF8A4 0x0074      STRH     R0,[R4, #+116]
    616          	RTCx->ALHOUR = pFullTime->HOUR & RTC_HOUR_MASK;
   \   00000034   0x7A28             LDRB     R0,[R5, #+8]
   \   00000036   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003A   0xF884 0x0068      STRB     R0,[R4, #+104]
    617          	RTCx->ALMIN = pFullTime->MIN & RTC_MIN_MASK;
   \   0000003E   0x7928             LDRB     R0,[R5, #+4]
   \   00000040   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000044   0xF884 0x0064      STRB     R0,[R4, #+100]
    618          	RTCx->ALSEC = pFullTime->SEC & RTC_SEC_MASK;
   \   00000048   0x7828             LDRB     R0,[R5, #+0]
   \   0000004A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000004E   0xF884 0x0060      STRB     R0,[R4, #+96]
    619          	RTCx->ALMON = pFullTime->MONTH & RTC_MONTH_MASK;
   \   00000052   0x7E28             LDRB     R0,[R5, #+24]
   \   00000054   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000058   0xF884 0x0078      STRB     R0,[R4, #+120]
    620          	RTCx->ALYEAR = pFullTime->YEAR & RTC_YEAR_MASK;
   \   0000005C   0x69E8             LDR      R0,[R5, #+28]
   \   0000005E   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000060   0x0D00             LSRS     R0,R0,#+20
   \   00000062   0xF8A4 0x007C      STRH     R0,[R4, #+124]
    621          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    622          
    623          
    624          /*********************************************************************//**
    625           * @brief 		Get full of alarm time in RTC peripheral
    626           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    627           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    628           * 				will be stored alarm time in full.
    629           * @return 		None
    630           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    631          void RTC_GetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    632          {
   \                     RTC_GetFullAlarmTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    633          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_GetFullAlarmTime_0
   \   0000000C   0xF240 0x2179      MOVW     R1,#+633
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    634          
    635          	pFullTime->DOM = RTCx->ALDOM & RTC_DOM_MASK;
   \                     ??RTC_GetFullAlarmTime_0: (+1)
   \   00000016   0xF894 0x006C      LDRB     R0,[R4, #+108]
   \   0000001A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000001E   0x60E8             STR      R0,[R5, #+12]
    636          	pFullTime->DOW = RTCx->ALDOW & RTC_DOW_MASK;
   \   00000020   0xF894 0x0070      LDRB     R0,[R4, #+112]
   \   00000024   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000028   0x6128             STR      R0,[R5, #+16]
    637          	pFullTime->DOY = RTCx->ALDOY & RTC_DOY_MASK;
   \   0000002A   0xF8B4 0x0074      LDRH     R0,[R4, #+116]
   \   0000002E   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000030   0x0DC0             LSRS     R0,R0,#+23
   \   00000032   0x6168             STR      R0,[R5, #+20]
    638          	pFullTime->HOUR = RTCx->ALHOUR & RTC_HOUR_MASK;
   \   00000034   0xF894 0x0068      LDRB     R0,[R4, #+104]
   \   00000038   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003C   0x60A8             STR      R0,[R5, #+8]
    639          	pFullTime->MIN = RTCx->ALMIN & RTC_MIN_MASK;
   \   0000003E   0xF894 0x0064      LDRB     R0,[R4, #+100]
   \   00000042   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000046   0x6068             STR      R0,[R5, #+4]
    640          	pFullTime->SEC = RTCx->ALSEC & RTC_SEC_MASK;
   \   00000048   0xF894 0x0060      LDRB     R0,[R4, #+96]
   \   0000004C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000050   0x6028             STR      R0,[R5, #+0]
    641          	pFullTime->MONTH = RTCx->ALMON & RTC_MONTH_MASK;
   \   00000052   0xF894 0x0078      LDRB     R0,[R4, #+120]
   \   00000056   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005A   0x61A8             STR      R0,[R5, #+24]
    642          	pFullTime->YEAR = RTCx->ALYEAR & RTC_YEAR_MASK;
   \   0000005C   0xF8B4 0x007C      LDRH     R0,[R4, #+124]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x61E8             STR      R0,[R5, #+28]
    643          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    644          
    645          
    646          /*********************************************************************//**
    647           * @brief 		Check whether if specified Location interrupt in
    648           * 				RTC peripheral is set or not
    649           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    650           * @param[in]	IntType Interrupt location type, should be:
    651           * 						- RTC_INT_COUNTER_INCREASE: Counter Increment Interrupt
    652           * 							block generated an interrupt.
    653           * 						- RTC_INT_ALARM: Alarm generated an
    654           * 							interrupt.
    655           * @return 		New state of specified Location interrupt in RTC peripheral
    656           * 				(SET or RESET)
    657           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    658          IntStatus RTC_GetIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
    659          {
   \                     RTC_GetIntPending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    660          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_GetIntPending_0
   \   0000000C   0xF44F 0x7125      MOV      R1,#+660
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    661          	CHECK_PARAM(PARAM_RTC_INT(IntType));
   \                     ??RTC_GetIntPending_0: (+1)
   \   00000016   0x2D01             CMP      R5,#+1
   \   00000018   0xD006             BEQ.N    ??RTC_GetIntPending_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD004             BEQ.N    ??RTC_GetIntPending_1
   \   0000001E   0xF240 0x2195      MOVW     R1,#+661
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    662          
    663          	return ((RTCx->ILR & IntType) ? SET : RESET);
   \                     ??RTC_GetIntPending_1: (+1)
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x4228             TST      R0,R5
   \   0000002C   0xD001             BEQ.N    ??RTC_GetIntPending_2
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??RTC_GetIntPending_3
   \                     ??RTC_GetIntPending_2: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetIntPending_3: (+1)
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    664          }
    665          
    666          
    667          /*********************************************************************//**
    668           * @brief 		Clear specified Location interrupt pending in
    669           * 				RTC peripheral
    670           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    671           * @param[in]	IntType Interrupt location type, should be:
    672           * 						- RTC_INT_COUNTER_INCREASE: Clear Counter Increment
    673           * 						Interrupt pending.
    674           * 						- RTC_INT_ALARM: Clear alarm interrupt pending
    675           * @return 		None
    676           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    677          void RTC_ClearIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
    678          {
   \                     RTC_ClearIntPending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    679          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ClearIntPending_0
   \   0000000C   0xF240 0x21A7      MOVW     R1,#+679
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    680          	CHECK_PARAM(PARAM_RTC_INT(IntType));
   \                     ??RTC_ClearIntPending_0: (+1)
   \   00000016   0x2D01             CMP      R5,#+1
   \   00000018   0xD006             BEQ.N    ??RTC_ClearIntPending_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD004             BEQ.N    ??RTC_ClearIntPending_1
   \   0000001E   0xF44F 0x712A      MOV      R1,#+680
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    681          
    682          	RTCx->ILR = IntType;
   \                     ??RTC_ClearIntPending_1: (+1)
   \   00000028   0x7025             STRB     R5,[R4, #+0]
    683          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    684          
    685          /*********************************************************************//**
    686           * @brief 		Enable/Disable calibration counter in RTC peripheral
    687           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    688           * @param[in]	NewState New State of this function, should be:
    689           * 				- ENABLE: The calibration counter is enabled and counting
    690           * 				- DISABLE: The calibration counter is disabled and reset to zero
    691           * @return 		None
    692           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    693          void RTC_CalibCounterCmd(LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
    694          {
   \                     RTC_CalibCounterCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    695          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_CalibCounterCmd_0
   \   0000000C   0xF240 0x21B7      MOVW     R1,#+695
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    696          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_CalibCounterCmd_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD007             BEQ.N    ??RTC_CalibCounterCmd_1
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D01             CMP      R5,#+1
   \   00000020   0xD004             BEQ.N    ??RTC_CalibCounterCmd_1
   \   00000022   0xF44F 0x712E      MOV      R1,#+696
   \   00000026   0x....             LDR.N    R0,??DataTable18_1
   \   00000028   0x.... 0x....      BL       check_failed
    697          
    698          	if (NewState == ENABLE)
   \                     ??RTC_CalibCounterCmd_1: (+1)
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD104             BNE.N    ??RTC_CalibCounterCmd_2
    699          	{
    700          		RTCx->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
   \   00000032   0x7A20             LDRB     R0,[R4, #+8]
   \   00000034   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000038   0x7220             STRB     R0,[R4, #+8]
   \   0000003A   0xE003             B.N      ??RTC_CalibCounterCmd_3
    701          	}
    702          	else
    703          	{
    704          		RTCx->CCR |= RTC_CCR_CCALEN;
   \                     ??RTC_CalibCounterCmd_2: (+1)
   \   0000003C   0x7A20             LDRB     R0,[R4, #+8]
   \   0000003E   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000042   0x7220             STRB     R0,[R4, #+8]
    705          	}
    706          }
   \                     ??RTC_CalibCounterCmd_3: (+1)
   \   00000044   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    707          
    708          
    709          /*********************************************************************//**
    710           * @brief 		Configures Calibration in RTC peripheral
    711           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    712           * @param[in]	CalibValue Calibration value, should be in range from
    713           * 					0 to 131,072
    714           * @param[in]	CalibDir Calibration Direction, should be:
    715           * 					- RTC_CALIB_DIR_FORWARD: Forward calibration
    716           * 					- RTC_CALIB_DIR_BACKWARD: Backward calibration
    717           * @return 		None
    718           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    719          void RTC_CalibConfig(LPC_RTC_TypeDef *RTCx, uint32_t CalibValue, uint8_t CalibDir)
    720          {
   \                     RTC_CalibConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    721          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_CalibConfig_0
   \   0000000E   0xF240 0x21D1      MOVW     R1,#+721
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    722          	CHECK_PARAM(PARAM_RTC_CALIB_DIR(CalibDir));
   \                     ??RTC_CalibConfig_0: (+1)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD007             BEQ.N    ??RTC_CalibConfig_1
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0x2E01             CMP      R6,#+1
   \   00000022   0xD004             BEQ.N    ??RTC_CalibConfig_1
   \   00000024   0xF240 0x21D2      MOVW     R1,#+722
   \   00000028   0x....             LDR.N    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    723          	CHECK_PARAM(CalibValue > RTC_CALIBRATION_MAX);
   \                     ??RTC_CalibConfig_1: (+1)
   \   0000002E   0xF5B5 0x3F00      CMP      R5,#+131072
   \   00000032   0xD804             BHI.N    ??RTC_CalibConfig_2
   \   00000034   0xF240 0x21D3      MOVW     R1,#+723
   \   00000038   0x....             LDR.N    R0,??DataTable18_1
   \   0000003A   0x.... 0x....      BL       check_failed
    724          
    725          	RTCx->CALIBRATION = ((CalibValue - 1) & RTC_CALIBRATION_CALVAL_MASK) \
    726          			| ((CalibDir == RTC_CALIB_DIR_BACKWARD) ? RTC_CALIBRATION_LIBDIR : 0);
   \                     ??RTC_CalibConfig_2: (+1)
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0x2E01             CMP      R6,#+1
   \   00000042   0xD102             BNE.N    ??RTC_CalibConfig_3
   \   00000044   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000048   0xE000             B.N      ??RTC_CalibConfig_4
   \                     ??RTC_CalibConfig_3: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \                     ??RTC_CalibConfig_4: (+1)
   \   0000004C   0x1E69             SUBS     R1,R5,#+1
   \   0000004E   0x03C9             LSLS     R1,R1,#+15       ;; ZeroExtS R1,R1,#+15,#+15
   \   00000050   0x0BC9             LSRS     R1,R1,#+15
   \   00000052   0x4308             ORRS     R0,R0,R1
   \   00000054   0x6420             STR      R0,[R4, #+64]
    727          }
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    728          
    729          
    730          /*********************************************************************//**
    731           * @brief 		Write value to General purpose registers
    732           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    733           * @param[in]	Channel General purpose registers Channel number,
    734           * 				should be in range from 0 to 4.
    735           * @param[in]	Value Value to write
    736           * @return 		None
    737           * Note: These General purpose registers can be used to store important
    738           * information when the main power supply is off. The value in these
    739           * registers is not affected by chip reset.
    740           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    741          void RTC_WriteGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel, uint32_t Value)
    742          {
   \                     RTC_WriteGPREG: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    743          	uint32_t *preg;
    744          
    745          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_WriteGPREG_0
   \   0000000E   0xF240 0x21E9      MOVW     R1,#+745
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    746          	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
   \                     ??RTC_WriteGPREG_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D05             CMP      R5,#+5
   \   0000001C   0xDB04             BLT.N    ??RTC_WriteGPREG_1
   \   0000001E   0xF240 0x21EA      MOVW     R1,#+746
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    747          
    748          	preg = (uint32_t *)&RTCx->GPREG0;
   \                     ??RTC_WriteGPREG_1: (+1)
   \   00000028   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000002C   0x0007             MOVS     R7,R0
    749          	preg += Channel;
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0xEB07 0x0785      ADD      R7,R7,R5, LSL #+2
    750          	*preg = Value;
   \   00000034   0x603E             STR      R6,[R7, #+0]
    751          }
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    752          
    753          
    754          /*********************************************************************//**
    755           * @brief 		Read value from General purpose registers
    756           * @param[in]	RTCx	RTC peripheral selected, should be RTC
    757           * @param[in]	Channel General purpose registers Channel number,
    758           * 				should be in range from 0 to 4.
    759           * @return 		Read Value
    760           * Note: These General purpose registers can be used to store important
    761           * information when the main power supply is off. The value in these
    762           * registers is not affected by chip reset.
    763           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    764          uint32_t RTC_ReadGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel)
    765          {
   \                     RTC_ReadGPREG: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    766          	uint32_t *preg;
    767          	uint32_t value;
    768          
    769          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ReadGPREG_0
   \   0000000C   0xF240 0x3101      MOVW     R1,#+769
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    770          	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
   \                     ??RTC_ReadGPREG_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D05             CMP      R5,#+5
   \   0000001A   0xDB04             BLT.N    ??RTC_ReadGPREG_1
   \   0000001C   0xF240 0x3102      MOVW     R1,#+770
   \   00000020   0x....             LDR.N    R0,??DataTable18_1
   \   00000022   0x.... 0x....      BL       check_failed
    771          
    772          	preg = (uint32_t *)&RTCx->GPREG0;
   \                     ??RTC_ReadGPREG_1: (+1)
   \   00000026   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000002A   0x0006             MOVS     R6,R0
    773          	preg += Channel;
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0xEB06 0x0685      ADD      R6,R6,R5, LSL #+2
    774          	value = *preg;
   \   00000032   0x6830             LDR      R0,[R6, #+0]
   \   00000034   0x0007             MOVS     R7,R0
    775          	return (value);
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    776          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40024000         DC32     0x40024000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 0D0H, 0C2H, 0CFH, 0EEH, 0C4H
   \              0x5C 0xD0    
   \              0xC2 0xCF    
   \              0xEE 0xC4    
   \   00000008   0xBF 0x5C          DC8 0BFH, 5CH, 0D2H, 0C6H, 0BDH, 0BBH, 0D7H, 0CAH
   \              0xD2 0xC6    
   \              0xBD 0xBB    
   \              0xD7 0xCA    
   \   00000010   0xC1 0xCF          DC8 0C1H, 0CFH, 4CH, 48H, 54H, 5CH, 0D7H, 0D4H
   \              0x4C 0x48    
   \              0x54 0x5C    
   \              0xD7 0xD4    
   \   00000018   0xD6 0xFA          DC8 0D6H, 0FAH, 0BDH, 0C9H, 0B7H, 0D1H, 0BBH, 0FAH
   \              0xBD 0xC9    
   \              0xB7 0xD1    
   \              0xBB 0xFA    
   \   00000020   0x5C 0xC8          DC8 5CH, 0C8H, 0EDH, 0BCH, 0FEH, 5CH, 4DH, 69H
   \              0xED 0xBC    
   \              0xFE 0x5C    
   \              0x4D 0x69    
   \   00000028   0x63 0x72          DC8 63H, 72H, 69H, 75H, 6DH, 5FH, 4CH, 50H
   \              0x69 0x75    
   \              0x6D 0x5F    
   \              0x4C 0x50    
   \   00000030   0x43 0x31          DC8 43H, 31H, 37H, 36H, 38H, 2DH, 53H, 4BH
   \              0x37 0x36    
   \              0x38 0x2D    
   \              0x53 0x4B    
   \   00000038   0x5F 0x75          DC8 5FH, 75H, 43H, 4FH, 53H, 2DH, 49H, 49H
   \              0x43 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \   00000040   0x49 0x2D          DC8 49H, 2DH, 52H, 65H, 6CH, 65H, 61H, 73H
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \   00000048   0x65 0x5C          DC8 65H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000050   0x72 0x65          DC8 72H, 65H, 5CH, 45H, 76H, 61H, 6CH, 42H
   \              0x5C 0x45    
   \              0x76 0x61    
   \              0x6C 0x42    
   \   00000058   0x6F 0x61          DC8 6FH, 61H, 72H, 64H, 73H, 5CH, 4EH, 58H
   \              0x72 0x64    
   \              0x73 0x5C    
   \              0x4E 0x58    
   \   00000060   0x50 0x5C          DC8 50H, 5CH, 4CH, 50H, 43H, 31H, 37H, 36H
   \              0x4C 0x50    
   \              0x43 0x31    
   \              0x37 0x36    
   \   00000068   0x38 0x2D          DC8 38H, 2DH, 53H, 4BH, 5CH, 4CH, 50H, 43H
   \              0x53 0x4B    
   \              0x5C 0x4C    
   \              0x50 0x43    
   \   00000070   0x31 0x37          DC8 31H, 37H, 58H, 58H, 43H, 4DH, 53H, 49H
   \              0x58 0x58    
   \              0x43 0x4D    
   \              0x53 0x49    
   \   00000078   0x53 0x5C          DC8 53H, 5CH, 44H, 72H, 69H, 76H, 65H, 72H
   \              0x44 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \   00000080   0x73 0x5C          DC8 73H, 5CH, 73H, 6FH, 75H, 72H, 63H, 65H
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000088   0x5C 0x6C          DC8 5CH, 6CH, 70H, 63H, 31H, 37H, 78H, 78H
   \              0x70 0x63    
   \              0x31 0x37    
   \              0x78 0x78    
   \   00000090   0x5F 0x72          DC8 5FH, 72H, 74H, 63H, 2EH, 63H, 0
   \              0x74 0x63    
   \              0x2E 0x63    
   \              0x00         
   \   00000097   0x00               DC8 0
    777          
    778          /**
    779           * @}
    780           */
    781          
    782          #endif /* _RTC */
    783          
    784          /**
    785           * @}
    786           */
    787          
    788          /* --------------------------------- End Of File ------------------------------ */
    789          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RTC_AlarmIntConfig
        16   -> check_failed
      16   RTC_CalibConfig
        16   -> check_failed
      16   RTC_CalibCounterCmd
        16   -> check_failed
      16   RTC_ClearIntPending
        16   -> check_failed
      16   RTC_Cmd
        16   -> check_failed
      16   RTC_CntIncrIntConfig
        16   -> check_failed
       8   RTC_DeInit
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
       0   RTC_GetAlarmTime
      16   RTC_GetFullAlarmTime
        16   -> check_failed
      16   RTC_GetFullTime
        16   -> check_failed
      16   RTC_GetIntPending
        16   -> check_failed
      16   RTC_GetTime
        16   -> check_failed
       8   RTC_Init
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      24   RTC_ReadGPREG
        24   -> check_failed
       8   RTC_ResetClockTickCounter
         8   -> check_failed
      16   RTC_SetAlarmTime
        16   -> check_failed
      16   RTC_SetFullAlarmTime
        16   -> check_failed
      16   RTC_SetFullTime
        16   -> check_failed
      16   RTC_SetTime
        16   -> check_failed
      24   RTC_WriteGPREG
        24   -> check_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
     152  ?_0
     312  RTC_AlarmIntConfig
      88  RTC_CalibConfig
      70  RTC_CalibCounterCmd
      44  RTC_ClearIntPending
      72  RTC_Cmd
     312  RTC_CntIncrIntConfig
      38  RTC_DeInit
     114  RTC_GetAlarmTime
     104  RTC_GetFullAlarmTime
     104  RTC_GetFullTime
      56  RTC_GetIntPending
     178  RTC_GetTime
      54  RTC_Init
      58  RTC_ReadGPREG
      40  RTC_ResetClockTickCounter
     276  RTC_SetAlarmTime
     104  RTC_SetFullAlarmTime
     104  RTC_SetFullTime
     326  RTC_SetTime
      56  RTC_WriteGPREG

 
   152 bytes in section .rodata
 2 518 bytes in section .text
 
 2 518 bytes of CODE  memory
   152 bytes of CONST memory

Errors: none
Warnings: 2
