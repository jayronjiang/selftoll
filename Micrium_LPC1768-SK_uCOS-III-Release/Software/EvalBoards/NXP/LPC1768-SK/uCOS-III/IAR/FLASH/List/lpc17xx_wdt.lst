###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:08
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_wdt.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_wdt.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_wdt.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_wdt.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\source\lpc17xx_wdt.c
      1          /**
      2           * @file	: lpc17xx_wdt.c
      3           * @brief	: Contains all functions support for WDT firmware library on LPC17xx
      4           * @version	: 1.0
      5           * @date	: 9. April. 2009
      6           * @author	: HieuNguyen
      7           **************************************************************************
      8           * Software that is described herein is for illustrative purposes only
      9           * which provides customers with programming information regarding the
     10           * products. This software is supplied "AS IS" without any warranties.
     11           * NXP Semiconductors assumes no responsibility or liability for the
     12           * use of the software, conveys no license or title under any patent,
     13           * copyright, or mask work right to the product. NXP Semiconductors
     14           * reserves the right to make changes in the software without
     15           * notification. NXP Semiconductors also make no representation or
     16           * warranty that such application will be suitable for the specified
     17           * use without further testing or modification.
     18           **********************************************************************/
     19          
     20          /* Peripheral group ----------------------------------------------------------- */
     21          /** @addtogroup WDT
     22           * @{
     23           */
     24          
     25          /* Includes ------------------------------------------------------------------- */
     26          #include "lpc17xx_wdt.h"
     27          #include "lpc17xx_clkpwr.h"
     28          #include "lpc17xx_pinsel.h"
     29          
     30          
     31          /* If this source file built with example, the LPC17xx FW library configuration
     32           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     33           * otherwise the default FW library configuration file must be included instead
     34           */
     35          #ifdef __BUILD_WITH_EXAMPLE__
     36          #include "lpc17xx_libcfg.h"
     37          #else
     38          #include "lpc17xx_libcfg_default.h"
     39          #endif /* __BUILD_WITH_EXAMPLE__ */
     40          
     41          
     42          #ifdef _WDT
     43          
     44          /* Private Functions ---------------------------------------------------------- */
     45          /** @defgroup WDT_Private_Functions
     46           * @{
     47           */
     48          
     49          /********************************************************************//**
     50           * @brief 		Set WDT time out value and WDT mode
     51           * @param[in]	clk_source select Clock source for WDT device
     52           * @param[in]	timeout value of time-out for WDT (us)
     53           * @return		None
     54           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     55          uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
     56          {
   \                     WDT_SetTimeOut: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     57          
     58          	uint32_t pclk_wdt = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     59          	uint32_t tempval = 0;
   \   00000008   0x2700             MOVS     R7,#+0
     60          
     61          	switch ((WDT_CLK_OPT) clk_source)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD003             BEQ.N    ??WDT_SetTimeOut_0
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xD04C             BEQ.N    ??WDT_SetTimeOut_1
   \   00000014   0xD30F             BCC.N    ??WDT_SetTimeOut_2
   \   00000016   0xE05A             B.N      ??WDT_SetTimeOut_3
     62              {
     63              case WDT_CLKSRC_IRC:
     64              	pclk_wdt = 4000000;
   \                     ??WDT_SetTimeOut_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable5  ;; 0x3d0900
   \   0000001A   0x0006             MOVS     R6,R0
     65              	// Calculate TC in WDT
     66              	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
   \   0000001C   0x....             LDR.N    R0,??DataTable5_1  ;; 0xf4240
   \   0000001E   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000022   0x08A9             LSRS     R1,R5,#+2
   \   00000024   0x4348             MULS     R0,R1,R0
   \   00000026   0x0007             MOVS     R7,R0
     67              	// Check if it valid
     68              	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
   \   00000028   0x2FFF             CMP      R7,#+255
   \   0000002A   0xD303             BCC.N    ??WDT_SetTimeOut_4
     69              	{
     70              		LPC_WDT->WDTC = tempval;
   \   0000002C   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   0000002E   0x6007             STR      R7,[R0, #+0]
     71              		return	SUCCESS;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE04D             B.N      ??WDT_SetTimeOut_5
     72              	}
     73          
     74              	break;
   \                     ??WDT_SetTimeOut_4: (+1)
   \   00000034   0xE04B             B.N      ??WDT_SetTimeOut_6
     75          
     76              case WDT_CLKSRC_PCLK:
     77          
     78              	// Get WDT clock with CCLK divider = 4
     79          		pclk_wdt = SystemCoreClock / 4;
   \                     ??WDT_SetTimeOut_2: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable5_3
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0880             LSRS     R0,R0,#+2
   \   0000003C   0x0006             MOVS     R6,R0
     80          		// Calculate TC in WDT
     81          		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
   \   0000003E   0x....             LDR.N    R0,??DataTable5_1  ;; 0xf4240
   \   00000040   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000044   0x08A9             LSRS     R1,R5,#+2
   \   00000046   0x4348             MULS     R0,R1,R0
   \   00000048   0x0007             MOVS     R7,R0
     82          
     83          		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
   \   0000004A   0x2FFF             CMP      R7,#+255
   \   0000004C   0xD307             BCC.N    ??WDT_SetTimeOut_7
     84          		{
     85          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
     86          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   00000056   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   00000058   0x6007             STR      R7,[R0, #+0]
     87          			return SUCCESS;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE038             B.N      ??WDT_SetTimeOut_5
     88          		}
     89          
     90          		// Get WDT clock with CCLK divider = 2
     91          		pclk_wdt = SystemCoreClock / 2;
   \                     ??WDT_SetTimeOut_7: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable5_3
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x0840             LSRS     R0,R0,#+1
   \   00000064   0x0006             MOVS     R6,R0
     92          		// Calculate TC in WDT
     93          		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
   \   00000066   0x....             LDR.N    R0,??DataTable5_1  ;; 0xf4240
   \   00000068   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   0000006C   0x08A9             LSRS     R1,R5,#+2
   \   0000006E   0x4348             MULS     R0,R1,R0
   \   00000070   0x0007             MOVS     R7,R0
     94          
     95          		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
   \   00000072   0x2FFF             CMP      R7,#+255
   \   00000074   0xD307             BCC.N    ??WDT_SetTimeOut_8
     96          		{
     97          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
   \   00000076   0x2102             MOVS     R1,#+2
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
     98          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   0000007E   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   00000080   0x6007             STR      R7,[R0, #+0]
     99          			return	SUCCESS;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xE024             B.N      ??WDT_SetTimeOut_5
    100          		}
    101          
    102          		// Get WDT clock with CCLK divider = 1
    103          		pclk_wdt = SystemCoreClock;
   \                     ??WDT_SetTimeOut_8: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable5_3
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x0006             MOVS     R6,R0
    104          		// Calculate TC in WDT
    105          		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
   \   0000008C   0x....             LDR.N    R0,??DataTable5_1  ;; 0xf4240
   \   0000008E   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000092   0x08A9             LSRS     R1,R5,#+2
   \   00000094   0x4348             MULS     R0,R1,R0
   \   00000096   0x0007             MOVS     R7,R0
    106          
    107          		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
   \   00000098   0x2FFF             CMP      R7,#+255
   \   0000009A   0xD307             BCC.N    ??WDT_SetTimeOut_9
    108          		{
    109          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
    110          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   000000A4   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   000000A6   0x6007             STR      R7,[R0, #+0]
    111          			return	SUCCESS;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE011             B.N      ??WDT_SetTimeOut_5
    112          		}
    113          		break ;
   \                     ??WDT_SetTimeOut_9: (+1)
   \   000000AC   0xE00F             B.N      ??WDT_SetTimeOut_6
    114          
    115          
    116              case WDT_CLKSRC_RTC:
    117          		pclk_wdt = 32768;
   \                     ??WDT_SetTimeOut_1: (+1)
   \   000000AE   0xF44F 0x4000      MOV      R0,#+32768
   \   000000B2   0x0006             MOVS     R6,R0
    118          		// Calculate TC in WDT
    119          		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
   \   000000B4   0x....             LDR.N    R0,??DataTable5_1  ;; 0xf4240
   \   000000B6   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   000000BA   0x08A9             LSRS     R1,R5,#+2
   \   000000BC   0x4348             MULS     R0,R1,R0
   \   000000BE   0x0007             MOVS     R7,R0
    120          		// Check if it valid
    121          		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
   \   000000C0   0x2FFF             CMP      R7,#+255
   \   000000C2   0xD303             BCC.N    ??WDT_SetTimeOut_10
    122          		{
    123          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   000000C4   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   000000C6   0x6007             STR      R7,[R0, #+0]
    124          			return	SUCCESS;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0xE001             B.N      ??WDT_SetTimeOut_5
    125          		}
    126          
    127          		break;
   \                     ??WDT_SetTimeOut_10: (+1)
   \   000000CC   0xE7FF             B.N      ??WDT_SetTimeOut_6
    128          
    129          // Error parameter
    130          		default:
    131          			break;
    132          }
    133          
    134          	return ERROR;
   \                     ??WDT_SetTimeOut_3: (+1)
   \                     ??WDT_SetTimeOut_6: (+1)
   \   000000CE   0x2000             MOVS     R0,#+0
   \                     ??WDT_SetTimeOut_5: (+1)
   \   000000D0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    135          }
    136          
    137          /**
    138           * @}
    139           */
    140          
    141          
    142          /* Public Functions ----------------------------------------------------------- */
    143          /** @addtogroup WDT_Public_Functions
    144           * @{
    145           */
    146          
    147          
    148          /*********************************************************************//**
    149          * @brief 		Initial for Watchdog function
    150          * 					Clock source = RTC ,
    151          *
    152          * @param[in]	ClkSrc  Select clock source
    153          * 				-	0:Clock source from Internal RC oscillator
    154          * 				-	1: Selects the APB peripheral clock (PCLK)
    155          * 				-	2:Selects the RTC oscillator
    156          *
    157          * @param[in]	WDTMode WDT mode
    158          * 				-	0: Use WDT to generate interrupt only
    159          * 				-	1:WDT_MODE_RESET
    160          * @return 		None
    161           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          void WDT_Init (uint32_t ClkSrc, uint32_t WDTMode)
    163          {
   \                     WDT_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    164          	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??WDT_Init_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD005             BEQ.N    ??WDT_Init_0
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD003             BEQ.N    ??WDT_Init_0
   \   00000012   0x21A4             MOVS     R1,#+164
   \   00000014   0x....             LDR.N    R0,??DataTable5_4
   \   00000016   0x.... 0x....      BL       check_failed
    165          	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
   \                     ??WDT_Init_0: (+1)
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD005             BEQ.N    ??WDT_Init_1
   \   0000001E   0x2D01             CMP      R5,#+1
   \   00000020   0xD003             BEQ.N    ??WDT_Init_1
   \   00000022   0x21A5             MOVS     R1,#+165
   \   00000024   0x....             LDR.N    R0,??DataTable5_4
   \   00000026   0x.... 0x....      BL       check_failed
    166          	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
   \                     ??WDT_Init_1: (+1)
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
    167          
    168          	//Set clock source
    169          	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
   \   00000032   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x0880             LSRS     R0,R0,#+2
   \   00000038   0x0080             LSLS     R0,R0,#+2
   \   0000003A   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40000010
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    170          	LPC_WDT->WDCLKSEL |= ClkSrc;
   \   0000003E   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x4320             ORRS     R0,R4,R0
   \   00000044   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40000010
   \   00000046   0x6008             STR      R0,[R1, #+0]
    171          	//Set WDT mode
    172          	if (WDTMode == WDT_MODE_RESET){
   \   00000048   0x2D01             CMP      R5,#+1
   \   0000004A   0xD107             BNE.N    ??WDT_Init_2
    173          		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
   \   0000004C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000056   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    174          	}
    175          }
   \                     ??WDT_Init_2: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    176          
    177          /*********************************************************************//**
    178          * @brief 		Start WDT activity with given timeout value
    179          * @param[in]	TimeOut WDT reset after timeout if it is not feed
    180          * @return 		None
    181           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          void WDT_Start(uint32_t TimeOut)
    183          {
   \                     WDT_Start: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    184          	uint32_t ClkSrc;
    185          
    186          	ClkSrc = LPC_WDT->WDCLKSEL;
   \   00000004   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0005             MOVS     R5,R0
    187          	ClkSrc &=WDT_WDCLKSEL_MASK;
   \   0000000A   0xF015 0x0503      ANDS     R5,R5,#0x3
    188          	WDT_SetTimeOut(ClkSrc,TimeOut);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       WDT_SetTimeOut
    189          	//enable watchdog
    190          	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
   \   00000018   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000022   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    191          	WDT_Feed();
   \   00000028   0x.... 0x....      BL       WDT_Feed
    192          }
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    193          
    194          /********************************************************************//**
    195           * @brief 		Read WDT Time out flag
    196           * @param[in]	None
    197           * @return		Time out flag status of WDT
    198           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    199          FlagStatus WDT_ReadTimeOutFlag (void)
    200          {
    201          	return ((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2);
   \                     WDT_ReadTimeOutFlag: (+1)
   \   00000000   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    202          }
    203          
    204          /********************************************************************//**
    205           * @brief 		Clear WDT Time out flag
    206           * @param[in]	None
    207           * @return		None
    208           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    209          void WDT_ClrTimeOutFlag (void)
    210          {
    211          	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
   \                     WDT_ClrTimeOutFlag: (+1)
   \   00000000   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000000A   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    212          }
   \   00000010   0x4770             BX       LR               ;; return
    213          
    214          /********************************************************************//**
    215           * @brief 		Update WDT timeout value and feed
    216           * @param[in]	TimeOut	TimeOut value to be updated
    217           * @return		None
    218           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    219          void WDT_UpdateTimeOut ( uint32_t TimeOut)
    220          {
   \                     WDT_UpdateTimeOut: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    221          	uint32_t ClkSrc;
    222          	ClkSrc = LPC_WDT->WDCLKSEL;
   \   00000004   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0005             MOVS     R5,R0
    223          	ClkSrc &=WDT_WDCLKSEL_MASK;
   \   0000000A   0xF015 0x0503      ANDS     R5,R5,#0x3
    224          	WDT_SetTimeOut(ClkSrc,TimeOut);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       WDT_SetTimeOut
    225          	WDT_Feed();
   \   00000018   0x.... 0x....      BL       WDT_Feed
    226          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    227          
    228          
    229          /********************************************************************//**
    230           * @brief 		After set WDTEN, call this function to start Watchdog
    231           * 				or reload the Watchdog timer
    232           * @param[in]	None
    233           *
    234           * @return		None
    235           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          void WDT_Feed (void)
    237          {
    238          	// Disable irq interrupt
    239          	__disable_irq();
   \                     WDT_Feed: (+1)
   \   00000000   0xB672             CPSID    I
    240          	LPC_WDT->WDFEED = 0xAA;
   \   00000002   0x20AA             MOVS     R0,#+170
   \   00000004   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40000008
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    241          	LPC_WDT->WDFEED = 0x55;
   \   00000008   0x2055             MOVS     R0,#+85
   \   0000000A   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40000008
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    242          	// Then enable irq interrupt
    243          	__enable_irq();
   \   0000000E   0xB662             CPSIE    I
    244          }
   \   00000010   0x4770             BX       LR               ;; return
    245          
    246          /********************************************************************//**
    247           * @brief 		Get the current value of WDT
    248           * @param[in]	None
    249           * @return		current value of WDT
    250           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    251          uint32_t WDT_GetCurrentCount(void)
    252          {
    253          	return LPC_WDT->WDTV;
   \                     WDT_GetCurrentCount: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_7  ;; 0x4000000c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    254          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40000010         DC32     0x40000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4000000C         DC32     0x4000000c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 0D0H, 0C2H, 0CFH, 0EEH, 0C4H
   \              0x5C 0xD0    
   \              0xC2 0xCF    
   \              0xEE 0xC4    
   \   00000008   0xBF 0x5C          DC8 0BFH, 5CH, 0D2H, 0C6H, 0BDH, 0BBH, 0D7H, 0CAH
   \              0xD2 0xC6    
   \              0xBD 0xBB    
   \              0xD7 0xCA    
   \   00000010   0xC1 0xCF          DC8 0C1H, 0CFH, 4CH, 48H, 54H, 5CH, 0D7H, 0D4H
   \              0x4C 0x48    
   \              0x54 0x5C    
   \              0xD7 0xD4    
   \   00000018   0xD6 0xFA          DC8 0D6H, 0FAH, 0BDH, 0C9H, 0B7H, 0D1H, 0BBH, 0FAH
   \              0xBD 0xC9    
   \              0xB7 0xD1    
   \              0xBB 0xFA    
   \   00000020   0x5C 0xC8          DC8 5CH, 0C8H, 0EDH, 0BCH, 0FEH, 5CH, 4DH, 69H
   \              0xED 0xBC    
   \              0xFE 0x5C    
   \              0x4D 0x69    
   \   00000028   0x63 0x72          DC8 63H, 72H, 69H, 75H, 6DH, 5FH, 4CH, 50H
   \              0x69 0x75    
   \              0x6D 0x5F    
   \              0x4C 0x50    
   \   00000030   0x43 0x31          DC8 43H, 31H, 37H, 36H, 38H, 2DH, 53H, 4BH
   \              0x37 0x36    
   \              0x38 0x2D    
   \              0x53 0x4B    
   \   00000038   0x5F 0x75          DC8 5FH, 75H, 43H, 4FH, 53H, 2DH, 49H, 49H
   \              0x43 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \   00000040   0x49 0x2D          DC8 49H, 2DH, 52H, 65H, 6CH, 65H, 61H, 73H
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \   00000048   0x65 0x5C          DC8 65H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000050   0x72 0x65          DC8 72H, 65H, 5CH, 45H, 76H, 61H, 6CH, 42H
   \              0x5C 0x45    
   \              0x76 0x61    
   \              0x6C 0x42    
   \   00000058   0x6F 0x61          DC8 6FH, 61H, 72H, 64H, 73H, 5CH, 4EH, 58H
   \              0x72 0x64    
   \              0x73 0x5C    
   \              0x4E 0x58    
   \   00000060   0x50 0x5C          DC8 50H, 5CH, 4CH, 50H, 43H, 31H, 37H, 36H
   \              0x4C 0x50    
   \              0x43 0x31    
   \              0x37 0x36    
   \   00000068   0x38 0x2D          DC8 38H, 2DH, 53H, 4BH, 5CH, 4CH, 50H, 43H
   \              0x53 0x4B    
   \              0x5C 0x4C    
   \              0x50 0x43    
   \   00000070   0x31 0x37          DC8 31H, 37H, 58H, 58H, 43H, 4DH, 53H, 49H
   \              0x58 0x58    
   \              0x43 0x4D    
   \              0x53 0x49    
   \   00000078   0x53 0x5C          DC8 53H, 5CH, 44H, 72H, 69H, 76H, 65H, 72H
   \              0x44 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \   00000080   0x73 0x5C          DC8 73H, 5CH, 73H, 6FH, 75H, 72H, 63H, 65H
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000088   0x5C 0x6C          DC8 5CH, 6CH, 70H, 63H, 31H, 37H, 78H, 78H
   \              0x70 0x63    
   \              0x31 0x37    
   \              0x78 0x78    
   \   00000090   0x5F 0x77          DC8 5FH, 77H, 64H, 74H, 2EH, 63H, 0
   \              0x64 0x74    
   \              0x2E 0x63    
   \              0x00         
   \   00000097   0x00               DC8 0
    255          
    256          /**
    257           * @}
    258           */
    259          
    260          #endif /* _WDT */
    261          
    262          /**
    263           * @}
    264           */
    265          
    266          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WDT_ClrTimeOutFlag
       0   WDT_Feed
       0   WDT_GetCurrentCount
      16   WDT_Init
        16   -> CLKPWR_SetPCLKDiv
        16   -> check_failed
       0   WDT_ReadTimeOutFlag
      24   WDT_SetTimeOut
        24   -> CLKPWR_SetPCLKDiv
      16   WDT_Start
        16   -> WDT_Feed
        16   -> WDT_SetTimeOut
      16   WDT_UpdateTimeOut
        16   -> WDT_Feed
        16   -> WDT_SetTimeOut


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
     152  ?_0
      18  WDT_ClrTimeOutFlag
      18  WDT_Feed
       6  WDT_GetCurrentCount
      94  WDT_Init
      14  WDT_ReadTimeOutFlag
     210  WDT_SetTimeOut
      46  WDT_Start
      30  WDT_UpdateTimeOut

 
 152 bytes in section .rodata
 468 bytes in section .text
 
 468 bytes of CODE  memory
 152 bytes of CONST memory

Errors: none
Warnings: 7
