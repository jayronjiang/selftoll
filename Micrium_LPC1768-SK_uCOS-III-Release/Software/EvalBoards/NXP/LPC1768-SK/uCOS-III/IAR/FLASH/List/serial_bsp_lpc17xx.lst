###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:12
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Driver\NXP\LPC17xx\serial_bsp_lpc17xx.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Driver\NXP\LPC17xx\serial_bsp_lpc17xx.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\serial_bsp_lpc17xx.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\serial_bsp_lpc17xx.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Driver\NXP\LPC17xx\serial_bsp_lpc17xx.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     SERIAL (BYTE) COMMUNICATION
      4          *
      5          *                         (c) Copyright 2007-2009; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                     SERIAL (BYTE) COMMUNICATION
     18          *                                            DEVICE DRIVER
     19          *
     20          *                            LPC17xx BSP FOR THE NXP LPCXXXX SERIAL DRIVER
     21          *
     22          *
     23          * Filename      : serial_bsp_lpc17xx.c
     24          * Version       : V2.00
     25          * Programmer(s) : FGK
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                            INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #include  <serial_bsp_lpc17xx.h>
     36          #include  <csp.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          #define  SERIAL_BSP_LPC17xx_UART0_BASE        ((void *)0x4000C000)
     46          #define  SERIAL_BSP_LPC17xx_UART1_BASE        ((void *)0x40010000)
     47          #define  SERIAL_BSP_LPC17xx_UART2_BASE        ((void *)0x40098000)
     48          #define  SERIAL_BSP_LPC17xx_UART3_BASE        ((void *)0x4009C000)
     49          
     50          
     51          /*
     52          *********************************************************************************************************
     53          *                                      LOCAL FUNCTION PROTOTYPES
     54          *********************************************************************************************************
     55          */
     56          
     57                                                                          /* -------------------- UART0 BSP API ----------------- */
     58          static  void        SerialBSP_LPC17xx_UART0_ClkEn        (SERIAL_ERR   *perr);
     59          static  void        SerialBSP_LPC17xx_UART0_ClkDis       (SERIAL_ERR   *perr);
     60          static  void        SerialBSP_LPC17xx_UART0_CfgGPIO      (CPU_BOOLEAN   flow_ctrl,
     61                                                                    SERIAL_ERR   *perr);
     62          static  void        SerialBSP_LPC17xx_UART0_CfgInt       (SERIAL_DEV   *pdev,
     63                                                                    SERIAL_ERR   *perr);
     64          static  CPU_INT32U  SerialBSP_LPC17xx_UART0_ClkFreqGet   (void);
     65          
     66                                                                          /* -------------------- UART1 BSP API ----------------- */
     67          static  void        SerialBSP_LPC17xx_UART1_ClkEn         (SERIAL_ERR   *perr);
     68          static  void        SerialBSP_LPC17xx_UART1_ClkDis        (SERIAL_ERR   *perr);
     69          static  void        SerialBSP_LPC17xx_UART1_CfgGPIO       (CPU_BOOLEAN   flow_ctrl,
     70                                                                     SERIAL_ERR   *perr);
     71          static  void        SerialBSP_LPC17xx_UART1_CfgGPIO_Alt   (CPU_BOOLEAN   flow_ctrl,
     72                                                                     SERIAL_ERR   *perr);
     73          
     74          static  void        SerialBSP_LPC17xx_UART1_CfgInt        (SERIAL_DEV   *pdev,
     75                                                                     SERIAL_ERR   *perr);
     76          static  CPU_INT32U  SerialBSP_LPC17xx_UART1_ClkFreqGet    (void);
     77          
     78                                                                          /* -------------------- UART2 BSP API ----------------- */
     79          static  void        SerialBSP_LPC17xx_UART2_ClkEn         (SERIAL_ERR   *perr);
     80          static  void        SerialBSP_LPC17xx_UART2_ClkDis        (SERIAL_ERR   *perr);
     81          static  void        SerialBSP_LPC17xx_UART2_CfgGPIO       (CPU_BOOLEAN   flow_ctrl,
     82                                                                     SERIAL_ERR   *perr);
     83          
     84          static  void        SerialBSP_LPC17xx_UART2_CfgGPIO_Alt   (CPU_BOOLEAN   flow_ctrl,
     85                                                                     SERIAL_ERR   *perr);
     86          static  void        SerialBSP_LPC17xx_UART2_CfgInt        (SERIAL_DEV   *pdev,
     87                                                                     SERIAL_ERR   *perr);
     88          static  CPU_INT32U  SerialBSP_LPC17xx_UART2_ClkFreqGet    (void);
     89          
     90                                                                          /* -------------------- UART3 BSP API ----------------- */
     91          static  void        SerialBSP_LPC17xx_UART3_ClkEn         (SERIAL_ERR   *perr);
     92          static  void        SerialBSP_LPC17xx_UART3_ClkDis        (SERIAL_ERR   *perr);
     93          static  void        SerialBSP_LPC17xx_UART3_CfgGPIO       (CPU_BOOLEAN   flow_ctrl,
     94                                                                     SERIAL_ERR   *perr);
     95          static  void        SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0  (CPU_BOOLEAN   flow_ctrl,
     96                                                                     SERIAL_ERR   *perr);
     97          static  void        SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1  (CPU_BOOLEAN   flow_ctrl,
     98                                                                     SERIAL_ERR   *perr);
     99          
    100          static  void        SerialBSP_LPC17xx_UART3_CfgInt        (SERIAL_DEV   *pdev,
    101                                                                     SERIAL_ERR   *perr);
    102          static  CPU_INT32U  SerialBSP_LPC17xx_UART3_ClkFreqGet    (void);
    103          
    104          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)    
    105          static  void        SerialBSP_LPC17xx_UARTx_IntHandler    (void *p_arg);
    106          #else
    107          static  void        SerialBSP_LPC17xx_UART0_IntHandler    (void *p_arg);
    108          static  void        SerialBSP_LPC17xx_UART1_IntHandler    (void *p_arg);
    109          static  void        SerialBSP_LPC17xx_UART2_IntHandler    (void *p_arg);
    110          static  void        SerialBSP_LPC17xx_UART3_IntHandler    (void *p_arg);
    111          #endif
    112          
    113          
    114          /*
    115          *********************************************************************************************************
    116          *                                   SERIAL INTERFACE DEVICE BSP API
    117          *********************************************************************************************************
    118          */
    119          

   \                                 In section .rodata, align 4
    120          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART0 = {
   \                     SerialBSP_LPC17xx_UART0:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART0_ClkEn, SerialBSP_LPC17xx_UART0_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART0_CfgGPIO, SerialBSP_LPC17xx_UART0_CfgInt
   \              0x........   
   \   00000010   0x........         DC32 SerialBSP_LPC17xx_UART0_ClkFreqGet
    121              SerialBSP_LPC17xx_UART0_ClkEn,
    122              SerialBSP_LPC17xx_UART0_ClkDis,
    123              SerialBSP_LPC17xx_UART0_CfgGPIO,
    124              SerialBSP_LPC17xx_UART0_CfgInt,
    125              SerialBSP_LPC17xx_UART0_ClkFreqGet
    126          };
    127          

   \                                 In section .rodata, align 4
    128          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART1 = {
   \                     SerialBSP_LPC17xx_UART1:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART1_ClkEn, SerialBSP_LPC17xx_UART1_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART1_CfgGPIO, SerialBSP_LPC17xx_UART1_CfgInt
   \              0x........   
   \   00000010   0x........         DC32 SerialBSP_LPC17xx_UART1_ClkFreqGet
    129              SerialBSP_LPC17xx_UART1_ClkEn,
    130              SerialBSP_LPC17xx_UART1_ClkDis,
    131              SerialBSP_LPC17xx_UART1_CfgGPIO,
    132              SerialBSP_LPC17xx_UART1_CfgInt,
    133              SerialBSP_LPC17xx_UART1_ClkFreqGet
    134          };
    135          

   \                                 In section .rodata, align 4
    136          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART1_Alt = {
   \                     SerialBSP_LPC17xx_UART1_Alt:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART1_ClkEn, SerialBSP_LPC17xx_UART1_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART1_CfgGPIO_Alt
   \   0000000C   0x........         DC32 SerialBSP_LPC17xx_UART1_CfgInt, SerialBSP_LPC17xx_UART1_ClkFreqGet
   \              0x........   
    137              SerialBSP_LPC17xx_UART1_ClkEn,
    138              SerialBSP_LPC17xx_UART1_ClkDis,
    139              SerialBSP_LPC17xx_UART1_CfgGPIO_Alt,
    140              SerialBSP_LPC17xx_UART1_CfgInt,
    141              SerialBSP_LPC17xx_UART1_ClkFreqGet
    142          };
    143          

   \                                 In section .rodata, align 4
    144          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART2 = {
   \                     SerialBSP_LPC17xx_UART2:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART2_ClkEn, SerialBSP_LPC17xx_UART2_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART2_CfgGPIO, SerialBSP_LPC17xx_UART2_CfgInt
   \              0x........   
   \   00000010   0x........         DC32 SerialBSP_LPC17xx_UART2_ClkFreqGet
    145              SerialBSP_LPC17xx_UART2_ClkEn,
    146              SerialBSP_LPC17xx_UART2_ClkDis,
    147              SerialBSP_LPC17xx_UART2_CfgGPIO,
    148              SerialBSP_LPC17xx_UART2_CfgInt,
    149              SerialBSP_LPC17xx_UART2_ClkFreqGet
    150          };
    151          

   \                                 In section .rodata, align 4
    152          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART2_Alt = {
   \                     SerialBSP_LPC17xx_UART2_Alt:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART2_ClkEn, SerialBSP_LPC17xx_UART2_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART2_CfgGPIO_Alt
   \   0000000C   0x........         DC32 SerialBSP_LPC17xx_UART2_CfgInt, SerialBSP_LPC17xx_UART2_ClkFreqGet
   \              0x........   
    153              SerialBSP_LPC17xx_UART2_ClkEn,
    154              SerialBSP_LPC17xx_UART2_ClkDis,
    155              SerialBSP_LPC17xx_UART2_CfgGPIO_Alt,
    156              SerialBSP_LPC17xx_UART2_CfgInt,
    157              SerialBSP_LPC17xx_UART2_ClkFreqGet
    158          };
    159          

   \                                 In section .rodata, align 4
    160          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART3 = {
   \                     SerialBSP_LPC17xx_UART3:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART3_ClkEn, SerialBSP_LPC17xx_UART3_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART3_CfgGPIO, SerialBSP_LPC17xx_UART3_CfgInt
   \              0x........   
   \   00000010   0x........         DC32 SerialBSP_LPC17xx_UART3_ClkFreqGet
    161              SerialBSP_LPC17xx_UART3_ClkEn,
    162              SerialBSP_LPC17xx_UART3_ClkDis,
    163              SerialBSP_LPC17xx_UART3_CfgGPIO,
    164              SerialBSP_LPC17xx_UART3_CfgInt,
    165              SerialBSP_LPC17xx_UART3_ClkFreqGet
    166          };
    167          

   \                                 In section .rodata, align 4
    168          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART3_Alt0 = {
   \                     SerialBSP_LPC17xx_UART3_Alt0:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART3_ClkEn, SerialBSP_LPC17xx_UART3_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0
   \   0000000C   0x........         DC32 SerialBSP_LPC17xx_UART3_CfgInt, SerialBSP_LPC17xx_UART3_ClkFreqGet
   \              0x........   
    169              SerialBSP_LPC17xx_UART3_ClkEn,
    170              SerialBSP_LPC17xx_UART3_ClkDis,
    171              SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0,
    172              SerialBSP_LPC17xx_UART3_CfgInt,
    173              SerialBSP_LPC17xx_UART3_ClkFreqGet
    174          };
    175          

   \                                 In section .rodata, align 4
    176          static  SERIAL_BSP_API  SerialBSP_LPC17xx_UART3_Alt1 = {
   \                     SerialBSP_LPC17xx_UART3_Alt1:
   \   00000000   0x........         DC32 SerialBSP_LPC17xx_UART3_ClkEn, SerialBSP_LPC17xx_UART3_ClkDis
   \              0x........   
   \   00000008   0x........         DC32 SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1
   \   0000000C   0x........         DC32 SerialBSP_LPC17xx_UART3_CfgInt, SerialBSP_LPC17xx_UART3_ClkFreqGet
   \              0x........   
    177              SerialBSP_LPC17xx_UART3_ClkEn,
    178              SerialBSP_LPC17xx_UART3_ClkDis,
    179              SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1,
    180              SerialBSP_LPC17xx_UART3_CfgInt,
    181              SerialBSP_LPC17xx_UART3_ClkFreqGet
    182          };
    183          
    184          
    185          /*
    186          *********************************************************************************************************
    187          *********************************************************************************************************
    188          *                                      SERIAL INTERFACE DEVICES
    189          *********************************************************************************************************
    190          *********************************************************************************************************
    191          */
    192          

   \                                 In section .data, align 4
    193          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART0 = {
   \                     SerialDev_LPCxxxx_UART0:
   \   00000000   0x4000C000         DC32 4000C000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART0
   \              0x........   
   \              0x........   
    194               SERIAL_BSP_LPC17xx_UART0_BASE,
    195              &SerialDrv_LPCxxxx_API,
    196              &SerialBSP_LPC17xx_UART0
    197          };
    198          

   \                                 In section .data, align 4
    199          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART1 = {
   \                     SerialDev_LPCxxxx_UART1:
   \   00000000   0x40010000         DC32 40010000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART1
   \              0x........   
   \              0x........   
    200               SERIAL_BSP_LPC17xx_UART1_BASE,
    201              &SerialDrv_LPCxxxx_API,
    202              &SerialBSP_LPC17xx_UART1
    203          };
    204          

   \                                 In section .data, align 4
    205          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART1_Alt = {
   \                     SerialDev_LPCxxxx_UART1_Alt:
   \   00000000   0x40010000         DC32 40010000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART1_Alt
   \              0x........   
   \              0x........   
    206               SERIAL_BSP_LPC17xx_UART1_BASE,
    207              &SerialDrv_LPCxxxx_API,
    208              &SerialBSP_LPC17xx_UART1_Alt
    209          };
    210          

   \                                 In section .data, align 4
    211          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART2 = {
   \                     SerialDev_LPCxxxx_UART2:
   \   00000000   0x40098000         DC32 40098000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART2
   \              0x........   
   \              0x........   
    212               SERIAL_BSP_LPC17xx_UART2_BASE,
    213              &SerialDrv_LPCxxxx_API,
    214              &SerialBSP_LPC17xx_UART2
    215          };
    216          

   \                                 In section .data, align 4
    217          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART2_Alt = {
   \                     SerialDev_LPCxxxx_UART2_Alt:
   \   00000000   0x40098000         DC32 40098000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART2_Alt
   \              0x........   
   \              0x........   
    218               SERIAL_BSP_LPC17xx_UART2_BASE,
    219              &SerialDrv_LPCxxxx_API,
    220              &SerialBSP_LPC17xx_UART2_Alt
    221          };
    222          

   \                                 In section .data, align 4
    223          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART3 = {
   \                     SerialDev_LPCxxxx_UART3:
   \   00000000   0x4009C000         DC32 4009C000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART3
   \              0x........   
   \              0x........   
    224               SERIAL_BSP_LPC17xx_UART3_BASE,
    225              &SerialDrv_LPCxxxx_API,
    226              &SerialBSP_LPC17xx_UART3
    227          };
    228          

   \                                 In section .data, align 4
    229          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART3_Alt0 = {
   \                     SerialDev_LPCxxxx_UART3_Alt0:
   \   00000000   0x4009C000         DC32 4009C000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART3_Alt0
   \              0x........   
   \              0x........   
    230               SERIAL_BSP_LPC17xx_UART3_BASE,
    231              &SerialDrv_LPCxxxx_API,
    232              &SerialBSP_LPC17xx_UART3_Alt0
    233          };
    234          
    235          

   \                                 In section .data, align 4
    236          SERIAL_DEV_CFG  SerialDev_LPCxxxx_UART3_Alt1 = {
   \                     SerialDev_LPCxxxx_UART3_Alt1:
   \   00000000   0x4009C000         DC32 4009C000H, SerialDrv_LPCxxxx_API, SerialBSP_LPC17xx_UART3_Alt1
   \              0x........   
   \              0x........   
    237               SERIAL_BSP_LPC17xx_UART3_BASE,
    238              &SerialDrv_LPCxxxx_API,
    239              &SerialBSP_LPC17xx_UART3_Alt1
    240          };
    241          
    242          
    243          /*
    244          *********************************************************************************************************
    245          *********************************************************************************************************
    246          *                                      LOCAL GLOBAL VARIABLES
    247          *********************************************************************************************************
    248          *********************************************************************************************************
    249          */
    250          
    251          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_DISABLED)    
    252          static  SERIAL_DEV  *SerialBSP_LPC17xx_USART0_DevPtr;
    253          static  SERIAL_DEV  *SerialBSP_LPC17xx_USART1_DevPtr;
    254          static  SERIAL_DEV  *SerialBSP_LPC17xx_USART2_DevPtr;
    255          static  SERIAL_DEV  *SerialBSP_LPC17xx_USART3_DevPtr;
    256          #endif
    257          
    258          
    259          /*$PAGE*/
    260          /*
    261          *********************************************************************************************************
    262          *                                          SerialBSP_LPC17xx_UARTx_ClkEn()
    263          *
    264          * Description : Enable device/peripheral clock.
    265          *
    266          * Argument(s) : perr        Pointer to variable that will receive the return error code from this function :
    267          *
    268          *                               SERIAL_ERR_NONE                 Device/peripheral clock enabled successfully.
    269          *
    270          * Return(s)   : none.
    271          *
    272          * Caller(s)   : SerialDrv_Open() via 'pdev->BSP_API->ClkEn()'.
    273          *
    274          * Note(s)     : none.
    275          *********************************************************************************************************
    276          */
    277          

   \                                 In section .text, align 2, keep-with-next
    278          static  void  SerialBSP_LPC17xx_UART0_ClkEn (SERIAL_ERR  *perr)
    279          {
   \                     SerialBSP_LPC17xx_UART0_ClkEn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    280             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    281                        CSP_INT_SRC_NBR_UART_00);
   \   00000004   0x2105             MOVS     R1,#+5
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    282             
    283             CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_UART_00);
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkEn
    284              
    285             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    286          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    287          

   \                                 In section .text, align 2, keep-with-next
    288          static  void  SerialBSP_LPC17xx_UART1_ClkEn (SERIAL_ERR  *perr)
    289          {
   \                     SerialBSP_LPC17xx_UART1_ClkEn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    290             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    291                        CSP_INT_SRC_NBR_UART_01);
   \   00000004   0x2106             MOVS     R1,#+6
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    292             
    293             CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_UART_01);
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkEn
    294          
    295             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    296          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    297          

   \                                 In section .text, align 2, keep-with-next
    298          static  void  SerialBSP_LPC17xx_UART2_ClkEn(SERIAL_ERR  *perr)
    299          {
   \                     SerialBSP_LPC17xx_UART2_ClkEn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    300             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    301                        CSP_INT_SRC_NBR_UART_02);
   \   00000004   0x2107             MOVS     R1,#+7
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    302             
    303             CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_UART_02);
   \   0000000C   0x2018             MOVS     R0,#+24
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkEn
    304          
    305             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    306          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    307          

   \                                 In section .text, align 2, keep-with-next
    308          static  void  SerialBSP_LPC17xx_UART3_ClkEn (SERIAL_ERR  *perr)
    309          {
   \                     SerialBSP_LPC17xx_UART3_ClkEn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    310             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    311                        CSP_INT_SRC_NBR_UART_03);
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    312             CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_UART_03);
   \   0000000C   0x2019             MOVS     R0,#+25
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkEn
    313          
    314             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    315          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    316          
    317          
    318          /*$PAGE*/
    319          /*
    320          *********************************************************************************************************
    321          *                                         SerialBSP_ClkDis()
    322          *
    323          * Description : Disable device/peripheral clock.
    324          *
    325          * Argument(s) : perr        Pointer to variable that will receive the return error code from this function :
    326          *
    327          *                               SERIAL_ERR_NONE                 Device/peripheral clock disabled successfully.
    328          *
    329          * Return(s)   : none.
    330          *
    331          * Caller(s)   : SerialDrv_Close() via 'pdev->BSP_API->ClkDis()'.
    332          *
    333          * Note(s)     : none.
    334          *********************************************************************************************************
    335          */
    336          

   \                                 In section .text, align 2, keep-with-next
    337          static  void  SerialBSP_LPC17xx_UART0_ClkDis (SERIAL_ERR  *perr)
    338          {
   \                     SerialBSP_LPC17xx_UART0_ClkDis: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    339             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    340                        CSP_INT_SRC_NBR_UART_00);
   \   00000004   0x2105             MOVS     R1,#+5
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    341             
    342             CSP_PM_PerClkDis(CSP_PM_PER_CLK_NBR_UART_00);
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkDis
    343          
    344             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    345          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    346          

   \                                 In section .text, align 2, keep-with-next
    347          static  void  SerialBSP_LPC17xx_UART1_ClkDis (SERIAL_ERR  *perr)
    348          {
   \                     SerialBSP_LPC17xx_UART1_ClkDis: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    349             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    350                        CSP_INT_SRC_NBR_UART_01);
   \   00000004   0x2106             MOVS     R1,#+6
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    351             
    352             CSP_PM_PerClkDis(CSP_PM_PER_CLK_NBR_UART_01);
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkDis
    353          
    354             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    355          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    356          

   \                                 In section .text, align 2, keep-with-next
    357          static  void  SerialBSP_LPC17xx_UART2_ClkDis (SERIAL_ERR  *perr)
    358          {
   \                     SerialBSP_LPC17xx_UART2_ClkDis: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    359             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    360                        CSP_INT_SRC_NBR_UART_02);
   \   00000004   0x2107             MOVS     R1,#+7
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    361             
    362             CSP_PM_PerClkDis(CSP_PM_PER_CLK_NBR_UART_01);
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkDis
    363          
    364             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    365          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    366          

   \                                 In section .text, align 2, keep-with-next
    367          static  void  SerialBSP_LPC17xx_UART3_ClkDis (SERIAL_ERR  *perr)
    368          {
   \                     SerialBSP_LPC17xx_UART3_ClkDis: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    369             CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,
    370                        CSP_INT_SRC_NBR_UART_03);
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CSP_IntDis
    371             
    372             CSP_PM_PerClkDis(CSP_PM_PER_CLK_NBR_UART_03);
   \   0000000C   0x2019             MOVS     R0,#+25
   \   0000000E   0x.... 0x....      BL       CSP_PM_PerClkDis
    373          
    374             *perr = SERIAL_ERR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    375          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    376          
    377          /*$PAGE*/
    378          /*
    379          *********************************************************************************************************
    380          *                                   SerialBSP_LPC17xx_UARTx_CfgGPIO()
    381          *
    382          * Description : Configure device/peripheral input/output pins.
    383          *
    384          * Argument(s) : flow_ctrl   Flow control enabled.
    385          *
    386          *               perr        Pointer to variable that will receive the return error code from this function :
    387          *
    388          *                               SERIAL_ERR_NONE                 Device/peripheral GPIO configured successfully.
    389          *                               SERIAL_ERR_DRV_INVALID          Device configuration invalid.
    390          *
    391          * Return(s)   : none.
    392          *
    393          * Caller(s)   : SerialDrv_Open() via 'pdev->BSP_API->CfgGPIO()'.
    394          *
    395          * Note(s)     : none.
    396          *********************************************************************************************************
    397          */
    398          

   \                                 In section .text, align 2, keep-with-next
    399          static  void  SerialBSP_LPC17xx_UART0_CfgGPIO (CPU_BOOLEAN   flow_ctrl,
    400                                                         SERIAL_ERR   *perr)
    401          {
   \                     SerialBSP_LPC17xx_UART0_CfgGPIO: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    402              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART0_CfgGPIO_0
    403                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    404                   return;
   \   00000010   0xE00D             B.N      ??SerialBSP_LPC17xx_UART0_CfgGPIO_1
    405              }
    406                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    407              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,        /* ... Port 0.                                           */
    408                           (CSP_GPIO_MSK   )(DEF_BIT_02 | DEF_BIT_03),   /* ... P0.2 = TXD0 ; P0.3 RXD0                           */
    409                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    410                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    411                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    412                           (CSP_OPT        )0u,
    413                           (CSP_OPT        )CSP_GPIO_FNCT_01);            /* ... Function 01 = UART peripheral                     */
   \                     ??SerialBSP_LPC17xx_UART0_CfgGPIO_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x210C             MOVS     R1,#+12
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       CSP_GPIO_Cfg
    414          
    415             *perr = SERIAL_ERR_NONE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x8028             STRH     R0,[R5, #+0]
    416          }
   \                     ??SerialBSP_LPC17xx_UART0_CfgGPIO_1: (+1)
   \   0000002E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    417          

   \                                 In section .text, align 2, keep-with-next
    418          static  void  SerialBSP_LPC17xx_UART1_CfgGPIO (CPU_BOOLEAN   flow_ctrl,
    419                                                         SERIAL_ERR   *perr)
    420          {
   \                     SerialBSP_LPC17xx_UART1_CfgGPIO: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    421              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD10D             BNE.N    ??SerialBSP_LPC17xx_UART1_CfgGPIO_0
    422                                                                          /* ------------- UART 1 GPIO CONFIGURATION ------------ */
    423                  CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,     /* ... Port 0.                                          */
    424                               (CSP_GPIO_MSK   )(DEF_BIT_15 | DEF_BIT_16 | DEF_BIT_17 | DEF_BIT_18),                               
    425                               (CPU_BOOLEAN    )0u,                       /* ... IN/OUT not used.                                 */
    426                               (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,  /* ... Neither Pull-up nor Pull-down                    */
    427                               (CPU_BOOLEAN    )DEF_NO,                   /* ... Pin interrupt disable                            */ 
    428                               (CSP_OPT        )0u,
    429                               (CSP_OPT        )CSP_GPIO_FNCT_01);        /* ... Function 01 = UART peripheral                    */                     
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2301             MOVS     R3,#+1
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0xF45F 0x21F0      MOVS     R1,#+491520
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       CSP_GPIO_Cfg
   \   00000026   0xE00C             B.N      ??SerialBSP_LPC17xx_UART1_CfgGPIO_1
    430              } else {
    431                  CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,     /* ... Port 0.                                          */
    432                               (CSP_GPIO_MSK   )(DEF_BIT_15 | DEF_BIT_16),                               
    433                               (CPU_BOOLEAN    )0u,                       /* ... IN/OUT not used.                                 */
    434                               (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,  /* ... Neither Pull-up nor Pull-down                    */
    435                               (CPU_BOOLEAN    )DEF_NO,                   /* ... Pin interrupt disable                            */ 
    436                               (CSP_OPT        )0u,                                      
    437                               (CSP_OPT        )CSP_GPIO_FNCT_01);        /* ... Function 01 = UART peripheral                    */
   \                     ??SerialBSP_LPC17xx_UART1_CfgGPIO_0: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x9002             STR      R0,[SP, #+8]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0x2301             MOVS     R3,#+1
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xF45F 0x31C0      MOVS     R1,#+98304
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       CSP_GPIO_Cfg
    438          
    439              }
    440          
    441             *perr = SERIAL_ERR_NONE;
   \                     ??SerialBSP_LPC17xx_UART1_CfgGPIO_1: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x8028             STRH     R0,[R5, #+0]
    442          }
   \   00000046   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    443          

   \                                 In section .text, align 2, keep-with-next
    444          static  void  SerialBSP_LPC17xx_UART1_CfgGPIO_Alt (CPU_BOOLEAN   flow_ctrl,
    445                                                             SERIAL_ERR   *perr)
    446          {
   \                     SerialBSP_LPC17xx_UART1_CfgGPIO_Alt: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    447              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD10C             BNE.N    ??SerialBSP_LPC17xx_UART1_CfgGPIO_Alt_0
    448                                                                          /* ------------- UART 1 GPIO CONFIGURATION ------------ */
    449                  CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_02,     /* ... Port 2.                                          */
    450                               (CSP_GPIO_MSK   )(DEF_BIT_00 | DEF_BIT_01 | DEF_BIT_02 | DEF_BIT_03),                               
    451                               (CPU_BOOLEAN    )0u,                       /* ... IN/OUT not used.                                 */
    452                               (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,  /* ... Neither Pull-up nor Pull-down                    */
    453                               (CPU_BOOLEAN    )DEF_NO,                   /* ... Pin interrupt disable                            */ 
    454                               (CSP_OPT        )0u,
    455                               (CSP_OPT        )CSP_GPIO_FNCT_02);        /* ... Function 02 = UART peripheral                    */
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2301             MOVS     R3,#+1
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x210F             MOVS     R1,#+15
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x.... 0x....      BL       CSP_GPIO_Cfg
   \   00000024   0xE00B             B.N      ??SerialBSP_LPC17xx_UART1_CfgGPIO_Alt_1
    456          
    457              } else {
    458                  CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_02,     /* ... Port 0.                                          */
    459                               (CSP_GPIO_MSK   )(DEF_BIT_00 | DEF_BIT_01),                               
    460                               (CPU_BOOLEAN    )0u,                       /* ... IN/OUT not used.                                 */
    461                               (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,  /* ... Neither Pull-up nor Pull-down                    */
    462                               (CPU_BOOLEAN    )DEF_NO,                   /* ... Pin interrupt disable                            */ 
    463                               (CSP_OPT        )0u,
    464                               (CSP_OPT        )CSP_GPIO_FNCT_02);        /* ... Function 02 = UART peripheral                    */
   \                     ??SerialBSP_LPC17xx_UART1_CfgGPIO_Alt_0: (+1)
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x9002             STR      R0,[SP, #+8]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x2103             MOVS     R1,#+3
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       CSP_GPIO_Cfg
    465              }
    466          
    467             *perr = SERIAL_ERR_NONE;
   \                     ??SerialBSP_LPC17xx_UART1_CfgGPIO_Alt_1: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x8028             STRH     R0,[R5, #+0]
    468          }
   \   00000042   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    469          
    470          

   \                                 In section .text, align 2, keep-with-next
    471          static  void  SerialBSP_LPC17xx_UART2_CfgGPIO (CPU_BOOLEAN   flow_ctrl,
    472                                                         SERIAL_ERR   *perr)
    473          {
   \                     SerialBSP_LPC17xx_UART2_CfgGPIO: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    474              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART2_CfgGPIO_0
    475                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    476                   return;
   \   00000010   0xE00E             B.N      ??SerialBSP_LPC17xx_UART2_CfgGPIO_1
    477              }
    478                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    479              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,        /* ... Port 0.                                           */
    480                           (CSP_GPIO_MSK   )(DEF_BIT_10 | DEF_BIT_11),   /* ... P0.10 = TXD0 ; P0.11 RXD0                         */
    481                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    482                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    483                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    484                           (CSP_OPT        )0u,
    485                           (CSP_OPT        )CSP_GPIO_FNCT_01);           /* ... Function 01 = UART peripheral                     */
   \                     ??SerialBSP_LPC17xx_UART2_CfgGPIO_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF44F 0x6140      MOV      R1,#+3072
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       CSP_GPIO_Cfg
    486          
    487             *perr = SERIAL_ERR_NONE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x8028             STRH     R0,[R5, #+0]
    488          }
   \                     ??SerialBSP_LPC17xx_UART2_CfgGPIO_1: (+1)
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    489          
    490          

   \                                 In section .text, align 2, keep-with-next
    491          static  void  SerialBSP_LPC17xx_UART2_CfgGPIO_Alt (CPU_BOOLEAN   flow_ctrl,
    492                                                             SERIAL_ERR   *perr)
    493          {
   \                     SerialBSP_LPC17xx_UART2_CfgGPIO_Alt: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    494              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART2_CfgGPIO_Alt_0
    495                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    496                   return;
   \   00000010   0xE00E             B.N      ??SerialBSP_LPC17xx_UART2_CfgGPIO_Alt_1
    497              }
    498                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    499              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_02,        /* ... Port 2.                                           */
    500                           (CSP_GPIO_MSK   )(DEF_BIT_08 | DEF_BIT_09),   /* ... P2.8 = TXD0 ; P2.9 RXD0                           */
    501                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    502                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    503                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    504                           (CSP_OPT        )0u,
    505                           (CSP_OPT        )CSP_GPIO_FNCT_02);           /* ... Function 02 = UART peripheral                     */
   \                     ??SerialBSP_LPC17xx_UART2_CfgGPIO_Alt_0: (+1)
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF44F 0x7140      MOV      R1,#+768
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       CSP_GPIO_Cfg
    506          
    507             *perr = SERIAL_ERR_NONE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x8028             STRH     R0,[R5, #+0]
    508          }
   \                     ??SerialBSP_LPC17xx_UART2_CfgGPIO_Alt_1: (+1)
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    509          

   \                                 In section .text, align 2, keep-with-next
    510          static  void  SerialBSP_LPC17xx_UART3_CfgGPIO (CPU_BOOLEAN   flow_ctrl,
    511                                                         SERIAL_ERR   *perr)
    512          
    513          {
   \                     SerialBSP_LPC17xx_UART3_CfgGPIO: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    514              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART3_CfgGPIO_0
    515                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    516                   return;
   \   00000010   0xE00D             B.N      ??SerialBSP_LPC17xx_UART3_CfgGPIO_1
    517              }
    518                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    519              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,        /* ... Port 0.                                           */
    520                           (CSP_GPIO_MSK   )(DEF_BIT_00 | DEF_BIT_01),   /* ... P0.0 = TXD3 ; P0.1 RXD3                           */
    521                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    522                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    523                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    524                           (CSP_OPT        )0u,
    525                           (CSP_OPT        )CSP_GPIO_FNCT_02);           /* ... Function 02 = UART peripheral                     */                 
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_0: (+1)
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       CSP_GPIO_Cfg
    526          
    527             *perr = SERIAL_ERR_NONE;   
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x8028             STRH     R0,[R5, #+0]
    528          }
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_1: (+1)
   \   0000002E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    529          

   \                                 In section .text, align 2, keep-with-next
    530          static  void  SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0 (CPU_BOOLEAN   flow_ctrl,
    531                                                               SERIAL_ERR   *perr)
    532          
    533          {
   \                     SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    534              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0_0
    535                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    536                   return;
   \   00000010   0xE00E             B.N      ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0_1
    537              }
    538                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    539              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,        /* ... Port 0.                                           */
    540                           (CSP_GPIO_MSK   )(DEF_BIT_25 | DEF_BIT_26),   /* ... P0.25 = TXD3 ; P0.26 RXD3                         */
    541                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    542                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    543                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    544                           (CSP_OPT        )0u,                             
    545                           (CSP_OPT        )CSP_GPIO_FNCT_03);           /* ... Function 03 = UART peripheral                     */                                        
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0_0: (+1)
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF05F 0x61C0      MOVS     R1,#+100663296
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       CSP_GPIO_Cfg
    546          
    547             *perr = SERIAL_ERR_NONE;   
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x8028             STRH     R0,[R5, #+0]
    548          }
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0_1: (+1)
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    549          
    550          

   \                                 In section .text, align 2, keep-with-next
    551          static  void  SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1 (CPU_BOOLEAN   flow_ctrl,
    552                                                               SERIAL_ERR   *perr)
    553          
    554          {
   \                     SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    555              if (flow_ctrl == DEF_ENABLED) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE.N    ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1_0
    556                  *perr = SERIAL_ERR_DRV_INVALID;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    557                   return;
   \   00000010   0xE00E             B.N      ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1_1
    558              }
    559                                                                         /* ------------- UART 0 GPIO CONFIGURATION ------------- */
    560              CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_04,        /* ... Port 4.                                           */
    561                           (CSP_GPIO_MSK   )(DEF_BIT_28| DEF_BIT_29),    /* ... P4.28 = TXD3 ; P4.29 TXD3                         */
    562                           (CPU_BOOLEAN    )0u,                          /* ... IN/OUT not used.                                  */
    563                           (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,     /* ... Neither Pull-up nor Pull-down                     */
    564                           (CPU_BOOLEAN    )DEF_NO,                      /* ... Pin interrupt disable                             */ 
    565                           (CSP_OPT        )0u,                   
    566                           (CSP_OPT        )CSP_GPIO_FNCT_03);           /* ... Function 03 = UART peripheral                     */
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1_0: (+1)
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF05F 0x5140      MOVS     R1,#+805306368
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x.... 0x....      BL       CSP_GPIO_Cfg
    567          
    568             *perr = SERIAL_ERR_NONE;   
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x8028             STRH     R0,[R5, #+0]
    569          }
   \                     ??SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1_1: (+1)
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    570          
    571          
    572          /*$PAGE*/
    573          /*
    574          *********************************************************************************************************
    575          *                                         SerialBSP_CfgInt()
    576          *
    577          * Description : Configure device/peripheral interrupt.
    578          *
    579          * Argument(s) : pdev        Pointer to device.
    580          *
    581          *               perr        Pointer to variable that will receive the return error code from this function :
    582          *
    583          *                               SERIAL_ERR_NONE                 Device/peripheral interrupt configured successfully.
    584          *
    585          * Return(s)   : none.
    586          *
    587          * Caller(s)   : SerialDrv_Open() via 'pdev->BSP_API->CfgInt()'.
    588          *
    589          * Note(s)     : none.
    590          *********************************************************************************************************
    591          */
    592          

   \                                 In section .text, align 2, keep-with-next
    593          static  void  SerialBSP_LPC17xx_UART0_CfgInt (SERIAL_DEV  *pdev,
    594                                                        SERIAL_ERR  *perr)
    595          {
   \                     SerialBSP_LPC17xx_UART0_CfgInt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    596          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)        
    597             CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    598                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_00,
    599                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UARTx_IntHandler,
    600                            (void         *)pdev);
   \   00000006   0x0023             MOVS     R3,R4
   \   00000008   0x.... 0x....      ADR.W    R2,SerialBSP_LPC17xx_UARTx_IntHandler
   \   0000000C   0x2105             MOVS     R1,#+5
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       CSP_IntVectReg
    601          #else
    602          
    603             SerialBSP_LPC17xx_USART0_DevPtr = pdev;
    604             
    605             CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    606                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_00,
    607                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UART0_IntHandler,
    608                            (void         *)pdev);
    609          #endif   
    610             
    611             CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_00);
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       CSP_IntEn
    612              
    613             *perr = SERIAL_ERR_NONE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x8028             STRH     R0,[R5, #+0]
    614          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    615          

   \                                 In section .text, align 2, keep-with-next
    616          static  void  SerialBSP_LPC17xx_UART1_CfgInt (SERIAL_DEV  *pdev,
    617                                                        SERIAL_ERR  *perr)
    618          {
   \                     SerialBSP_LPC17xx_UART1_CfgInt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    619          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    620              CSP_IntVectReg((CSP_DEV_NBR  )CSP_INT_CTRL_NBR_MAIN,
    621                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_01,
    622                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UARTx_IntHandler,
    623                            (CPU_VOID     *)pdev);
   \   00000006   0x0023             MOVS     R3,R4
   \   00000008   0x.... 0x....      ADR.W    R2,SerialBSP_LPC17xx_UARTx_IntHandler
   \   0000000C   0x2106             MOVS     R1,#+6
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       CSP_IntVectReg
    624          #else
    625          
    626              SerialBSP_LPC17xx_USART1_DevPtr = pdev;
    627          
    628              CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    629                             (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_01,
    630                             (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UART1_IntHandler,
    631                             (void         *)pdev);
    632          #endif    
    633             
    634             CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_01);
   \   00000014   0x2106             MOVS     R1,#+6
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       CSP_IntEn
    635              
    636             *perr = SERIAL_ERR_NONE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x8028             STRH     R0,[R5, #+0]
    637          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    638          

   \                                 In section .text, align 2, keep-with-next
    639          static  void  SerialBSP_LPC17xx_UART2_CfgInt (SERIAL_DEV  *pdev,
    640                                                        SERIAL_ERR  *perr)
    641          {
   \                     SerialBSP_LPC17xx_UART2_CfgInt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    642          
    643          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    644              CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    645                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_02,
    646                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UARTx_IntHandler,
    647                            (void         *)pdev);
   \   00000006   0x0023             MOVS     R3,R4
   \   00000008   0x.... 0x....      ADR.W    R2,SerialBSP_LPC17xx_UARTx_IntHandler
   \   0000000C   0x2107             MOVS     R1,#+7
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       CSP_IntVectReg
    648          #else
    649              SerialBSP_LPC17xx_USART2_DevPtr = pdev;
    650              
    651              CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    652                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_02,
    653                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UART2_IntHandler,
    654                            (void         *)pdev);
    655          
    656          #endif
    657              
    658             CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_02);
   \   00000014   0x2107             MOVS     R1,#+7
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       CSP_IntEn
    659              
    660             *perr = SERIAL_ERR_NONE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x8028             STRH     R0,[R5, #+0]
    661          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    662          

   \                                 In section .text, align 2, keep-with-next
    663          static  void  SerialBSP_LPC17xx_UART3_CfgInt (SERIAL_DEV  *pdev,
    664                                                        SERIAL_ERR  *perr)
    665          {
   \                     SerialBSP_LPC17xx_UART3_CfgInt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    666          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    667             CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    668                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_03,
    669                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UARTx_IntHandler,
    670                            (CPU_VOID     *)pdev);
   \   00000006   0x0023             MOVS     R3,R4
   \   00000008   0x.... 0x....      ADR.W    R2,SerialBSP_LPC17xx_UARTx_IntHandler
   \   0000000C   0x2108             MOVS     R1,#+8
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       CSP_IntVectReg
    671          #else
    672             SerialBSP_LPC17xx_USART3_DevPtr = pdev;
    673          
    674             CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
    675                            (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_03,
    676                            (CPU_FNCT_PTR  )SerialBSP_LPC17xx_UART3_IntHandler,
    677                            (void         *)pdev);
    678          #endif
    679             
    680             CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_03);
   \   00000014   0x2108             MOVS     R1,#+8
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       CSP_IntEn
    681              
    682             *perr = SERIAL_ERR_NONE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x8028             STRH     R0,[R5, #+0]
    683          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    684          
    685          
    686          /*$PAGE*/
    687          /*
    688          *********************************************************************************************************
    689          *                                SerialBSP_LPC17xx_UARTx_ClkFreqGet()
    690          *
    691          * Description : Get peripheral clock frequency.
    692          *
    693          * Argument(s) : none.
    694          *
    695          * Return(s)   : Peripheral clock frequency, in Hz.
    696          *
    697          * Caller(s)   : SerialDrv_Open() via 'pdev->BSP_API->ClkFreqGet()'.
    698          *
    699          * Note(s)     : none.
    700          *********************************************************************************************************
    701          */
    702          

   \                                 In section .text, align 2, keep-with-next
    703          static  CPU_INT32U  SerialBSP_LPC17xx_UART0_ClkFreqGet (void)
    704          {
   \                     SerialBSP_LPC17xx_UART0_ClkFreqGet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    705              CPU_INT32U  clk_freq;
    706          
    707          
    708              clk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_UART_00);
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       CSP_PM_PerClkFreqGet
   \   00000008   0x0004             MOVS     R4,R0
    709              return (clk_freq);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    710          }
    711          
    712          

   \                                 In section .text, align 2, keep-with-next
    713          static  CPU_INT32U  SerialBSP_LPC17xx_UART1_ClkFreqGet (void)
    714          {
   \                     SerialBSP_LPC17xx_UART1_ClkFreqGet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    715              CPU_INT32U  clk_freq;
    716          
    717          
    718              clk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_UART_01);
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       CSP_PM_PerClkFreqGet
   \   00000008   0x0004             MOVS     R4,R0
    719              return (clk_freq);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    720          }
    721          
    722          

   \                                 In section .text, align 2, keep-with-next
    723          static  CPU_INT32U  SerialBSP_LPC17xx_UART2_ClkFreqGet (void)
    724          {
   \                     SerialBSP_LPC17xx_UART2_ClkFreqGet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    725              CPU_INT32U  clk_freq;
    726          
    727          
    728              clk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_UART_02);
   \   00000002   0x2018             MOVS     R0,#+24
   \   00000004   0x.... 0x....      BL       CSP_PM_PerClkFreqGet
   \   00000008   0x0004             MOVS     R4,R0
    729              return (clk_freq);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    730          }
    731          
    732          

   \                                 In section .text, align 2, keep-with-next
    733          static  CPU_INT32U  SerialBSP_LPC17xx_UART3_ClkFreqGet (void)
    734          {
   \                     SerialBSP_LPC17xx_UART3_ClkFreqGet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    735              CPU_INT32U  clk_freq;
    736          
    737          
    738              clk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_UART_03);
   \   00000002   0x2019             MOVS     R0,#+25
   \   00000004   0x.... 0x....      BL       CSP_PM_PerClkFreqGet
   \   00000008   0x0004             MOVS     R4,R0
    739              return (clk_freq);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    740          }
    741          
    742          
    743          /*$PAGE*/
    744          /*
    745          *********************************************************************************************************
    746          *                                       SerialBSP_LPC17xx_UARTx_IntHandler()
    747          *
    748          * Description : Handle serial port interrupt.
    749          *
    750          * Argument(s) : p_arg     Pointer to the Interrupt ISR argument.
    751          *                         
    752          * Return(s)   : none.
    753          *
    754          * Caller(s)   : This is an ISR.
    755          *
    756          * Note(s)     : none.
    757          *********************************************************************************************************
    758          */
    759          
    760          #if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    761          static  void  SerialBSP_LPC17xx_UARTx_IntHandler (void *p_arg)
    762          {
   \                     SerialBSP_LPC17xx_UARTx_IntHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    763              SERIAL_DEV      *p_dev;    
    764              SERIAL_DEV_CFG  *p_cfg;
    765          
    766              p_dev  = (SERIAL_DEV *)p_arg;
   \   00000004   0x0025             MOVS     R5,R4
    767              p_cfg  = p_dev->Dev_Cfg;    
   \   00000006   0x6868             LDR      R0,[R5, #+4]
   \   00000008   0x0006             MOVS     R6,R0
    768              p_cfg->Drv_API->ISR_Handler(p_dev, SERIAL_ISR_TYPE_UNKNOWN);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x6872             LDR      R2,[R6, #+4]
   \   00000010   0x6A52             LDR      R2,[R2, #+36]
   \   00000012   0x4790             BLX      R2
    769          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
    770          #else
    771          static  void  SerialBSP_LPC17xx_UART0_IntHandler  (void *p_arg) 
    772          {
    773              SERIAL_DEV      *p_dev;
    774              SERIAL_DEV_CFG  *p_cfg;
    775          
    776              
    777              p_dev  = (SERIAL_DEV *)SerialBSP_LPC17xx_USART0_DevPtr;
    778              p_cfg  = p_dev->Dev_Cfg;    
    779              p_cfg->Drv_API->ISR_Handler(p_dev, SERIAL_ISR_TYPE_UNKNOWN);
    780          
    781          }
    782          static  void  SerialBSP_LPC17xx_UART1_IntHandler  (void *p_arg)
    783          {
    784              SERIAL_DEV      *p_dev;
    785              SERIAL_DEV_CFG  *p_cfg;
    786          
    787              
    788              p_dev  = (SERIAL_DEV *)SerialBSP_LPC17xx_USART1_DevPtr;
    789              p_cfg  = p_dev->Dev_Cfg;    
    790              p_cfg->Drv_API->ISR_Handler(p_dev, SERIAL_ISR_TYPE_UNKNOWN);
    791          
    792          }
    793          
    794          static  void  SerialBSP_LPC17xx_UART2_IntHandler  (void *p_arg)
    795          {
    796              SERIAL_DEV      *p_dev;
    797              SERIAL_DEV_CFG  *p_cfg;
    798          
    799              
    800              p_dev  = (SERIAL_DEV *)SerialBSP_LPC17xx_USART2_DevPtr;
    801              p_cfg  = p_dev->Dev_Cfg;    
    802              p_cfg->Drv_API->ISR_Handler(p_dev, SERIAL_ISR_TYPE_UNKNOWN);
    803          }
    804          static  void  SerialBSP_LPC17xx_UART3_IntHandler  (void *p_arg)
    805          {
    806              SERIAL_DEV      *p_dev;
    807              SERIAL_DEV_CFG  *p_cfg;
    808          
    809              
    810              p_dev  = (SERIAL_DEV *)SerialBSP_LPC17xx_USART3_DevPtr;
    811              p_cfg  = p_dev->Dev_Cfg;    
    812              p_cfg->Drv_API->ISR_Handler(p_dev, SERIAL_ISR_TYPE_UNKNOWN);
    813          }
    814          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   SerialBSP_LPC17xx_UART0_CfgGPIO
        24   -> CSP_GPIO_Cfg
      16   SerialBSP_LPC17xx_UART0_CfgInt
        16   -> CSP_IntEn
        16   -> CSP_IntVectReg
       8   SerialBSP_LPC17xx_UART0_ClkDis
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkDis
       8   SerialBSP_LPC17xx_UART0_ClkEn
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkEn
       8   SerialBSP_LPC17xx_UART0_ClkFreqGet
         8   -> CSP_PM_PerClkFreqGet
      24   SerialBSP_LPC17xx_UART1_CfgGPIO
        24   -> CSP_GPIO_Cfg
      24   SerialBSP_LPC17xx_UART1_CfgGPIO_Alt
        24   -> CSP_GPIO_Cfg
      16   SerialBSP_LPC17xx_UART1_CfgInt
        16   -> CSP_IntEn
        16   -> CSP_IntVectReg
       8   SerialBSP_LPC17xx_UART1_ClkDis
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkDis
       8   SerialBSP_LPC17xx_UART1_ClkEn
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkEn
       8   SerialBSP_LPC17xx_UART1_ClkFreqGet
         8   -> CSP_PM_PerClkFreqGet
      24   SerialBSP_LPC17xx_UART2_CfgGPIO
        24   -> CSP_GPIO_Cfg
      24   SerialBSP_LPC17xx_UART2_CfgGPIO_Alt
        24   -> CSP_GPIO_Cfg
      16   SerialBSP_LPC17xx_UART2_CfgInt
        16   -> CSP_IntEn
        16   -> CSP_IntVectReg
       8   SerialBSP_LPC17xx_UART2_ClkDis
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkDis
       8   SerialBSP_LPC17xx_UART2_ClkEn
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkEn
       8   SerialBSP_LPC17xx_UART2_ClkFreqGet
         8   -> CSP_PM_PerClkFreqGet
      24   SerialBSP_LPC17xx_UART3_CfgGPIO
        24   -> CSP_GPIO_Cfg
      24   SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0
        24   -> CSP_GPIO_Cfg
      24   SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1
        24   -> CSP_GPIO_Cfg
      16   SerialBSP_LPC17xx_UART3_CfgInt
        16   -> CSP_IntEn
        16   -> CSP_IntVectReg
       8   SerialBSP_LPC17xx_UART3_ClkDis
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkDis
       8   SerialBSP_LPC17xx_UART3_ClkEn
         8   -> CSP_IntDis
         8   -> CSP_PM_PerClkEn
       8   SerialBSP_LPC17xx_UART3_ClkFreqGet
         8   -> CSP_PM_PerClkFreqGet
      16   SerialBSP_LPC17xx_UARTx_IntHandler
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  SerialBSP_LPC17xx_UART0
      48  SerialBSP_LPC17xx_UART0_CfgGPIO
      34  SerialBSP_LPC17xx_UART0_CfgInt
      24  SerialBSP_LPC17xx_UART0_ClkDis
      24  SerialBSP_LPC17xx_UART0_ClkEn
      14  SerialBSP_LPC17xx_UART0_ClkFreqGet
      20  SerialBSP_LPC17xx_UART1
      20  SerialBSP_LPC17xx_UART1_Alt
      72  SerialBSP_LPC17xx_UART1_CfgGPIO
      68  SerialBSP_LPC17xx_UART1_CfgGPIO_Alt
      34  SerialBSP_LPC17xx_UART1_CfgInt
      24  SerialBSP_LPC17xx_UART1_ClkDis
      24  SerialBSP_LPC17xx_UART1_ClkEn
      14  SerialBSP_LPC17xx_UART1_ClkFreqGet
      20  SerialBSP_LPC17xx_UART2
      20  SerialBSP_LPC17xx_UART2_Alt
      50  SerialBSP_LPC17xx_UART2_CfgGPIO
      50  SerialBSP_LPC17xx_UART2_CfgGPIO_Alt
      34  SerialBSP_LPC17xx_UART2_CfgInt
      24  SerialBSP_LPC17xx_UART2_ClkDis
      24  SerialBSP_LPC17xx_UART2_ClkEn
      14  SerialBSP_LPC17xx_UART2_ClkFreqGet
      20  SerialBSP_LPC17xx_UART3
      20  SerialBSP_LPC17xx_UART3_Alt0
      20  SerialBSP_LPC17xx_UART3_Alt1
      48  SerialBSP_LPC17xx_UART3_CfgGPIO
      50  SerialBSP_LPC17xx_UART3_CfgGPIO_Alt0
      50  SerialBSP_LPC17xx_UART3_CfgGPIO_Alt1
      34  SerialBSP_LPC17xx_UART3_CfgInt
      24  SerialBSP_LPC17xx_UART3_ClkDis
      24  SerialBSP_LPC17xx_UART3_ClkEn
      14  SerialBSP_LPC17xx_UART3_ClkFreqGet
      22  SerialBSP_LPC17xx_UARTx_IntHandler
      12  SerialDev_LPCxxxx_UART0
      12  SerialDev_LPCxxxx_UART1
      12  SerialDev_LPCxxxx_UART1_Alt
      12  SerialDev_LPCxxxx_UART2
      12  SerialDev_LPCxxxx_UART2_Alt
      12  SerialDev_LPCxxxx_UART3
      12  SerialDev_LPCxxxx_UART3_Alt0
      12  SerialDev_LPCxxxx_UART3_Alt1

 
  96 bytes in section .data
 160 bytes in section .rodata
 842 bytes in section .text
 
 842 bytes of CODE  memory
 160 bytes of CONST memory
  96 bytes of DATA  memory

Errors: none
Warnings: none
