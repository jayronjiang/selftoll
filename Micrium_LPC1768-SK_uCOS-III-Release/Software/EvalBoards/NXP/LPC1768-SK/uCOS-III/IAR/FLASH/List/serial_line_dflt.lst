###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       06/Apr/2017  11:01:13
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Line\serial_line_dflt.c
#    Command line =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Line\serial_line_dflt.c
#        -lCN
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\CoreSupport\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Core\CM3\DeviceSupport\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\EvalBoards\NXP\LPC1768-SK\LPC17XXCMSIS\Drivers\include\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\LPC17xx\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Driver\NXP\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Line\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\uCOS-III\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\OS\
#        -I
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-Serial\Source\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\serial_line_dflt.lst
#    Object file  =  
#        E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\serial_line_dflt.o
#
###############################################################################

E:\新项目\移交资料LHT\自助缴费机\软件\Micrium_LPC1768-SK_uCOS-III-Release\Software\uC-Serial\Line\serial_line_dflt.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     SERIAL (BYTE) COMMUNICATION
      4          *
      5          *                         (c) Copyright 2007-2009; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                     SERIAL (BYTE) COMMUNICATION
     18          *
     19          *                                         SERIAL LINE DRIVER
     20          *                                               DEFAULT
     21          *
     22          * Filename      : serial_line_dflt.c
     23          * Version       : V2.00
     24          * Programmer(s) : FGK
     25          *********************************************************************************************************
     26          */
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                            INCLUDE FILES
     31          *********************************************************************************************************
     32          */
     33          
     34          #define    SERIAL_LINE_DFLT_MODULE
     35          #include  <serial.h>
     36          
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                      LOCAL FUNCTION PROTOTYPES
     41          *********************************************************************************************************
     42          */
     43                                                                          /* Open  line driver.                                   */
     44          static  void  *SerialLine_Open   (SERIAL_DEV  *pdev,
     45                                            SERIAL_ERR  *perr);
     46                                                                          /* Close line driver.                                   */
     47          static  void   SerialLine_Close  (SERIAL_DEV  *pdev,
     48                                            void        *pline_data,
     49                                            SERIAL_ERR  *perr);
     50                                                                          /* Rd octet from buf via protocol.                      */
     51          static  void   SerialLine_RdOctet(SERIAL_DEV  *pdev,
     52                                            SERIAL_BUF  *pbuf,
     53                                            CPU_INT08U  *pdatum,
     54                                            SERIAL_ERR  *perr);
     55                                                                          /* Wr octet into buf via protocol.                      */
     56          static  void   SerialLine_WrOctet(SERIAL_DEV  *pdev,
     57                                            SERIAL_BUF  *pbuf,
     58                                            CPU_INT08U   datum,
     59                                            SERIAL_ERR  *perr);
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *********************************************************************************************************
     65          *                                  SERIAL INTERFACE LINE DRIVER API
     66          *********************************************************************************************************
     67          *********************************************************************************************************
     68          */
     69          

   \                                 In section .rodata, align 4
     70          SERIAL_LINE_DRV_API  SerialLine_Dflt = {
   \                     SerialLine_Dflt:
   \   00000000   0x........         DC32 SerialLine_Open, SerialLine_Close, SerialLine_RdOctet
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 SerialLine_WrOctet
     71              SerialLine_Open,
     72              SerialLine_Close,
     73              SerialLine_RdOctet,
     74              SerialLine_WrOctet
     75          };
     76          
     77          
     78          /*$PAGE*/
     79          /*
     80          *********************************************************************************************************
     81          *********************************************************************************************************
     82          *                                     DRIVER INTERFACE FUNCTIONS
     83          *********************************************************************************************************
     84          *********************************************************************************************************
     85          */
     86          
     87          /*
     88          *********************************************************************************************************
     89          *                                          SerialLine_Open()
     90          *
     91          * Description : Open serial line driver.
     92          *
     93          * Argument(s) : pdev        Pointer to device.
     94          *
     95          *               perr        Pointer to variable that will receive the return error code from this function :
     96          *
     97          *                               SERIAL_ERR_NONE                 Serial line driver              opened.
     98          *                               SERIAL_ERR_LINE_OPEN            Serial line driver could NOT be opened.
     99          *
    100          * Return(s)   : Pointer to line driver data structure.
    101          *
    102          * Caller(s)   : Serial_Open().
    103          *
    104          * Note(s)     : 1) Interrupts are assumed to be disabled when this function is called.
    105          *********************************************************************************************************
    106          */
    107          

   \                                 In section .text, align 2, keep-with-next
    108          static  void  *SerialLine_Open (SERIAL_DEV  *pdev,
    109                                          SERIAL_ERR  *perr)
    110          {
   \                     SerialLine_Open: (+1)
   \   00000000   0xB401             PUSH     {R0}
    111             (void)&pdev;
   \   00000002   0x4668             MOV      R0,SP
    112          
    113             *perr = SERIAL_ERR_NONE;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x8008             STRH     R0,[R1, #+0]
    114          
    115              return ((void *)0);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0x4770             BX       LR               ;; return
    116          }
    117          
    118          
    119          /*$PAGE*/
    120          /*
    121          *********************************************************************************************************
    122          *                                         SerialLine_Close()
    123          *
    124          * Description : Close serial line driver.
    125          *
    126          * Argument(s) : pdev        Pointer to device.
    127          *
    128          *               pline_data  Pointer to line driver data structure.
    129          *
    130          *               perr        Pointer to variable that will receive the return error code from this function :
    131          *
    132          *                               SERIAL_ERR_NONE                 Serial line driver closed.
    133          *
    134          * Return(s)   : None.
    135          *
    136          * Caller(s)   : Serial_Close().
    137          *
    138          * Note(s)     : 1) Interrupts are assumed to be disabled when this function is called.
    139          *********************************************************************************************************
    140          */
    141          

   \                                 In section .text, align 2, keep-with-next
    142          static  void  SerialLine_Close (SERIAL_DEV  *pdev,
    143                                          void        *pline_data,
    144                                          SERIAL_ERR  *perr)
    145          {
   \                     SerialLine_Close: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
    146             (void)&pdev;
   \   00000002   0x4668             MOV      R0,SP
    147             (void)&pline_data;
   \   00000004   0xA801             ADD      R0,SP,#+4
    148          
    149             *perr = SERIAL_ERR_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x8010             STRH     R0,[R2, #+0]
    150          }
   \   0000000A   0xB002             ADD      SP,SP,#+8
   \   0000000C   0x4770             BX       LR               ;; return
    151          
    152          
    153          /*$PAGE*/
    154          /*
    155          *********************************************************************************************************
    156          *                                        SerialLine_RdOctet()
    157          *
    158          * Description : Get next octet to transmit.
    159          *
    160          * Argument(s) : pdev        Pointer to device.
    161          *
    162          *               pbuf        Pointer to buffer.
    163          *
    164          *               pdatum      Pointer to variable that will receive data octet.
    165          *
    166          *               perr        Pointer to variable that will receive the return error code from this function :
    167          *
    168          *                               SERIAL_ERR_NONE                 Octet supplied.
    169          *                               SERIAL_ERR_UNDERFLOW            Buffer underflow.
    170          *
    171          * Return(s)   : None.
    172          *
    173          * Caller(s)   : Serial_IF_Tx().
    174          *
    175          * Note(s)     : (1) Interrupts are assumed to be disabled when this function is called.
    176          *********************************************************************************************************
    177          */
    178          

   \                                 In section .text, align 2, keep-with-next
    179          static  void  SerialLine_RdOctet (SERIAL_DEV  *pdev,
    180                                            SERIAL_BUF  *pbuf,
    181                                            CPU_INT08U  *pdatum,
    182                                            SERIAL_ERR  *perr)
    183          {
   \                     SerialLine_RdOctet: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    184              CPU_BOOLEAN  rd;
    185          
    186          
    187             (void)&pdev;
   \   00000008   0x4668             MOV      R0,SP
    188          
    189              rd = SerialBuf_RdOctet(pbuf, pdatum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       SerialBuf_RdOctet
   \   00000012   0x0007             MOVS     R7,R0
    190              if (rd == DEF_NO) {
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x2F00             CMP      R7,#+0
   \   00000018   0xD102             BNE.N    ??SerialLine_RdOctet_0
    191                 *perr = SERIAL_ERR_UNDERFLOW;
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x8030             STRH     R0,[R6, #+0]
    192                  return;
   \   0000001E   0xE001             B.N      ??SerialLine_RdOctet_1
    193              }
    194          
    195             *perr = SERIAL_ERR_NONE;
   \                     ??SerialLine_RdOctet_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x8030             STRH     R0,[R6, #+0]
    196          }
   \                     ??SerialLine_RdOctet_1: (+1)
   \   00000024   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    197          
    198          
    199          /*$PAGE*/
    200          /*
    201          *********************************************************************************************************
    202          *                                        SerialLine_WrOctet()
    203          *
    204          * Description : Handle octet received from serial port.
    205          *
    206          * Argument(s) : pdev        Pointer to device.
    207          *
    208          *               pbuf        Pointer to buffer.
    209          *
    210          *               datum       Data octet to write.
    211          *
    212          *               perr        Pointer to variable that will receive the return error code from this function :
    213          *
    214          *                               SERIAL_ERR_NONE                 Octet handled.
    215          *                               SERIAL_ERR_OVERFLOW             Buffer overflow.
    216          *                               SERIAL_ERR_LINE_END             End of line detected.
    217          *
    218          * Return(s)   : None.
    219          *
    220          * Caller(s)   : Serial_IF_Rx().
    221          *
    222          * Note(s)     : (1) Interrupts are assumed to be disabled when this function is called.
    223          *********************************************************************************************************
    224          */
    225          

   \                                 In section .text, align 2, keep-with-next
    226          static  void  SerialLine_WrOctet (SERIAL_DEV  *pdev,
    227                                            SERIAL_BUF  *pbuf,
    228                                            CPU_INT08U   datum,
    229                                            SERIAL_ERR  *perr)
    230          {
   \                     SerialLine_WrOctet: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    231              CPU_BOOLEAN  wr;
    232          
    233          
    234             (void)&pdev;
   \   00000008   0x4668             MOV      R0,SP
    235          
    236              wr = SerialBuf_WrOctet(pbuf, datum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       SerialBuf_WrOctet
   \   00000014   0x0007             MOVS     R7,R0
    237              if (wr == DEF_NO) {
   \   00000016   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   0x2F00             CMP      R7,#+0
   \   0000001A   0xD102             BNE.N    ??SerialLine_WrOctet_0
    238                 *perr = SERIAL_ERR_OVERFLOW;
   \   0000001C   0x2005             MOVS     R0,#+5
   \   0000001E   0x8030             STRH     R0,[R6, #+0]
    239                  return;
   \   00000020   0xE001             B.N      ??SerialLine_WrOctet_1
    240              }
    241          
    242             *perr = SERIAL_ERR_NONE;
   \                     ??SerialLine_WrOctet_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x8030             STRH     R0,[R6, #+0]
    243          }
   \                     ??SerialLine_WrOctet_1: (+1)
   \   00000026   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SerialLine_Close
       4   SerialLine_Open
      24   SerialLine_RdOctet
        24   -> SerialBuf_RdOctet
      24   SerialLine_WrOctet
        24   -> SerialBuf_WrOctet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  SerialLine_Close
      16  SerialLine_Dflt
      14  SerialLine_Open
      38  SerialLine_RdOctet
      40  SerialLine_WrOctet

 
  16 bytes in section .rodata
 106 bytes in section .text
 
 106 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
